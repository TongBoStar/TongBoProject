/*
 * 
 */
package com.terrence.crm.dol.action;


import javax.servlet.http.HttpServletRequest;
import org.apache.struts2.components.ActionMessage;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.base.utils.Struts2Utils;
import com.terrence.crm.dol.service.IPdQmService;
import com.terrence.crm.dol.utils.DateUtils;
import com.terrence.crm.dol.utils.SpringSecurityUtils;
import com.terrence.crm.dol.bean.PdQm;
import com.terrence.crm.dol.query.PdQmQuery;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/pdQm")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "pdQm." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class PdQmAction extends CrudActionSupport<PdQm>  implements ApplicationContextAware{
	
	
	@Autowired
	@Qualifier("pdQmService")
	private IPdQmService pdQmService;
	
	
	private PdQm entity;

	private PdQmQuery pdQmQuery;
	
	
	private java.lang.Long pdQmId;
	
	/** 分页器 */
	private Page<PdQm> page = new Page<PdQm>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<PdQm> pdQmList;
	private Date now = new Date();
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (pdQmId != null ) {
			entity = pdQmService.getById(pdQmId);
		} else {
			entity = new PdQm();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try {
			pdQmService.deleteByMultipleId(checkedIdList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}
	
	public String listToQuery()throws Exception
	{
		if(pdQmQuery == null) {
			pdQmQuery = new PdQmQuery();
		}
		
		try {
			pdQmList = pdQmService.findList(pdQmQuery);
			now = new Date();
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("pdQmId");
			page.setOrder(Page.DESC);
		}
		if(pdQmQuery == null) {
			pdQmQuery = new PdQmQuery();
		}
		
		try {
			page = pdQmService.findPage(page, pdQmQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			pdQmService.saveOrUpdate(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = pdQmService.getById(pdQmId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {
		
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}

	
	// -------------------自定义方法

	
	
	public String listAll() throws Exception {
		try{
			pdQmList = pdQmService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	/**
	 * 保存产品检验单
	 * @return
	 * @throws Exception
	 */
	public void prepareSaveNewData() throws Exception{
		prepareModel();
	}
	@Action("/PdQm/saveNewData")
	public String saveNewData() throws Exception {
			
			try {
				
				entity.setFbilldate(DateUtils.GetDate2(DateUtils.GetDateTime(), "yyyy-MM-dd HH:mm:ss"));//创建时间
				entity.setFusername(SpringSecurityUtils.getCurrentUserId());//制单人
				entity.setFdeptid(SpringSecurityUtils.getCurrentTeamid().longValue());//当前登录人部门------部门
				//entity.setFstockid(373l);//装配成品库
				
				//entity.setFchecker(SpringSecurityUtils.getCurrentUserId());//审核人，测试---暂为当前登录人
				//entity.setFcheckdate(DateUtils.GetDate2(DateUtils.GetDateTime(),"yyyy-MM-dd"));//审核日期，测试---暂为当前系统时间
				entity.setFstatus("0");//单据状态
				Long id = pdQmService.saveNewData(entity);
				
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功";
				
				addActionMessage("操作成功");
			} catch(ServiceException e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = e.getMessage();
			} catch(Exception e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = "操作失败";
				
				addActionMessage("操作失败");
				return INPUT;
			}
			return JSON;
		}
	
	/**
	 * 产品列表查询
	 * @return
	 * @throws Exception
	 */
	public String listfindPage() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("pdQmId");
			page.setOrder(Page.DESC);
		}
		if(pdQmQuery == null) {
			pdQmQuery = new PdQmQuery();
		}
		try{
			
			page = pdQmService.findPage(page, "PdQm.findPage.find.list", pdQmQuery);
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	/**
	 * 产品检验单提交保存待入库数据
	 * @return
	 * @throws Exception
	 */
	public void prepareSaveSubData() throws Exception{
		prepareModel();
	}
	@Action("/pdQm/saveSubData")
	public String saveSubData() throws Exception {
			
			try {
				
//				entity.setFbilldate(DateUtils.GetDate2(DateUtils.GetDateTime(),"yyyy-MM-dd"));//创建时间
//				entity.setFusername(SpringSecurityUtils.getCurrentUserId());//制单人
//				entity.setFdeptid(SpringSecurityUtils.getCurrentTeamid().longValue());//当前登录人部门------部门
				pdQmService.saveSubData(checkedIdList);
				
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功";
				
				addActionMessage("操作成功");
			} catch(ServiceException e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = e.getMessage();
			} catch(Exception e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = "操作失败";
				
				addActionMessage("操作失败");
				return INPUT;
			}
			return JSON;
		}
	public String findPdQmEntity() throws Exception {
		
		try {
			entity = pdQmService.findPdQmEntity(pdQmQuery);
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return JSON;
	}
	
	
	@Action("/PdQm/deletePdQm")
	public String deletePdQm() throws Exception {
		
		try {
			pdQmService.deletePdQm(checkedIdList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return JSON;
	}
	
	/**
	 * 根据qmid查询
	 * @return
	 * @throws Exception
	 */
	public String findEntity() throws Exception {
			
			try {
				entity = pdQmService.findEntity(pdQmQuery);
				
				resultInfo[0] = "0";
				resultInfo[1] = "查询成功";
			} catch(ServiceException e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = e.getMessage();
			} catch(Exception e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = "查询失败";
			}
			return JSON;
		}
	/**
	 * 保存检验报告的数据
	 * @return
	 * @throws Exception
	 */
	@Action("/pdQm/commitData")
	public String saveCheck() throws Exception {
		
		try {
			 entity = pdQmService.saveCheck(pdQmQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "保存成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "保存失败";
		}
		return JSON;
	}
	
	
	
	/**
	 * 反提交操作修改单据状态
	 * @throws Exception
	 */
	public void prepareUpdateStatus() throws Exception{
		prepareModel();
	}
	@Action("/pdQm/updateStatusData")
	public String updateStatus() throws Exception {
			
			try {
			
				pdQmService.updateStatus(pdQmQuery);
				
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功";
				
				addActionMessage("操作成功");
			} catch(ServiceException e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = e.getMessage();
			} catch(Exception e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = "操作失败";
				
				addActionMessage("操作失败");
				return INPUT;
			}
			return JSON;
		}
	
	
	public void prepareUpdatePdQm() throws Exception{
		prepareModel();
	}
	@Action("/pdQm/bhuiData")
	public String updatePdQm() throws Exception {
		
		try {
			pdQmService.updatePdQm(entity,checkedIdList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
		}
		return JSON;
	}
	// -------------------自定义方法
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public PdQm getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public PdQmQuery getPdQmQuery() {
		return pdQmQuery;
	}

	
	public void setPdQmQuery(PdQmQuery pdQmQuery) {
		this.pdQmQuery = pdQmQuery;
	}

	public void setPdQmId(java.lang.Long pdQmId) {
		this.pdQmId = pdQmId;
	}
	
	
	public java.lang.Long getPdQmId() {
		return this.pdQmId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<PdQm> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<PdQm> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<PdQm> getPdQmList() {
		return pdQmList;
	}

	public String getNowString() {
		SimpleDateFormat formt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return formt.format(now);
	}

	public void setNow(Date now) {
		this.now = now;
	}
	
	
}
