package com.terrence.crm.dol.service.impl;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.dao.DataAccessException;
import org.springframework.transaction.annotation.Transactional;
import com.terrence.crm.dol.base.BaseService;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.SaleOutbound;
import com.terrence.crm.dol.bean.SalesDetailSum;
import com.terrence.crm.dol.dao.ISaleOutboundDao;
import com.terrence.crm.dol.query.SaleOutboundQuery;
import com.terrence.crm.dol.service.ISaleOutboundService;
import com.terrence.crm.dol.utils.DateUtils;

@Service
@Transactional
public class SaleOutboundService extends BaseService implements ISaleOutboundService {
	protected static Logger logger = LoggerFactory.getLogger(SaleOutboundService.class);
	@Autowired
	@Qualifier("saleOutboundDao")
	private ISaleOutboundDao saleOutboundDao;
	
	public String getIbatisSqlMapNamespace() {
		return "SaleOutbound";
	}
	@Transactional(readOnly=true)
	public SaleOutbound getById(java.lang.Long id) throws ServiceException
	{
		return saleOutboundDao.getById(id);
	}
	
	public void saveOrUpdate(SaleOutbound entity) throws ServiceException
	{
		saleOutboundDao.saveOrUpdate(entity);
	}
	
	public java.lang.Long save(SaleOutbound entity) throws ServiceException
	{
		Long adId = saleOutboundDao.save(entity);
		
		return adId;
	}
	
	public Integer update(SaleOutbound entity) throws ServiceException
	{
		Integer returnValue =  saleOutboundDao.update(entity);
		
		return returnValue;
	}
	
	public Integer deleteById(java.lang.Long id) throws ServiceException
	{
		Integer returnValue = saleOutboundDao.deleteById(id);		
		return returnValue;
	}
	
	public Integer deleteByMultipleId(List<java.lang.Long> idList) throws ServiceException
	{
		String delIds = StringUtils.join(idList, ",");
		Integer returnValue = saleOutboundDao.deleteByMultipleId(delIds);
		
		return returnValue;
	}
	
	public boolean isUnique(String uniquePropertyNames, Object newValue, Object oldValue) throws ServiceException
	{
		SaleOutboundQuery query = new SaleOutboundQuery();
		try {
			return saleOutboundDao.isUnique(query, uniquePropertyNames, newValue, oldValue);
		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		}
	}
	@Transactional(readOnly=true)
	public Page<SaleOutbound> findPage(Page<SaleOutbound> page, SaleOutboundQuery query) throws ServiceException
	{
		return saleOutboundDao.findPage(page, query);
	}
	@Transactional(readOnly=true)
	public Page<SaleOutbound> findPage(Page<SaleOutbound> page,String statement, SaleOutboundQuery query) throws ServiceException
	{
		return saleOutboundDao.findPage(page,statement, query);
	}
	@Transactional(readOnly=true)
	public List<SaleOutbound> findList(SaleOutboundQuery query) throws ServiceException
	{
		return saleOutboundDao.findList(query);
	}
	@Transactional(readOnly=true)
	public List<SaleOutbound> findList(SaleOutboundQuery query,Integer pageSize) throws ServiceException
	{
		return saleOutboundDao.findList(query,pageSize);
	}
	
	@Transactional(readOnly=true)
	public List<SaleOutbound> findList(SaleOutboundQuery query,String statement,Integer pageSize) throws ServiceException
	{
		return saleOutboundDao.findList(query,statement,pageSize);
	}
	@Transactional(readOnly=true)
	public List<SaleOutbound> findAllList() throws ServiceException
	{
		return saleOutboundDao.findAllList();
	}
	@Override
	public SaleOutbound findSaleOut(SaleOutboundQuery saleOutboundQuery)
			throws ServiceException {
		return saleOutboundDao.findSaleOut(saleOutboundQuery);
	}
	@Override
	public void exportExcel2007(HttpServletResponse response,
			List<SaleOutbound> list) throws IOException {
		// 创建一个excel文件
		XSSFWorkbook wb = new XSSFWorkbook();
		// 创建一个sheet对象
		XSSFSheet sheet = wb.createSheet("销售出库单序时簿");
		createHeadAndStyle(sheet,wb);
		SaleOutbound so = null;
		XSSFRow row = null;
		SalesDetailSum sds = null;
		if(null!=list){
			for (int i=0;i<list.size();i++) {
				so = list.get(i);
				for(int j=0;j<so.getSalesDetailSumList().size();j++){
					row = sheet.createRow(i+1);
					sds = so.getSalesDetailSumList().get(j);
					if(j==0){
						createCell(wb, row, 0, DateUtils.FormatDateTime(so.getFdateString(),"yyyy-MM-dd"));
						createCell(wb, row, 1, so.getFbillno()==null?"":so.getFbillno());
						createCell(wb, row, 2, so.getGwName()==null?"":so.getGwName());
						createCell(wb, row, 9, so.getBmname()==null?"":so.getBmname());
						createCell(wb, row, 10, so.getYwname()==null?"":so.getYwname());
					}else{
						createCell(wb, row, 0, "");
						createCell(wb, row, 1, "");
						createCell(wb, row, 2, "");
						createCell(wb, row, 9, "");
						createCell(wb, row, 10, "");
					}
					createCell(wb, row, 3, sds.getStockname()==null?"":sds.getStockname());
					createCell(wb, row, 4, sds.getItemcode()==null?"":sds.getItemcode());
					createCell(wb, row, 5, sds.getItemname()==null?"":sds.getItemname());
					createCell(wb, row, 6, sds.getItemmode()==null?"":sds.getItemmode());
					createCell(wb, row, 7, sds.getUnitName()==null?"":sds.getUnitName());
					createCell(wb, row, 8, String.valueOf(sds.getFqty()));
					createCell(wb, row, 11, null==so.getFexplanation()?"":so.getFexplanation());
					createCell(wb, row, 12, String.valueOf(sds.getSaleprice()));
					createCell(wb, row, 13, String.valueOf(sds.getSaleamount()));
				}
			}
			wb.write(response.getOutputStream());
		}
	}
	/**
	 * 创建表头和样式
	 * @param sheet sheet对象
	 * @param wb excel表格
	 */
	public void createHeadAndStyle(XSSFSheet sheet,XSSFWorkbook wb){
		// 创建第一行
	    XSSFRow row = sheet.createRow(0);
		// 设置单元格宽度
	    sheet.setColumnWidth(0, 4000);;// 调整第1列的宽度
	    sheet.setColumnWidth(1, 4000);// 调整第2列的宽度
	    sheet.setColumnWidth(2, 15000);// 调整第3列的宽度
	    sheet.setColumnWidth(3, 5000);// 调整第4列的宽度
	    sheet.setColumnWidth(4, 5000);// 调整第5列的宽度
		sheet.setColumnWidth(5, 5000);// 调整第6列的宽度
		sheet.setColumnWidth(6, 5000);// 调整第7列的宽度
		sheet.setColumnWidth(7, 5000);// 调整第8列的宽度
		sheet.setColumnWidth(8, 5000);// 调整第9列的宽度
		sheet.setColumnWidth(9, 5000);// 调整第10列的宽度
		sheet.setColumnWidth(10, 5000);// 调整第11列的宽度
		sheet.setColumnWidth(11, 7000);// 调整第12列的宽度
		sheet.setColumnWidth(12, 5000);// 调整第13列的宽度
		sheet.setColumnWidth(13, 5000);// 调整第10列的宽度
		// 设置单元格
		createCell(wb, row, 0, "日期");
		createCell(wb, row, 1, "单据编号");
		createCell(wb, row, 2, "购货单位");
		createCell(wb, row, 3, "发货仓库");
		createCell(wb, row, 4, "产品长代码");
		createCell(wb, row, 5, "产品名称");
		createCell(wb, row, 6, "规格型号");
		createCell(wb, row, 7, "单位");
		createCell(wb, row, 8, "实发数量");
		createCell(wb, row, 9, "部门");
		createCell(wb, row, 10, "业务员");
		createCell(wb, row, 11, "摘要");
		createCell(wb, row, 12, "销售单价");
		createCell(wb, row, 13, "销售金额");
	}
	/**
	 * 创建单元格
	 * @param wb excel表格
	 * @param row 行
	 * @param col 列
	 * @param val 内容
	 */
	public void createCell(XSSFWorkbook wb,XSSFRow row,int col,String val){
		//创建一个celll单元格
		XSSFCell cell=row.createCell(col);
        cell.setCellValue(val);
        //创建样式
        XSSFCellStyle cellstyle=wb.createCellStyle();
        cellstyle.setAlignment(XSSFCellStyle.ALIGN_CENTER_SELECTION);//居中对齐
        cellstyle.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);//垂直方向居中对齐
       // cellstyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);//带边框
        cellstyle.setWrapText(true);//设置自动换行
        cell.setCellStyle(cellstyle);//给单元格设置样式
	}
}