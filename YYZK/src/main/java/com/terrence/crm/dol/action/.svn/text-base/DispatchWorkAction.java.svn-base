/*
 * 
 */
package com.terrence.crm.dol.action;


import java.util.List;

import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.DispatchWork;
import com.terrence.crm.dol.contasnt.TeamTaskStatus;
import com.terrence.crm.dol.query.DispatchWorkQuery;
import com.terrence.crm.dol.service.IDispatchWorkService;
import com.terrence.crm.dol.utils.DateConvertUtils;
import com.terrence.crm.dol.utils.DateUtils;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/dispatchWork")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "dispatchWork." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class DispatchWorkAction extends CrudActionSupport<DispatchWork>  implements ApplicationContextAware{
	
	
	@Autowired
	@Qualifier("dispatchWorkService")
	private IDispatchWorkService dispatchWorkService;
	
	
	private DispatchWork entity;

	private DispatchWorkQuery dispatchWorkQuery;
	
	
	private java.lang.Long dispatchWorkId;
	
	/** 分页器 */
	private Page<DispatchWork> page = new Page<DispatchWork>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<DispatchWork> dispatchWorkList;
	
	private Long icmoid;

	private Long teamid;
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (dispatchWorkId != null ) {
			entity = dispatchWorkService.getById(dispatchWorkId);
		} else {
			entity = new DispatchWork();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try {
			dispatchWorkService.deleteByMultipleId(checkedIdList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	public String deleteById() throws Exception {
		
		try {
			Integer exist=dispatchWorkService.deleteById(dispatchWorkId);
			if(exist==-2)
			{
				resultInfo[0] = "-2";
				resultInfo[1] = "任务已开工，不可删除。";
			}else if(exist==-3){

				resultInfo[0] = "-3";
				resultInfo[1] = "每道工序最少保留一个工作中心,不可删除!";
			}
			else
			{
				resultInfo[0] = "0";
				resultInfo[1] = "删除成功";
			}
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("t_dispatch_work.id");
			page.setOrder(Page.DESC);
		}
		if(dispatchWorkQuery == null) {
			dispatchWorkQuery = new DispatchWorkQuery();
		}
		
		try {
			page = dispatchWorkService.findPage(page, dispatchWorkQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}

	public void prepareUpdateWsstatus() throws Exception {
		prepareModel();
	}
	/***
	 * 更新车间派工状态
	 * @return
	 * @throws Exception
	 */
	@Action("/process/dispatch")
	public String updateWsstatus()throws Exception
	{
		try {
			dispatchWorkService.updateWorkShopStatus(checkedIdList, entity);
			resultInfo[0] = "0";
			resultInfo[1] = "派工成功";
		} catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "派工失败";
		}
		return JSON;
	}
	
	
	@Action(value="/task/team/worklist",results={@Result(name="worklist",location="/WEB-INF/content/task/team/worklist.jsp")})
	public String listTeamWork()
	{
		return "worklist";
	}
	@Action("/task/team/listToWork")
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	@Action("/team/listByteamid")
	//------------------------------------------------------	
	public String listByteamId() throws Exception {
		
		if(dispatchWorkQuery == null) {
			dispatchWorkQuery = new DispatchWorkQuery();
		}
		try {
			 dispatchWorkList = dispatchWorkService.findList(dispatchWorkQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			dispatchWorkService.saveOrUpdate(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	public void prepareUpdateDispatchDate() throws Exception {
		prepareModel();
	}
	@Action("/process/updateDispatchWork")
	public String updateDispatchDate() throws Exception {
		
		try {
			dispatchWorkService.update(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}
	
	public void prepareSaveToTeamProcess() throws Exception {
		prepareModel();
	}
	/**
	 * 
	 * @return
	 * @throws Exception
	 */
	public String saveToTeamProcess()throws Exception
	{
		try 
		{
			dispatchWorkService.saveTeamProcess(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return JSON;
	}
	
	
	public void prepareSaveToProcessAuto() throws Exception {
		prepareModel();
	}

	public String saveToProcessAuto()throws Exception
	{
		try 
		{
			int returnValues=dispatchWorkService.saveProcessAuto(entity);
			if(returnValues==-1){
				resultInfo[0] = "-1";
				resultInfo[1] = "工艺卡未编辑!";	
			}else{
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功";	
			}
	
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}
	
	
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = dispatchWorkService.getById(dispatchWorkId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	@Action(value="/process/dispathlist",results={@Result(name="itemdispathlist",location="/WEB-INF/content/process/dispathlist.jsp")})
	public String showDispatchlist() throws Exception
	{		
		return "itemdispathlist";
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	@Action(value="/system/getdispatch")
	public String showToJson() throws Exception {
		
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}

	
	// -------------------自定义方法
	@Action("/process/listdispatchwork")
	public String listQuery() throws Exception {
		try{
			dispatchWorkList = dispatchWorkService.findList("DispatchWork.Table.findList",dispatchWorkQuery);
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	public String listAll() throws Exception {
		try{
			dispatchWorkList = dispatchWorkService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	// -------------------自定义方法
	public String  updateTofinish(){
		try{
			show();
			entity.setStatus(TeamTaskStatus.WORKED.getIndex());
			entity.setFinishdate(DateConvertUtils.getCurrentDateTime());
			dispatchWorkService.updateTofinish(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}

	// -------------------自定义方法
	public String listByItemprocess(){
		if(dispatchWorkQuery == null) {
			dispatchWorkQuery = new DispatchWorkQuery();
		}
		try{
			dispatchWorkList=dispatchWorkService.findList("DispatchWork.findListByItemprocess", dispatchWorkQuery);
			if(dispatchWorkList.size()>0){
				resultInfo[0] = "-1";
				resultInfo[1] = "工艺已分派,不可修改!";	
			}else{
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功!";
			}
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	//----------------

	public void prepareListToItemprocess() throws Exception {
		prepareModel();
	}
	
	public String listToItemprocess(){
		try{
			
			entity=	dispatchWorkService.findItemprocess(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	//--------
	public String showPrice(){
					try{
						
						entity=dispatchWorkService.getPriceById(dispatchWorkId);
						resultInfo[0] = "0";
						resultInfo[1] = "操作成功";
					} catch(ServiceException e){
						logger.warn("param error ", e);
						resultInfo[0] = "-1";
						resultInfo[1] = e.getMessage();
					} catch(Exception e){
						logger.warn("param error ", e);
						resultInfo[0] = "-1";
						resultInfo[1] = "操作失败";
					}	
					
					return JSON;
		
	}
	//---------
	public void prepareListToItemprocessByProcedureid() throws Exception {
		prepareModel();
	}
	@Action("/system/listToItemprocessByProcedureid")
	public String listToItemprocessByProcedureid(){
		
		try{
			entity=dispatchWorkService.getItemprocessByProcedureid(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public DispatchWork getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public DispatchWorkQuery getDispatchWorkQuery() {
		return dispatchWorkQuery;
	}

	
	public void setDispatchWorkQuery(DispatchWorkQuery dispatchWorkQuery) {
		this.dispatchWorkQuery = dispatchWorkQuery;
	}

	public void setDispatchWorkId(java.lang.Long dispatchWorkId) {
		this.dispatchWorkId = dispatchWorkId;
	}
	
	
	public java.lang.Long getDispatchWorkId() {
		return this.dispatchWorkId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<DispatchWork> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<DispatchWork> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<DispatchWork> getDispatchWorkList() {
		return dispatchWorkList;
	}

	public Long getIcmoid() {
		return icmoid;
	}

	public void setIcmoid(Long icmoid) {
		this.icmoid = icmoid;
	}

	public Long getTeamid() {
		return teamid;
	}

	public void setTeamid(Long teamid) {
		this.teamid = teamid;
	}
	
	
}
