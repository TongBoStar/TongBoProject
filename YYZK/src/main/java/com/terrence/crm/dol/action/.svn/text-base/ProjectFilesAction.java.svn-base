/*
 * 
 */
package com.terrence.crm.dol.action;


import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;
import org.springframework.security.core.context.SecurityContextHolder;

import java.net.URLDecoder;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.service.IFileService;
import com.terrence.crm.dol.service.IProjectFilesService;
import com.terrence.crm.dol.utils.DocConverter;
import com.terrence.crm.dol.bean.ProjectFiles;
import com.terrence.crm.dol.bean.security.AdminSession;
import com.terrence.crm.dol.query.ProjectFilesQuery;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/projectFiles")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "projectFiles." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class ProjectFilesAction extends CrudActionSupport<ProjectFiles>  implements ApplicationContextAware{
	
	
	@Autowired
	@Qualifier("projectFilesService")
	private IProjectFilesService projectFilesService;
	
	@Autowired
	@Qualifier("fileService")
	private IFileService fileService;
	
	
	private ProjectFiles entity;

	private ProjectFilesQuery projectFilesQuery;
	
	
	private java.lang.Long projectFilesId;
	
	/** 分页器 */
	private Page<ProjectFiles> page = new Page<ProjectFiles>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<ProjectFiles> projectFilesList;

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (projectFilesId != null ) {
			entity = projectFilesService.getById(projectFilesId);
		} else {
			entity = new ProjectFiles();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try {
			projectFilesService.deleteByMultipleId(checkedIdList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}
	
	public String listToQuery()throws Exception
	{
		if(projectFilesQuery == null) {
			projectFilesQuery = new ProjectFilesQuery();
		}
		
		try {
			projectFilesList = projectFilesService.findList(projectFilesQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("projectFilesId");
			page.setOrder(Page.DESC);
		}
		if(projectFilesQuery == null) {
			projectFilesQuery = new ProjectFilesQuery();
		}
		
		try {
			page = projectFilesService.findPage(page, projectFilesQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			AdminSession admin = (AdminSession) SecurityContextHolder
					.getContext().getAuthentication().getPrincipal();
			entity.setUploaderid(admin.getAdmin().getAdminId());
			projectFilesService.saveOrUpdate(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = projectFilesService.getById(projectFilesId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {
		
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}
	public String loadFiles()throws Exception
	{
		entity = projectFilesService.getById(projectFilesId);
		HttpServletResponse response = ServletActionContext.getResponse();
		//String filename=entity.getFileName()+entity.getFilePath().substring(entity.getFilePath().indexOf('.'),entity.getFilePath().length());
		String filename=entity.getFileName();
		setResponseHeader(response, filename);
		try {
			projectFilesService.downLoadFiles(response,entity.getFilePath());
			response.getOutputStream().flush();
		    response.getOutputStream().close();
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return null;
	}
	/** 设置响应头 */
	public void setResponseHeader(HttpServletResponse response, String fileName) {
		try {
			response.setContentType("application/msexcel;charset=UTF-8");
			//两种方法都可以
			//response.setContentType("application/octet-stream;charset=iso-8859-1");
			response.setHeader("Content-Disposition", "attachment;filename="
					+ new String(fileName.getBytes("UTF-8"),"iso-8859-1"));
			// 客户端不缓存
			response.addHeader("Pargam", "no-cache");
			response.addHeader("Cache-Control", "no-cache");
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
	// -------------------自定义方法

	
	
	public String listAll() throws Exception {
		try{
			projectFilesList = projectFilesService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	// -------------------自定义方法
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public ProjectFiles getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public ProjectFilesQuery getProjectFilesQuery() {
		return projectFilesQuery;
	}

	
	public void setProjectFilesQuery(ProjectFilesQuery projectFilesQuery) {
		this.projectFilesQuery = projectFilesQuery;
	}

	public void setProjectFilesId(java.lang.Long projectFilesId) {
		this.projectFilesId = projectFilesId;
	}
	
	
	public java.lang.Long getProjectFilesId() {
		return this.projectFilesId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<ProjectFiles> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<ProjectFiles> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<ProjectFiles> getProjectFilesList() {
		return projectFilesList;
	}
	public String fileToSwf() throws Exception {
		try{
			ProjectFiles file = this.projectFilesService.getById(1L);
			DocConverter doc = new DocConverter(file.getFilePath());
			boolean result = doc.conver();
			if(result){
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功";
			}else{
				resultInfo[0] = "-1";
				resultInfo[1] = "转换失败";
			}
			
		} catch(ServiceException e){
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
}
