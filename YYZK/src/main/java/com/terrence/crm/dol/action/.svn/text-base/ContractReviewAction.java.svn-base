/*
 * 
 */
package com.terrence.crm.dol.action;


import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;
import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.base.utils.Struts2Utils;
import com.terrence.crm.dol.service.IContractReviewService;
import com.terrence.crm.dol.service.IEmailService;
import com.terrence.crm.dol.bean.CReviewExamineInfo;
import com.terrence.crm.dol.bean.ContractReview;
import com.terrence.crm.dol.bean.QuestionAndReply;
import com.terrence.crm.dol.query.CReviewExamineInfoQuery;
import com.terrence.crm.dol.query.ContractReviewQuery;
import com.terrence.crm.dol.query.QuestionAndReplyQuery;

import freemarker.template.Configuration;
import freemarker.template.Template;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/contractReview")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "contractReview." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class ContractReviewAction extends CrudActionSupport<ContractReview>  implements ApplicationContextAware{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1961233177272355104L;

	@Autowired
	@Qualifier("contractReviewService")
	private IContractReviewService contractReviewService;
	@Autowired
	@Qualifier("emailService")
	private IEmailService emailService;
	@Autowired
	@Qualifier("freemarkerConfiguration")
	private Configuration freemarkerConfiguration;
	
	private ContractReview contractReview;

	private ContractReviewQuery contractreviewQuery;
	
	private QuestionAndReply questionAndReply;
	
	private QuestionAndReplyQuery questionAndReplyQuery;
	
	private CReviewExamineInfo creviewExamineInfo;
	
	private CReviewExamineInfoQuery creviewExamineInfoQuery;
	
	private String examinerList;
	private String delList;
	private java.lang.Long contractreviewId;
	
	/** 分页器 */
	private Page<ContractReview> page = new Page<ContractReview>();
	private Page<QuestionAndReply> qrPage = new Page<QuestionAndReply>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<ContractReview> contractreviewList;

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (contractreviewId != null ) {
			contractReview = contractReviewService.getById(contractreviewId);
		} else {
			contractReview = new ContractReview();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try {
			contractReviewService.deleteByMultipleId(checkedIdList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return JSON;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input(){
		Map<String, Object> map = new HashMap<String, Object>();
		ContractReview contractReview = null;
		List<CReviewExamineInfo> cExamineInfos = null;
		if(null!=contractreviewId){
			contractReview = contractReviewService.getById(contractreviewId);
		}
		if(null!=creviewExamineInfoQuery){
			cExamineInfos = contractReviewService.findEInfos(creviewExamineInfoQuery);
		}
		map.put("contractReview", contractReview);
		map.put("cExamineInfos", cExamineInfos);
		Struts2Utils.renderJson(map);
		return null;
	}
	
	public String listToQuery()throws Exception
	{
		if(contractreviewQuery == null) {
			contractreviewQuery = new ContractReviewQuery();
		}
		
		try {
			contractreviewList = contractReviewService.findList(contractreviewQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("contractReviewId");
			page.setOrder(Page.DESC);
		}
		if(contractreviewQuery == null) {
			contractreviewQuery = new ContractReviewQuery();
		}
		
		try {
			page = contractReviewService.findPage(page, contractreviewQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			contractReviewService.saveOrUpdate(contractReview,questionAndReply,examinerList,delList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			contractReview = contractReviewService.getById(contractreviewId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {
		
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}
	public String saveOrUpdateqr(){
		contractReviewService.saveOrUpdateqr(questionAndReply,creviewExamineInfo);
		return JSON;
	}
	public String findQRPage(){
		if(null!=page){
			qrPage.setPageNo(page.getPageNo());
			qrPage.setPageSize(page.getPageSize());
			if(null!=page.getOrderBy()) qrPage.setOrderBy(page.getOrderBy());
			if(null!=page.getOrder()) qrPage.setOrderBy(page.getOrder());
		}
		if (!qrPage.isOrderBySetted()) {
			qrPage.setOrderBy("questionAndReplyId");
			qrPage.setOrder(Page.DESC);
		}
		qrPage = contractReviewService.findQRPage(qrPage,questionAndReplyQuery);
		return JSON;
	}
	public String submitContractReview(){
		contractReviewService.update(contractReview);
		sendEmail(contractReview);
		return JSON;
	}
	public void sendEmail(ContractReview contractReview){
		String subject = "合同评审通知";
		Map<String, Object> paramMap = new HashMap<String, Object>();
		String content = "";
		List<CReviewExamineInfo> cExamineInfos = null;
		try {
			Template template = freemarkerConfiguration.getTemplate("template/examineEmailTemplate.ftl", "utf-8");
			paramMap.put("userName", "童博");
			content = FreeMarkerTemplateUtils.processTemplateIntoString(template, paramMap);
			cExamineInfos = contractReviewService.findEmailFromEInfos(creviewExamineInfoQuery);
			StringBuffer sb = new StringBuffer();
			for(CReviewExamineInfo cInfo:cExamineInfos){
				sb.append(cInfo.getExamineAdvice()).append(";");
			}
			if(sb.length()>0){
				sb.deleteCharAt(sb.length()-1);
			}
			emailService.sendEmail("", sb.toString(), subject, content);
		} catch (Exception e) {
			logger.error("构造邮件失败",e);
		}
	}
	// -------------------自定义方法
	
	public String listAll() throws Exception {
		try{
			contractreviewList = contractReviewService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	// -------------------自定义方法
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */

	public void setEntity(ContractReview contractReview) {
		this.contractReview = contractReview;
	}

	public ContractReview getContractReview() {
		return contractReview;
	}

	public void setContractReview(ContractReview contractReview) {
		this.contractReview = contractReview;
	}

	public ContractReviewQuery getContractreviewQuery() {
		return contractreviewQuery;
	}

	public void setContractreviewQuery(ContractReviewQuery contractreviewQuery) {
		this.contractreviewQuery = contractreviewQuery;
	}

	public java.lang.Long getContractreviewId() {
		return contractreviewId;
	}

	public void setContractreviewId(java.lang.Long contractreviewId) {
		this.contractreviewId = contractreviewId;
	}

	public Page<ContractReview> getPage() {
		return page;
	}

	public void setPage(Page<ContractReview> page) {
		this.page = page;
	}

	public String[] getResultInfo() {
		return resultInfo;
	}

	public void setResultInfo(String[] resultInfo) {
		this.resultInfo = resultInfo;
	}

	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}

	public List<ContractReview> getContractreviewList() {
		return contractreviewList;
	}

	public void setContractreviewList(List<ContractReview> contractreviewList) {
		this.contractreviewList = contractreviewList;
	}

	@Override
	public void setApplicationContext(ApplicationContext ctx)
			throws BeansException {
		this.ctx = ctx;
	}

	@Override
	public ContractReview getModel() {
		return contractReview;
	}

	public QuestionAndReply getQuestionAndReply() {
		return questionAndReply;
	}

	public void setQuestionAndReply(QuestionAndReply questionAndReply) {
		this.questionAndReply = questionAndReply;
	}

	public QuestionAndReplyQuery getQuestionAndReplyQuery() {
		return questionAndReplyQuery;
	}

	public void setQuestionAndReplyQuery(QuestionAndReplyQuery questionAndReplyQuery) {
		this.questionAndReplyQuery = questionAndReplyQuery;
	}

	public String getExaminerList() {
		return examinerList;
	}

	public void setExaminerList(String examinerList) {
		this.examinerList = examinerList;
	}

	public CReviewExamineInfo getCreviewExamineInfo() {
		return creviewExamineInfo;
	}

	public void setCreviewExamineInfo(CReviewExamineInfo creviewExamineInfo) {
		this.creviewExamineInfo = creviewExamineInfo;
	}

	public CReviewExamineInfoQuery getCreviewExamineInfoQuery() {
		return creviewExamineInfoQuery;
	}

	public void setCreviewExamineInfoQuery(
			CReviewExamineInfoQuery creviewExamineInfoQuery) {
		this.creviewExamineInfoQuery = creviewExamineInfoQuery;
	}

	public String getDelList() {
		return delList;
	}

	public void setDelList(String delList) {
		this.delList = delList;
	}

	public Page<QuestionAndReply> getQrPage() {
		return qrPage;
	}

	public void setQrPage(Page<QuestionAndReply> qrPage) {
		this.qrPage = qrPage;
	}

}
