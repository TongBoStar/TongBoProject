/*
 * 
 */
package com.terrence.crm.dol.action;


import javax.servlet.http.HttpServletRequest;
import org.apache.struts2.components.ActionMessage;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import java.util.List;
import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.base.utils.Struts2Utils;
import com.terrence.crm.dol.service.ISortcodesecService;
import com.terrence.crm.dol.service.ITrialService;
import com.terrence.crm.dol.bean.FileType;
import com.terrence.crm.dol.bean.Sortcodefir;
import com.terrence.crm.dol.bean.Sortcodesec;
import com.terrence.crm.dol.bean.Trial;
import com.terrence.crm.dol.query.FileTypeQuery;
import com.terrence.crm.dol.query.SortcodesecQuery;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/sortcodesec")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "sortcodesec." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class SortcodesecAction extends CrudActionSupport<Sortcodesec>  implements ApplicationContextAware{
	
	
	@Autowired
	@Qualifier("sortcodesecService")
	private ISortcodesecService sortcodesecService;
	
	@Autowired
	@Qualifier("trialService")
	private ITrialService trialService;
	
	private Sortcodesec entity;

	private SortcodesecQuery sortcodesecQuery;
	
	private List<Sortcodesec> entityList;
	
	private java.lang.Long sortcodesecId;
	
	/** 分页器 */
	private Page<Sortcodesec> page = new Page<Sortcodesec>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<Sortcodesec> sortcodesecList;
	
	private String tree="";
	
	private Long deviceId;

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (sortcodesecId != null ) {
			entity = sortcodesecService.getById(sortcodesecId);
		} else {
			entity = new Sortcodesec();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try {
			sortcodesecService.deleteByMultipleId(checkedIdList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}
	public String listToTree()throws Exception
	{
		try
		{
			Trial trial = trialService.getById(deviceId);
			tree+="<li><span  class=\"hover\" ref=\"0\" lev=\""+trial.getTrialid()+"\"  id=li"+trial.getTrialid()+" spanname="+trial.getDevicename()+"><a class=\"hover\" href=\"javascript:searchtrialdevice("+""+");\">"+trial.getDevicename()+"</a></span>"+loop(trial.getTrialid())+"</li>";
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	public String loop(Long deviceId)
	{
		sortcodesecQuery = new SortcodesecQuery();
		sortcodesecQuery.setFirid(17L);
		StringBuffer sbuf=new StringBuffer();
		List<Sortcodesec> list = sortcodesecService.findList(sortcodesecQuery);
		sbuf.append("<ul id=\"ul"+deviceId+"\">");
		for (Sortcodesec sortcodesec : list) {
			sbuf.append("<li><span  class=\"hover\" ref=\"1\" lev=\""+sortcodesec.getSecid()+"\" pid=0 id=li"+sortcodesec.getSecid()+" spanname="+sortcodesec.getSecname()+"><a class=\"hover\" href=\"javascript:searchtrialdevice("+sortcodesec.getSeccode()+");\">"+sortcodesec.getSecname()+"</a></span></li>");
		}
		
		sbuf.append("</ul>");
		return sbuf.toString();
	}
	public String listToStatment()throws Exception
	{
		if(sortcodesecQuery == null) {
			sortcodesecQuery = new SortcodesecQuery();
		}
		
		try {
			sortcodesecList = sortcodesecService.findList(sortcodesecQuery,"Sortcodesec.Sortcodefir.findList");
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	public String listToQuery()throws Exception
	{
		if(sortcodesecQuery == null) {
			sortcodesecQuery = new SortcodesecQuery();
		}
		
		try {
			sortcodesecList = sortcodesecService.findList(sortcodesecQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	@Action("/system/listTosortcode")
	public String listTosortcode()throws Exception
	{
		if(sortcodesecQuery == null) {
			sortcodesecQuery = new SortcodesecQuery();
		}
		
		try {
			sortcodesecList = sortcodesecService.findList(sortcodesecQuery, "Sortcodesec.findListByfirstCode");
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("sortcodesecId");
			page.setOrder(Page.DESC);
		}
		if(sortcodesecQuery == null) {
			sortcodesecQuery = new SortcodesecQuery();
		}
		
		try {
			page = sortcodesecService.findPage(page, sortcodesecQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			sortcodesecService.saveOrUpdate(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = sortcodesecService.getById(sortcodesecId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {
		
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}

	
	// -------------------自定义方法

	
	
	public String listAll() throws Exception {
		try{
			sortcodesecList = sortcodesecService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	public String findSecInfoList() throws Exception {
		try{
			entityList = sortcodesecService.findSecInfoList(sortcodesecQuery);
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	public String findName() throws Exception {
		try{
			entity = sortcodesecService.findName(sortcodesecQuery);
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	public String findSecList() throws Exception {
		try{
			sortcodesecList = sortcodesecService.findSecList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	
	public String listsupplierDOC() throws Exception {//采购中查询文件类别
		try{
			sortcodesecList = sortcodesecService.findlistsupplierDOC();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	@Action("/system/listsupplierlevl")
	public String listsupplierlevl() throws Exception {//采购中查询供应商类别
		
		try{
			sortcodesecList = sortcodesecService.findlistsupplierlevl();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	@Action("/sortcodesec/listsuppliergovernment")
	public String listsuppliergovernment() throws Exception {//采购中查询供应商管辖
		
		try{
			sortcodesecList = sortcodesecService.findlistsuppliergovernment();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	public String listTosortCodesec()throws Exception//根据以及代码的id查询20113-10-28
	{
		if(sortcodesecQuery == null) {
			sortcodesecQuery = new SortcodesecQuery();
		}
		
		try {
			//sortcodesecList = sortcodesecService.findList(sortcodesecQuery);
			page = sortcodesecService.findPage(page, "sortcodesec.fir.sec", sortcodesecQuery);
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	public String listfindStatus() throws Exception {//加载设备类别2013-11-5
			
			try{
				sortcodesecList = sortcodesecService.findlistStatus();
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功";
			} catch(ServiceException e){
				logger.warn("param error ", e);
				resultInfo[0] = "-1";
				resultInfo[1] = e.getMessage();
			} catch(Exception e){
				logger.warn("param error ", e);
				resultInfo[0] = "-1";
				resultInfo[1] = "操作失败";
			}	
			
			return JSON;
		}
	
	
	
	public String listStatus() throws Exception {//查询设备类别2013-11-5
		if (!page.isOrderBySetted()) {
			page.setOrderBy("sortcodesecId");
			page.setOrder(Page.DESC);
		}
		if(sortcodesecQuery == null) {
			sortcodesecQuery = new SortcodesecQuery();
		}
		
		try {
			page = sortcodesecService.findPage(page, "sortcodesec.list.status", sortcodesecQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	
	// -------------------自定义方法
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public Sortcodesec getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public SortcodesecQuery getSortcodesecQuery() {
		return sortcodesecQuery;
	}

	
	public void setSortcodesecQuery(SortcodesecQuery sortcodesecQuery) {
		this.sortcodesecQuery = sortcodesecQuery;
	}

	public void setSortcodesecId(java.lang.Long sortcodesecId) {
		this.sortcodesecId = sortcodesecId;
	}
	
	
	public java.lang.Long getSortcodesecId() {
		return this.sortcodesecId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<Sortcodesec> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<Sortcodesec> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<Sortcodesec> getSortcodesecList() {
		return sortcodesecList;
	}

	public void setSortcodesecList(List<Sortcodesec> sortcodesecList) {
		this.sortcodesecList = sortcodesecList;
	}

	public String getTree() {
		return tree;
	}

	public void setTree(String tree) {
		this.tree = tree;
	}

	public Long getDeviceId() {
		return deviceId;
	}

	public void setDeviceId(Long deviceId) {
		this.deviceId = deviceId;
	}

	public List<Sortcodesec> getEntityList() {
		return entityList;
	}

	public void setEntityList(List<Sortcodesec> entityList) {
		this.entityList = entityList;
	}
	
	
}
