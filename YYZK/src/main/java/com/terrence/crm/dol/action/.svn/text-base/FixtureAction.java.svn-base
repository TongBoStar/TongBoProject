/*
 * 
 */
package com.terrence.crm.dol.action;


import javax.servlet.http.HttpServletRequest;
import org.apache.struts2.components.ActionMessage;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import java.util.ArrayList;
import java.util.List;
import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.base.utils.Struts2Utils;
import com.terrence.crm.dol.service.IFixtureService;
import com.terrence.crm.dol.utils.CacheService;
import com.terrence.crm.dol.bean.Fixture;
import com.terrence.crm.dol.bean.TecPro;
import com.terrence.crm.dol.query.FixtureQuery;
import com.terrence.crm.dol.query.TecProQuery;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/fixture")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "fixture." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class FixtureAction extends CrudActionSupport<Fixture>  implements ApplicationContextAware{
	
	private String FIXTUREKEY="fixture";
	@Autowired
	@Qualifier("fixtureService")
	private IFixtureService fixtureService;
	
	
	private Fixture entity;

	private FixtureQuery fixtureQuery;
	
	
	private java.lang.Long fixtureId;
	
	/** 分页器 */
	private Page<Fixture> page = new Page<Fixture>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<Fixture> fixtureList;
	private String tree="";


	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (fixtureId != null ) {
			entity = fixtureService.getById(fixtureId);
		} else {
			entity = new Fixture();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try {
			if(fixtureService.deleteByMultipleId(checkedIdList)==1){
				
				resultInfo[0] = "0";
				resultInfo[1] = "删除成功";
				updateTreeCache();
				addActionMessage("删除成功");	
			}else{
				resultInfo[0] = "-1";
				resultInfo[1] = "不能删除包含子数据的节点";
			}
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}
	
	public String listToQuery()throws Exception
	{
		if(fixtureQuery == null) {
			fixtureQuery = new FixtureQuery();
		}
		
		try {
			fixtureList = fixtureService.findList(fixtureQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("fixtureId");
			page.setOrder(Page.DESC);
		}
		if(fixtureQuery == null) {
			fixtureQuery = new FixtureQuery();
		}
		
		try {
			page = fixtureService.findPage(page, fixtureQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			//System.out.println("==进入saveOrUpdata方法：==========entity:"+entity.toString());
			if(entity.getParentcode()==null||"".equals(entity.getParentcode()))
			{
				entity.setParentcode("");
				entity.setLcode(entity.getFixtruecode());
			}else{
				entity.setLcode(entity.getParentcode()+"."+entity.getFixtruecode());
			}
//----------判重复-----------------------------------------
			if(check()==0){
				fixtureService.saveOrUpdate(entity);
				updateTreeCache();
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功";
				
				addActionMessage("操作成功");
			}
				
			//---------------------------------------------------
			
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	public int check(){
		FixtureQuery fQuery=new FixtureQuery();
		fQuery.setLcode(entity.getLcode());
		if(fixtureService.findList(fQuery).size()>0&&entity.getFixtureid()==null){//添加
			resultInfo[0] = "-1";
			resultInfo[1] = "此代码已存在!请重新编写!";
			return -1;
			
		}else if(fixtureService.findList(fQuery).size()>0){
			List<Fixture> flist = fixtureService.findList(fQuery);
			long check=0;
				for(Fixture f:flist){
					if(f.getFixtureid().longValue()!=entity.getFixtureid().longValue()){
						check++;
					}
				}
				if(check>0){
					resultInfo[0] = "-1";
					resultInfo[1] = "此代码已存在!请重新编写!";
					return -1;
				}else{
					return 0;
				}
			
		}else{
			return 0;
		}
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = fixtureService.getById(fixtureId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {
		
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}

	
	// -------------------自定义方法

	
	
	public String listAll() throws Exception {
		try{
			fixtureList = fixtureService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	// -------------------自定义方法
	public String listToTree()throws Exception
	{
		if(fixtureQuery == null) {
			fixtureQuery = new FixtureQuery();
		}
		try
		{
			fixtureQuery.setParentid(-1l);
			if(CacheService.getInstance().get(FIXTUREKEY)==null)
			{
				List<Fixture> list=fixtureService.findList(fixtureQuery);
				fixtureList=new ArrayList<Fixture>();
				for(Fixture fixture:list)
				{
					tree+="<li><a href=\"javascript:;\" onclick=\"setfixturecontent("+fixture.getFixtureid()+",'"+
					fixture.getFixtruecode()+"','"+fixture.getFixturename()+"','"+fixture.getLcode()+"');\">"+
					fixture.getFixtruecode()+"("+fixture.getFixturename()+")</a>"+loop(fixture)+"</li>";
				}
				CacheService.getInstance().add(FIXTUREKEY, tree);
			}else{
				tree=(String)CacheService.getInstance().get(FIXTUREKEY);
			}
		
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	public String updateTreeCache()throws Exception
	{

		if(fixtureQuery == null) {
			fixtureQuery = new FixtureQuery();
		}
		try
		{
			fixtureQuery.setParentid(-1l);
				List<Fixture> list=fixtureService.findList(fixtureQuery);
				fixtureList=new ArrayList<Fixture>();
				for(Fixture fixture:list)
				{
					tree+="<li><a href=\"javascript:;\" onclick=\"setfixturecontent("+fixture.getFixtureid()+",'"+
					fixture.getFixtruecode()+"','"+fixture.getFixturename()+"','"+fixture.getLcode()+"');\">"+
					fixture.getFixtruecode()+"("+fixture.getFixturename()+")</a>"+loop(fixture)+"</li>";
				}
				CacheService.getInstance().replace(FIXTUREKEY, tree);
			
		
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	
	}
	public String loop(Fixture fixture)
	{
		FixtureQuery fixtureQuery=null;
		fixtureQuery=new FixtureQuery();
		fixtureQuery.setParentid(fixture.getFixtureid());
		List<Fixture> list=fixtureService.findList(fixtureQuery);
		StringBuffer sbuf=new StringBuffer();
		if(list.size()>0)
		{
			sbuf.append("<ul id=\"ul"+fixture.getFixtureid()+"\">");
			for(Fixture tp:list)
			{
				sbuf.append("<li id=\"li"+tp.getFixtureid()+"\" ><a  href=\"javascript:;\" onclick=\"setfixturecontent("+
						tp.getFixtureid()+",'"+tp.getFixtruecode()+"','"+tp.getFixturename()+"','"+tp.getLcode()+"');\">"+
						(tp.getParentid().longValue()==1?"":(tp.getParentcode()+"."))+tp.getFixtruecode()+
						"("+tp.getFixturename()+")</a>"+loop(tp)+"</li>");
			}
			sbuf.append("</ul>");
		}
		return sbuf.toString();
	}
	
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public Fixture getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public FixtureQuery getFixtureQuery() {
		return fixtureQuery;
	}

	
	public void setFixtureQuery(FixtureQuery fixtureQuery) {
		this.fixtureQuery = fixtureQuery;
	}

	public void setFixtureId(java.lang.Long fixtureId) {
		this.fixtureId = fixtureId;
	}
	
	
	public java.lang.Long getFixtureId() {
		return this.fixtureId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<Fixture> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<Fixture> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<Fixture> getFixtureList() {
		return fixtureList;
	}
	public String getTree() {
		return tree;
	}

	public void setTree(String tree) {
		this.tree = tree;
	}	
	
}
