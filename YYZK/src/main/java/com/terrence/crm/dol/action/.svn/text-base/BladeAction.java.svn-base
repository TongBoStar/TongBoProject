/*
 * 
 */
package com.terrence.crm.dol.action;


import java.util.ArrayList;
import java.util.List;

import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.Blade;
import com.terrence.crm.dol.query.BladeQuery;
import com.terrence.crm.dol.service.IBladeService;
import com.terrence.crm.dol.utils.CacheService;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/blade")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "blade." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class BladeAction extends CrudActionSupport<Blade>  implements ApplicationContextAware{
	
	private String BLADEKEY="blade";
	@Autowired
	@Qualifier("bladeService")
	private IBladeService bladeService;
	
	
	private Blade entity;

	private BladeQuery bladeQuery;
	
	
	private java.lang.Long bladeId;
	
	/** 分页器 */
	private Page<Blade> page = new Page<Blade>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<Blade> bladeList;
	private String tree="";


	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (bladeId != null ) {
			entity = bladeService.getById(bladeId);
		} else {
			entity = new Blade();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try {
			if(bladeService.deleteByMultipleId(checkedIdList)==1)
			{
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			updateTreeCache();
			addActionMessage("删除成功");
			}
			else
			{
				resultInfo[0] = "-1";
				resultInfo[1] = "不能删除包含子数据的节点";
			}
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	
	
	
	public String deleteToJson() throws Exception {
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}
	
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("bladeId");
			page.setOrder(Page.DESC);
		}
		if(bladeQuery == null) {
			bladeQuery = new BladeQuery();
		}
		
		try {
			page = bladeService.findPage(page, bladeQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			//System.out.println("==进入saveOrUpdata方法：==========entity:"+entity.toString());
			if(entity.getParentcode()==null||entity.getParentcode().equals(""))
			{
				entity.setLcode(entity.getBladecode());
				entity.setParentcode("");
			}
			else
			{ 
				if(!entity.getParentcode().equals(""))
				{
					entity.setLcode(entity.getParentcode()+"."+entity.getBladecode());
				}
				else
				{
					entity.setLcode(entity.getBladecode());
				}
			}
			//===添加时判重复============	
				if(check()==0){
					bladeService.saveOrUpdate(entity);
					updateTreeCache();
					resultInfo[0] = "0";
					resultInfo[1] = "操作成功";
					
					addActionMessage("操作成功");
				}
			//===============	
			
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	public int check(){
		BladeQuery bQuery=new BladeQuery();
		bQuery.setLcode(entity.getLcode());
		if(bladeService.findList(bQuery).size()>0&&entity.getBladeid()==null){//添加
			resultInfo[0] = "-1";
			resultInfo[1] = "此代码已存在!请重新编写!";
			return -1;
			
		}else if(bladeService.findList(bQuery).size()>0){
			List<Blade> blist = bladeService.findList(bQuery);
			long check=0;
			for(Blade b:blist){
				if(b.getBladeid().longValue()!=entity.getBladeid().longValue()){
					check++;
				}
			}
			if(check>0){
				resultInfo[0] = "-1";
				resultInfo[1] = "此代码已存在!请重新编写!";
				return -1;
			}else{
				return 0;
			}
			
		}else{
		return 0;
		}
		
		
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {

		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		try {
			entity = bladeService.getById(bladeId);
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	
	//====修改调用的方法=====
	public String showToJson() throws Exception {
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}

	
	//-----------------删除单条blade
	public String deleteAloneBlade()throws Exception{
	try{
		
		if(checkedIdList==null){

			//System.out.println("======进入单条blade的删除方法==============");
			bladeService.deleteById(bladeId);	
		}else{
			//System.out.println("==进入删除多条");
			for(long id:checkedIdList){
				bladeService.deleteById(id);	
			}
		}

		resultInfo[0] = "0";
		resultInfo[1] = "删除成功";
	} catch(ServiceException e) {
		logger.error(e.getMessage());
		resultInfo[0] = "-1";
		resultInfo[1] = e.getMessage();
	} catch(Exception e) {
		logger.error(e.getMessage());
		resultInfo[0] = "-1";
		resultInfo[1] = "查询失败";
	}
		return JSON;
	}
	
	//=====查询列表方法==========
	public String listAll() throws Exception {
		
		try{
			bladeList = bladeService.findAllList(); 
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	// -------------------自定义方法
	public String listToBlade()throws Exception
	{
		try {
			bladeList=bladeService.findList(bladeQuery);
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (Exception e) {
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
			e.printStackTrace();
		}
		return JSON;
	}
	
	//===============================
	public String listToTree()throws Exception
	{
		if(bladeQuery == null) {
			bladeQuery = new BladeQuery();
		}
		try
		{
			bladeQuery.setBladeid(1l);
			if(CacheService.getInstance().get(BLADEKEY)==null)
			{
				List<Blade> list=bladeService.findList(bladeQuery);
				bladeList=new ArrayList<Blade>();
				for(Blade blade:list)
				{
					tree+="<li><a href=\"javascript:;\" onclick=\"setbladecode("+blade.getBladeid()+",'"+blade.getLcode()+"','"+blade.getBladename()+"');\">"+blade.getLcode()+"("+blade.getBladename()+")</a>"+loop(blade)+"</li>";
				}
				CacheService.getInstance().add(BLADEKEY, tree);
			}
			else
			{
				tree=(String)CacheService.getInstance().get(BLADEKEY);
			}
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	public String updateTreeCache()throws Exception
	{
		if(bladeQuery == null) {
			bladeQuery = new BladeQuery();
		}
		try
		{
			bladeQuery.setBladeid(1l);
			List<Blade> list=bladeService.findList(bladeQuery);
			bladeList=new ArrayList<Blade>();
			for(Blade blade:list)
			{
				tree+="<li><a href=\"javascript:;\" onclick=\"setbladecode("+blade.getBladeid()+",'"+blade.getLcode()+"','"+blade.getBladename()+"');\">"+blade.getLcode()+"("+blade.getBladename()+")</a>"+loop(blade)+"</li>";
			}
			CacheService.getInstance().replace(BLADEKEY, tree);
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	public String loop(Blade blade)
	{
		BladeQuery bladeQuery=null;
		bladeQuery=new BladeQuery();
		bladeQuery.setParentid(blade.getBladeid());
		List<Blade> list=bladeService.findList(bladeQuery);
		StringBuffer sbuf=new StringBuffer();
		if(list.size()>0)
		{
			sbuf.append("<ul id=\"ul"+blade.getBladeid()+"\">");
			for(Blade blades:list)
			{
				sbuf.append("<li id=\"li"+blades.getBladeid()+"\"><a href=\"javascript:;\" onclick=\"setbladecode("+blades.getBladeid()+",'"+blades.getLcode()+"','"+blades.getBladename()+"');\">"+blades.getLcode()+"("+blades.getBladename()+")</a>"+loop(blades)+"</li>");
			}
			sbuf.append("</ul>");
		}
		return sbuf.toString();
	}
	public String listToQuery()throws Exception
	{
		if(bladeQuery == null) {
			bladeQuery = new BladeQuery();
		}
		try {
			bladeList=bladeService.findList(bladeQuery);
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (Exception e) {
			e.printStackTrace();
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
			
	
	
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public Blade getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public BladeQuery getBladeQuery() {
		return bladeQuery;
	}

	
	public void setBladeQuery(BladeQuery bladeQuery) {
		this.bladeQuery = bladeQuery;
	}

	public void setBladeId(java.lang.Long bladeId) {
		this.bladeId = bladeId;
	}
	
	
	public java.lang.Long getBladeId() {
		return this.bladeId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<Blade> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<Blade> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<Blade> getBladeList() {
		return bladeList;
	}
	public String getTree() {
		return tree;
	}

	public void setTree(String tree) {
		this.tree = tree;
	}	
	
}
