/*
 * 
 */
package com.terrence.crm.dol.action;


import javax.servlet.http.HttpServletRequest;
import org.apache.struts2.components.ActionMessage;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.service.IPdparameterService;
import com.terrence.crm.dol.utils.CacheService;
import com.terrence.crm.dol.bean.Pdparameter;
import com.terrence.crm.dol.query.PdparameterQuery;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/pdparameter")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "pdparameter." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class PdparameterAction extends CrudActionSupport<Pdparameter>  implements ApplicationContextAware{
	
	
	@Autowired
	@Qualifier("pdparameterService")
	private IPdparameterService pdparameterService;
	
	
	private Pdparameter entity;

	private PdparameterQuery pdparameterQuery;
	
	
	private java.lang.Long pdparameterId;
	
	/** 分页器 */
	private Page<Pdparameter> page = new Page<Pdparameter>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<Pdparameter> pdparameterList;
	
	private String tree;

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (pdparameterId != null ) {
			entity = pdparameterService.getById(pdparameterId);
		} else {
			entity = new Pdparameter();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try {
			pdparameterService.deleteByMultipleId(checkedIdList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}
	
	public String listToQuery()throws Exception
	{
		if(pdparameterQuery == null) {
			pdparameterQuery = new PdparameterQuery();
		}
		
		try {
			pdparameterList = pdparameterService.findList(pdparameterQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("pdparameterId");
			page.setOrder(Page.DESC);
		}
		if(pdparameterQuery == null) {
			pdparameterQuery = new PdparameterQuery();
		}
		
		try {
			page = pdparameterService.findPage(page, pdparameterQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			PdparameterQuery query  = new PdparameterQuery();
			query.setParametercode(entity.getParametercode());
			List<Pdparameter> list = pdparameterService.findList(query);
			boolean flag = true;
			if(entity.getParamid()==null){
				if(list!=null&&list.size()>0){
					flag = false;
				}
			}else{
				if(list!=null&&list.size()>0){
					for(Pdparameter pd:list){
						if(pd!=null&&pd.getParamid()!=null&&entity.getParamid()!=null){
							if(!pd.getParamid().toString().equals(entity.getParamid().toString())){
								flag = false;
							}
						}
						
					}
				}
			}
			if(flag){
				pdparameterService.saveOrUpdate(entity);
				updateTree();
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功";
				addActionMessage("操作成功");
			}else{
				resultInfo[0] = "-1";
				resultInfo[1] = "此参数编号已经存在！";
			}
			
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = pdparameterService.getById(pdparameterId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {
		
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}
	//----------自定义方法：删除节点以及子节点
	public String deleteAlone() throws Exception {
		try 
		{
			if(pdparameterId!=null){
				Integer result = this.pdparameterService.deleteAlone(pdparameterId);
				if(result!=0){
					resultInfo[0] = "0";
					resultInfo[1] = "删除成功";
					updateTree();
				}else{
					resultInfo[0] = "-1";
					resultInfo[1] = "删除失败";
				}
				
			}else{
				resultInfo[0] = "-1";
				resultInfo[1] = "没有要删除的数据！";
			}
			
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败"+"系统错误!";
		
		}
		return JSON;
	}
	
	// -------------------自定义方法
	private String CATEGORYKEY="paramTree";
	public String listToTree() throws Exception {
		try
		{
			if(CacheService.getInstance().get(CATEGORYKEY)==null){
				tree = createTree();
				CacheService.getInstance().add(CATEGORYKEY, tree);
			}else{
				tree = (String) CacheService.getInstance().get(CATEGORYKEY);
			}
			System.out.println(tree.length());
			resultInfo[0] = "0";
			resultInfo[1] = "查询树成功";
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询树失败";
		}
		return JSON;
	}
	public String createTree(){
		StringBuffer sbuf = new StringBuffer();
		sbuf.append("<li>");
		sbuf.append("<span ref='0' class=\"folder\"  id='li0' pid='-1' ><a href=\"javascript:searchlist('0');\">ROOT</a></span>");
		PdparameterQuery query = new PdparameterQuery();
		query.setSortColumns("fparentid");
		List<Pdparameter> list = new ArrayList<Pdparameter>();
		list = pdparameterService.findList(query);
		if(list!=null&&list.size()>0){
			Map<String, List<Pdparameter>> map = new HashMap<String, List<Pdparameter>>();
			map = listToMap(list);
			if(map!=null&&map.size()>0){
				sbuf.append(loop(map,0l));
			}
		}
		sbuf.append("</li>");
		return sbuf.toString();
	}
	public String loop(Map<String, List<Pdparameter>> map,Long id){
		List<Pdparameter> list =new ArrayList<Pdparameter>();
		StringBuffer sbuf = new StringBuffer();
		list = map.get(Long.toString(id));
		if(list!=null&&list.size()>0){
			sbuf.append("<ul>");
			for(Pdparameter item:list){
				if(item.getParamid()!=null){
					if(map.get(Long.toString(item.getParamid()))!=null&&map.get(Long.toString(item.getParamid())).size()>0){
						sbuf.append("<li><span class=\"folder\" ref="+item.getParamid()+" id=li"+item.getParamid()+" pid="+item.getFparentid()+" ><a href=\"javascript:searchlist("+item.getParamid()+");\">"+item.getParametercode()+"("+item.getParametername()+")</a></span>"+loop(map,item.getParamid())+"</li>");
					}else{
						sbuf.append("<li><span class=\"file\" ref="+item.getParamid()+" id=li"+item.getParamid()+" pid="+item.getFparentid()+" ><a href=\"javascript:searchlist("+item.getParamid()+");\">"+item.getParametercode()+"("+item.getParametername()+")</a></span></li>");
					}
				}
				
			}
			sbuf.append("</ul>");
		}
		return sbuf.toString();
	}
	//将集合转成map
	public Map<String, List<Pdparameter>> listToMap(List<Pdparameter> list){
		long pid=0;
		List<Pdparameter> listb = new ArrayList<Pdparameter>();
		Map<String, List<Pdparameter>> mapb = new HashMap<String, List<Pdparameter>>();
		for(Pdparameter bitem:list){
			if(bitem!=null&&bitem.getFparentid()!=null&&bitem.getFparentid()==pid){
				listb.add(bitem);
			}else if(bitem!=null&&bitem.getFparentid()!=null&&bitem.getFparentid()!=pid){
				if(listb!=null&&listb.size()>0){
					mapb.put(Long.toString(pid), listb);
				}
				listb = new ArrayList<Pdparameter>();
				pid = bitem.getFparentid();
				listb.add(bitem);
			}
		}
		if(mapb!=null&&listb!=null&&listb.size()>0&&mapb.get(Long.toString(pid))==null){
			mapb.put(Long.toString(pid), listb);
		}
		return mapb;
	}
	public void updateTree(){
		tree = createTree();
		CacheService.getInstance().replace(CATEGORYKEY, tree);
	}
	
	public String listAll() throws Exception {
		try{
			pdparameterList = pdparameterService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	// -------------------自定义方法
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public Pdparameter getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public PdparameterQuery getPdparameterQuery() {
		return pdparameterQuery;
	}

	
	public void setPdparameterQuery(PdparameterQuery pdparameterQuery) {
		this.pdparameterQuery = pdparameterQuery;
	}

	public void setPdparameterId(java.lang.Long pdparameterId) {
		this.pdparameterId = pdparameterId;
	}
	
	
	public java.lang.Long getPdparameterId() {
		return this.pdparameterId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<Pdparameter> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<Pdparameter> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<Pdparameter> getPdparameterList() {
		return pdparameterList;
	}

	public String getTree() {
		return tree;
	}

	public void setTree(String tree) {
		this.tree = tree;
	}
	
	
}
