/*
 * 
 */
package com.terrence.crm.dol.action;


import javax.servlet.http.HttpServletRequest;
import org.apache.struts2.components.ActionMessage;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Actions;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import java.util.List;
import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.base.utils.Struts2Utils;
import com.terrence.crm.dol.service.ICheckRecordService;
import com.terrence.crm.dol.utils.SpringSecurityUtils;
import com.terrence.crm.dol.bean.CheckDetailView;
import com.terrence.crm.dol.bean.CheckRecord;
import com.terrence.crm.dol.query.CheckRecordQuery;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/checkRecord")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "checkRecord." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class CheckRecordAction extends CrudActionSupport<CheckRecord>  implements ApplicationContextAware{
	
	
	@Autowired
	@Qualifier("checkRecordService")
	private ICheckRecordService checkRecordService;
	
	
	private CheckRecord entity;

	private CheckRecordQuery checkRecordQuery;
	
	
	private java.lang.Long checkRecordId;
	
	/** 分页器 */
	private Page<CheckRecord> page = new Page<CheckRecord>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<CheckRecord> checkRecordList;
	CheckDetailView detailview=new CheckDetailView();
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (checkRecordId != null ) {
			entity = checkRecordService.getById(checkRecordId);
		} else {
			entity = new CheckRecord();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try {
			checkRecordService.deleteByMultipleId(checkedIdList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}
	
	public String listToQuery()throws Exception
	{
		if(checkRecordQuery == null) {
			checkRecordQuery = new CheckRecordQuery();
		}
		
		try {
			checkRecordList = checkRecordService.findList(checkRecordQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	@Action("/report/monthToReport")
	public String monthReport()throws Exception
	{
		if(checkRecordQuery == null) {
			checkRecordQuery = new CheckRecordQuery();
		}
		try 
		{
		checkRecordList=checkRecordService.findList("CheckRecord.Month.Report",checkRecordQuery);
		resultInfo[0] = "0";
		resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	@Actions({@Action("/report/hourToreport"),@Action("/usercenter/monthToReport")})
	public String report()throws Exception
	{
		if(checkRecordQuery == null) {
			checkRecordQuery = new CheckRecordQuery();
		}
		try 
		{
		checkRecordList=checkRecordService.findList("CheckRecord.report",checkRecordQuery);
		resultInfo[0] = "0";
		resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	@Action("/usercenter/monthlydetail")
	public String reportdetail()throws Exception
	{
		
		if(checkRecordQuery == null) {
			checkRecordQuery = new CheckRecordQuery();
		}
		try 
		{
		checkRecordList=checkRecordService.findList("CheckRecord.report.detail",checkRecordQuery);
		resultInfo[0] = "0";
		resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	@Action("/usercenter/firstcheckdetail")
	public String firstreportdetail()throws Exception
	{
		
		if(checkRecordQuery == null) {
			checkRecordQuery = new CheckRecordQuery();
		}
		try 
		{
		checkRecordList=checkRecordService.findList("CheckRecord.firstCheckdetail",checkRecordQuery);
		resultInfo[0] = "0";
		resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}	
	public String listToRecord()throws Exception
	{
		if(checkRecordQuery == null) {
			checkRecordQuery = new CheckRecordQuery();
		}
		
		try {
			checkRecordList = checkRecordService.findList("CheckRecord.record",checkRecordQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("checkRecordId");
			page.setOrder(Page.DESC);
		}
		if(checkRecordQuery == null) {
			checkRecordQuery = new CheckRecordQuery();
		}
		
		try {
			page = checkRecordService.findPage(page, checkRecordQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	
	/**
	 * 查询最后一序所有合格数,和已提交的入库数
	 * @return
	 * @throws Exception
	 */
	public String showAcceptnum() throws Exception {
		
		try {
			entity=checkRecordService.findAcceptnum(checkRecordQuery.getCheckid());
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}
	

	public String showlastcheck() throws Exception {
		
		try {
			//checkQuery
			entity=checkRecordService.findLastcheck(checkRecordQuery);
				
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}
	
	
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			checkRecordService.saveOrUpdate(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = checkRecordService.getById(checkRecordId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {
		
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}

	
	
	public String findCheckList()throws Exception
	{
		if(checkRecordQuery == null) {
			checkRecordQuery = new CheckRecordQuery();
		}
		
		try {
			checkRecordList = checkRecordService.findList("CheckRecord.findCheckList",checkRecordQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	
	// -------------------自定义方法

	
	
	public String listAll() throws Exception {
		try{
			checkRecordList = checkRecordService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
//---------------------------------------
	public void prepareSaveToPolling() throws Exception {
		prepareModel();
	}
	public String saveToPolling()throws Exception
	{
		try
		{
			entity.setUserid(SpringSecurityUtils.getCurrentUserId());
			//System.out.println("====entity:"+entity.toString());
			
			checkRecordService.savePolling(detailview,entity);
			resultInfo[0] = "0";
			resultInfo[1] = "巡检成功";
		}
		catch(Exception e)
		{
			resultInfo[0] = "-1";
			resultInfo[1] = "巡检失败";
		}
		return JSON;
	}
	
	// -------------------自定义方法
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public CheckRecord getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public CheckRecordQuery getCheckRecordQuery() {
		return checkRecordQuery;
	}

	
	public void setCheckRecordQuery(CheckRecordQuery checkRecordQuery) {
		this.checkRecordQuery = checkRecordQuery;
	}

	public void setCheckRecordId(java.lang.Long checkRecordId) {
		this.checkRecordId = checkRecordId;
	}
	
	
	public java.lang.Long getCheckRecordId() {
		return this.checkRecordId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<CheckRecord> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<CheckRecord> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<CheckRecord> getCheckRecordList() {
		return checkRecordList;
	}

	public CheckDetailView getDetailview() {
		return detailview;
	}

	public void setDetailview(CheckDetailView detailview) {
		this.detailview = detailview;
	}
	
}
