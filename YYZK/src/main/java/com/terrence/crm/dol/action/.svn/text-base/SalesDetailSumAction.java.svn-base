/*
 * 
 */
package com.terrence.crm.dol.action;


import javax.servlet.http.HttpServletRequest;
import org.apache.struts2.components.ActionMessage;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import java.util.ArrayList;
import java.util.List;
import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.query.SalesDetailSumQuery;
import com.terrence.crm.dol.service.ISalesDetailSumService;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.SalesDetailSum;
/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/salesDetailSum")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "salesDetailSum." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class SalesDetailSumAction extends CrudActionSupport<SalesDetailSum>  implements ApplicationContextAware{
	
	
	@Autowired
	@Qualifier("salesDetailSumService")
	private ISalesDetailSumService salesDetailSumService;
	
	
	private SalesDetailSum entity;

	private SalesDetailSumQuery salesDetailSumQuery;
	
	
	private java.lang.Long salesDetailSumId;
	
	/** 分页器 */
	private Page<SalesDetailSum> page = new Page<SalesDetailSum>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<SalesDetailSum> salesDetailSumList;
	private Boolean falg;

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (salesDetailSumId != null ) {
			entity = salesDetailSumService.getById(salesDetailSumId);
		} else {
			entity = new SalesDetailSum();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try {
			salesDetailSumService.deleteByMultipleId(checkedIdList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}
	
	public String listToQuery()throws Exception
	{
		if(salesDetailSumQuery == null) {
			salesDetailSumQuery = new SalesDetailSumQuery();
		}
		
		try {
			salesDetailSumList = salesDetailSumService.findList(salesDetailSumQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("salesDetailSumId");
			page.setOrder(Page.DESC);
		}
		if(salesDetailSumQuery == null) {
			salesDetailSumQuery = new SalesDetailSumQuery();
		}
		
		try {
			page = salesDetailSumService.findPage(page, salesDetailSumQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			salesDetailSumService.saveOrUpdate(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = salesDetailSumService.getById(salesDetailSumId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {
		
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}

	
	// -------------------自定义方法
	public void prepareUpdateSaleDetail() throws Exception{
		prepareModel();
	}
	/**
	 *<p>销售出库单正审方法<p>.
	 *Author:ZhangYuPeng
	 *CreatDate:2014-5-14下午5:04:35
	 * @return
	 * @throws Exception
	 */
	@Action("/salesDetailSum/updateSaleDetail")
	public String updateSaleDetail()throws Exception{
		if(salesDetailSumQuery == null) {
			salesDetailSumQuery = new SalesDetailSumQuery();
		}
		
		try{
			if(checkedIdList!=null && checkedIdList.size()>0){
				salesDetailSumService.findSaleDetailSum(checkedIdList,true,salesDetailSumQuery);
				
			}else {
				checkedIdList = new ArrayList<Long>();
				checkedIdList.add(salesDetailSumId);
				salesDetailSumService.findSaleDetailSum(checkedIdList,true,salesDetailSumQuery);
			}
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		}	
		
		return JSON;
		
	}
	public void prepareReSaleDetail() throws Exception{
		prepareModel();
	}
	@Action("/salesDetailSum/reSaleDetail")
	public String reSaleDetail()throws Exception{
		if(salesDetailSumQuery == null) {
			salesDetailSumQuery = new SalesDetailSumQuery();
		}
		
		try{
			if(checkedIdList!=null && checkedIdList.size()>0){
				salesDetailSumService.findSaleDetailSum(checkedIdList,false,salesDetailSumQuery);
				
			}else {
				checkedIdList = new ArrayList<Long>();
				checkedIdList.add(salesDetailSumId);
				salesDetailSumService.findSaleDetailSum(checkedIdList,false,salesDetailSumQuery);
			}
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		}	
		
		return JSON;
		
	}
	public String listAll() throws Exception {
		try{
			salesDetailSumList = salesDetailSumService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	
	public void prepareSaveNewSales() throws Exception{
		prepareModel();
	}
	@Action("/salesDetailSum/saveNewSales")
	public String saveNewSales() throws Exception {
			
			try {
				entity=salesDetailSumService.saveNewSales(entity,checkedIdList);
				
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功";
				
				addActionMessage("操作成功");
			} catch(ServiceException e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = e.getMessage();
			} catch(Exception e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = "操作失败";
				
				addActionMessage("操作失败");
				return INPUT;
			}
			return JSON;
		}
	
	public void prepareSaveNewSalesTwo() throws Exception{
		prepareModel();
	}
	@Action("/salesDetailSum/saveNewSalesTwo")
	public String saveNewSalesTwo() throws Exception {
			
			try {
				entity=salesDetailSumService.saveNewSalesTwo(entity,checkedIdList);
				
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功";
				
				addActionMessage("操作成功");
			} catch(ServiceException e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = e.getMessage();
			} catch(Exception e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = "操作失败";
				
				addActionMessage("操作失败");
				return INPUT;
			}
			return JSON;
		}
	
	public String listfindPage() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("salesDetailSumId");
			page.setOrder(Page.DESC);
		}
		if(salesDetailSumQuery == null) {
			salesDetailSumQuery = new SalesDetailSumQuery();
		}
		
		try {
			//page = salesDetailSumService.findPage(page, salesDetailSumQuery);
			page = salesDetailSumService.findPage(page, "SalesDetail.find.Page.data", salesDetailSumQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	
	public String saleSumList() throws Exception {
		try{
			salesDetailSumList = salesDetailSumService.findsaleSumList(salesDetailSumQuery);
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	
	public String deleteData() throws Exception {
			
			try {
				salesDetailSumService.deleteData(salesDetailSumQuery);
				
				resultInfo[0] = "0";
				resultInfo[1] = "删除成功";
				
				addActionMessage("删除成功");
			} catch(ServiceException e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = e.getMessage();
			} catch(Exception e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = "删除失败";
				
				addActionMessage("删除失败");
			}
			return JSON;
		}
	
	public String delSalesSum() throws Exception {
		
		try {
			//salesDetailSumService.deleteData(salesDetailSumQuery);
			salesDetailSumService.delSalesSum(salesDetailSumQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return JSON;
	}
	
	/**
	 * 保存销售出库退库单据
	 * @throws Exception
	 */
	public void prepareSaveReturnStock() throws Exception{
		prepareModel();
	}
	@Action("/salesDetailSum/saveReturnStockSales")
	public String saveReturnStock() throws Exception {
			
			try {
				salesDetailSumService.saveReturnStock(entity);
				
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功";
				
				addActionMessage("操作成功");
			} catch(ServiceException e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = e.getMessage();
			} catch(Exception e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = "操作失败";
				
				addActionMessage("操作失败");
				return INPUT;
			}
			return JSON;
		}
	// -------------------自定义方法
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public SalesDetailSum getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public SalesDetailSumQuery getSalesDetailSumQuery() {
		return salesDetailSumQuery;
	}

	
	public void setSalesDetailSumQuery(SalesDetailSumQuery salesDetailSumQuery) {
		this.salesDetailSumQuery = salesDetailSumQuery;
	}

	public void setSalesDetailSumId(java.lang.Long salesDetailSumId) {
		this.salesDetailSumId = salesDetailSumId;
	}
	
	
	public java.lang.Long getSalesDetailSumId() {
		return this.salesDetailSumId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<SalesDetailSum> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<SalesDetailSum> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<SalesDetailSum> getSalesDetailSumList() {
		return salesDetailSumList;
	}

	public Boolean getFalg() {
		return falg;
	}

	public void setFalg(Boolean falg) {
		this.falg = falg;
	}
	
	
}
