package com.terrence.crm.dol.dao.impl;




import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.terrence.crm.dol.base.BaseIbatisDao;
import com.terrence.crm.dol.bean.Poorderentry;
import com.terrence.crm.dol.dao.IPoorderentryDao;
import com.terrence.crm.dol.query.PoorderentryQuery;

@Repository
public class PoorderentryDao extends BaseIbatisDao<Poorderentry,java.lang.Long> implements IPoorderentryDao{

		
	public void saveOrUpdate(Poorderentry entity) {
		if(entity.getOrderid() == null) 
			save(entity);
		else 
			update(entity);
	}
	
	public String getIbatisSqlMapNamespace() {
		
		return "Poorderentry";
	}
	public Poorderentry getByProperty(String propertyName, Object propertyValue) {
		Map map=new HashMap();		
		map.put("propertyName", propertyName);
		map.put("propertyValue", (String)propertyValue);
		return (Poorderentry)this.getSqlMapClientTemplate().queryForObject("Poorderentry.getByProperty", map);		
	}

	@Override
	public void savePoorder(Poorderentry poorderentry) {
		this.getSqlMapClientTemplate().insert("Poorderentry.porequestentry.insert", poorderentry);
	}

	@Override
	public void updateMrpclose(Poorderentry entity) {
		this.getSqlMapClientTemplate().update("Poorderentry.update.for.detail",entity);
	}

	@Override
	public void updateforIspush(Poorderentry poorderentry) {
		
		this.getSqlMapClientTemplate().update("Poorderentry.update.forIspush", poorderentry);
	}

	@Override
	public void deleteToPoorderentry(Poorderentry poorderentry) {
		this.getSqlMapClientTemplate().delete("Poorderentry.delete.for.list", poorderentry);
	}

	@Override
	public List<Poorderentry> findCheckPush(Poorderentry poorderentry) {
		
		return this.getSqlMapClientTemplate().queryForList("Poorderentry.find.checkPush", poorderentry);
	}

	@Override
	public List<Poorderentry> findCheckNotPush(Poorderentry pentry) {
		return this.getSqlMapClientTemplate().queryForList("Poorderentry.find.checkNotPush", pentry);
	}

	@Override
	public List<Poorderentry> findPushCheckAll(Poorderentry poorderentry) {
		
		return this.getSqlMapClientTemplate().queryForList("Poorderentry.find.PushCheckAll", poorderentry);
	}

	@Override
	public void updatebought(Poorderentry pentry) {
		this.getSqlMapClientTemplate().update("Poorderentry.update.for.detail", pentry);
		
	}

	@Override
	public Poorderentry findbought(Poorderentry poo) {
		return (Poorderentry) this.getSqlMapClientTemplate().queryForObject("Poorderentry.find.bought", poo);
	}

	@Override
	public Poorderentry findInWait(Poorderentry poorderentry) {
		return (Poorderentry) this.getSqlMapClientTemplate().queryForObject("Poorderentry.find.in.itemwait", poorderentry);
	}

	@Override
	public Poorderentry findentrypoorder(Poorderentry poor) {
		return (Poorderentry) this.getSqlMapClientTemplate().queryForObject("Poorderentry.find.entrypoorder", poor);
	}

	@Override
	public List<Poorderentry> findListPoorderentry(Poorderentry poorderen) {
		return this.getSqlMapClientTemplate().queryForList("Poorderentry.find.listPoorderentry", poorderen);
	}

	@Override
	public Poorderentry findpp(Poorderentry pder) {
		return (Poorderentry) this.getSqlMapClientTemplate().queryForObject("Poorderentry.find.pder.entity", pder);
	}

	@Override
	public List<Poorderentry> findfissnmanager(Poorderentry poorderentry) {
		return this.getSqlMapClientTemplate().queryForList("Poorderentry.find.fissnmanager", poorderentry);
	}

	@Override
	public List<Poorderentry> findpoorderentry(Poorderentry poorderentry) {
		return this.getSqlMapClientTemplate().queryForList("Poorderentry.findlist.poorderentryList", poorderentry);
	}

	@Override
	public Poorderentry findpentry(Poorderentry poorderen) {
		return (Poorderentry) this.getSqlMapClientTemplate().queryForObject("Poorderentry.find.tongbu.pentry", poorderen);
	}

	@Override
	public List<Poorderentry> findpoorderentrytongdata(Poorderentry poorderentry) {
		return  this.getSqlMapClientTemplate().queryForList("Poorderentry.findlist.poorderentryList.tongbu", poorderentry);
	}

	@Override
	public List<Poorderentry> findpderentryList(Poorderentry poorderentry) {
		return this.getSqlMapClientTemplate().queryForList("Poorderentry.findfinteridlist.delete", poorderentry);
	}

	@Override
	public Poorderentry findMingXi(Poorderentry pp) {
		return (Poorderentry) this.getSqlMapClientTemplate().queryForObject("Poorderentry.find.mingxi", pp);
	}

	@Override
	public List<Poorderentry> findPoorderentryAllXls(
			PoorderentryQuery poorderentryQuery) {
		return this.getSqlMapClientTemplate().queryForList("Poorderentry.find.AllXls.list", poorderentryQuery);
	}

	@Override
	public List<Poorderentry> findListXi(Poorderentry ppp) {
		return this.getSqlMapClientTemplate().queryForList("Poorderentry.findlist.poorderentryList",ppp);
	}

	@Override
	public Poorderentry findentity(Poorderentry poorderentry) {
		return (Poorderentry) this.getSqlMapClientTemplate().queryForObject("Poorderentry.find.pder.entity", poorderentry);
	}

	@Override
	public List<Poorderentry> findListP(Poorderentry poorderentry) {
		return this.getSqlMapClientTemplate().queryForList("Poorderentry.find.listp", poorderentry);
	}

	@Override
	public List<Poorderentry> findListDetail(Poorderentry poorderentry) {
		return this.getSqlMapClientTemplate().queryForList("Poorderentry.find.detail.datalist", poorderentry);
	}

	@Override
	public List<Poorderentry> findforDetail(Poorderentry poorderentry) {
		return this.getSqlMapClientTemplate().queryForList("Poorderentry.find.for.quest.datalist", poorderentry);
	}

	@Override
	public List<Poorderentry> finddetailData(PoorderentryQuery poorderentryQuery) {
		return this.getSqlMapClientTemplate().queryForList("Poorderentry.find.poorder.execution.details", poorderentryQuery);
	}

	@Override
	public Poorderentry findentry(Poorderentry epfno) {
		return (Poorderentry) this.getSqlMapClientTemplate().queryForObject("Poorderentry.find.k3fbillno.data", epfno);
	}

	@Override
	public Poorderentry findEntry(Poorderentry entity) {
		
		return (Poorderentry) this.getSqlMapClientTemplate().queryForObject("Poorderentry.find.finterid.fqty.for.baseitem.data", entity);
	}

}
