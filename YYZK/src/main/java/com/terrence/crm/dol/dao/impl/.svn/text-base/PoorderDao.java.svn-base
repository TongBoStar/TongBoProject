package com.terrence.crm.dol.dao.impl;




import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.terrence.crm.dol.base.BaseIbatisDao;
import com.terrence.crm.dol.bean.Poorder;
import com.terrence.crm.dol.dao.IPoorderDao;
import com.terrence.crm.dol.query.PoorderQuery;


@Repository
public class PoorderDao extends BaseIbatisDao<Poorder,java.lang.Long> implements IPoorderDao{

		
	public void saveOrUpdate(Poorder entity) {
		if(entity.getFinterid() == null) 
			save(entity);
		else 
			update(entity);
	}
	
	public String getIbatisSqlMapNamespace() {
		
		return "Poorder";
	}
	public Poorder getByProperty(String propertyName, Object propertyValue) {
		Map map=new HashMap();		
		map.put("propertyName", propertyName);
		map.put("propertyValue", (String)propertyValue);
		return (Poorder)this.getSqlMapClientTemplate().queryForObject("Poorder.getByProperty", map);		
	}

	@Override
	public List<Poorder> findcreatPoorder(String statmentname) {
		
		return (List<Poorder>)this.getSqlMapClientTemplate().queryForList(statmentname);
	}

	@Override
	public Poorder findPoorder(PoorderQuery poorderQuery) {
		return (Poorder) this.getSqlMapClientTemplate().queryForObject("Poorder.find.poorder", poorderQuery);
	}

	@Override
	public void updatePoorder(Poorder poorder) {
		this.getSqlMapClientTemplate().update("Poorder.update.in.tasks", poorder);
		
	}

	@Override
	public Poorder findtasksPoorder(PoorderQuery poorderQuery) {
		return (Poorder) this.getSqlMapClientTemplate().queryForObject("Poorder.find.poorder.in.tasks", poorderQuery);
	}

	@Override
	public void updateUNAudit(Poorder poorder) {
		this.getSqlMapClientTemplate().update("Poorder.update.unaudit", poorder);
	}

	@Override
	public void updateforfclosed(Poorder poorder) {
		this.getSqlMapClientTemplate().update("Poorder.update.unaudit", poorder);
		
	}

	@Override
	public void updateforUNfclosed(Poorder poorder) {
		this.getSqlMapClientTemplate().update("Poorder.update.unaudit", poorder);
	}

	@Override
	public List<Poorder> findAllPoorder(Poorder poorder) {
		return this.getSqlMapClientTemplate().queryForList("Poorder.findAllPoorder", poorder);
	}

	@Override
	public void deletePoorder(Poorder poorder) {
		this.getSqlMapClientTemplate().delete("Poorder.delete.in.poorder", poorder);
		
	}

	@Override
	public void updatefortasks(Poorder entity) {
		this.getSqlMapClientTemplate().update("Poorder.update.in.tasks", entity);
	}

	@Override
	public Poorder findtemplate(Poorder po) {
		return (Poorder) this.getSqlMapClientTemplate().queryForObject("Poorder.find.template", po);
	}

	@Override
	public Poorder findpoorderentity(Poorder poorder) {
		return (Poorder) this.getSqlMapClientTemplate().queryForObject("Poorder.find.template", poorder);
	}

	@Override
	public List<Poorder> findAllPoorderBatch(Poorder poorder) {
		return this.getSqlMapClientTemplate().queryForList("Poorder.findAllPoorder", poorder);
	}

	@Override
	public Poorder findper(Poorder poorder) {
		return (Poorder) this.getSqlMapClientTemplate().queryForObject("Poorder.find.findper", poorder);
	}

	@Override
	public Poorder findfbillnoWait(Poorder poorder) {
		return (Poorder) this.getSqlMapClientTemplate().queryForObject("Poorder.find.entity.in.itemwait", poorder);
	}

	@Override
	public List<Poorder> findtongbuerp() {
		return this.getSqlMapClientTemplate().queryForList("Poorder.find.tongbu.erp");
	}

	@Override
	public List<Poorder> findtongdata(Poorder derpoor) {
		return this.getSqlMapClientTemplate().queryForList("Poorder.finddata.tongdata", derpoor);
	}

	@Override
	public List<Poorder> finddatatong(Poorder derpoor) {
		return this.getSqlMapClientTemplate().queryForList("Poorder.find.datatong", derpoor);
	}

	@Override
	public Poorder findppoorder(Poorder poo) {
		return (Poorder) this.getSqlMapClientTemplate().queryForObject("Poorder.find.ppoorder",poo);
	}

	@Override
	public Poorder findpper(Poorder pooer) {
		return (Poorder) this.getSqlMapClientTemplate().queryForObject("Poorder.find.pper.poorder", pooer);
	}

	@Override
	public Poorder findderpoor(Poorder derpoor) {
		return (Poorder) this.getSqlMapClientTemplate().queryForObject("Poorder.find.ppoorder", derpoor);
	}

	@Override
	public List<Poorder> findpooderList(Poorder p) {
		return this.getSqlMapClientTemplate().queryForList("Poorder.findPoorderList.fanshen", p);
	}

	@Override
	public void updateUNAuditdate(Poorder poorder) {
		this.getSqlMapClientTemplate().update("Poorder.update.date.erp.tongbu", poorder);
	}

	@Override
	public Poorder findPoorderRejected(PoorderQuery poorderQuery) {
		return (Poorder) this.getSqlMapClientTemplate().queryForObject("Poorder.find.PoorderRejected",poorderQuery);
	}

	@Override
	public List<Poorder> findPoorderList(Poorder entity) {
		return this.getSqlMapClientTemplate().queryForList("Poorder.find.Rejected.list.for", entity);
	}

	@Override
	public Poorder findPooderEntity(Poorder derpoor) {
		return (Poorder) this.getSqlMapClientTemplate().queryForObject("Poorder.find.pper.poorder", derpoor);
	}

	@Override
	public List<Poorder> findIsoldList(Poorder p) {
		return this.getSqlMapClientTemplate().queryForList("Poorder.find.isoldList.data", p);
	}


}
