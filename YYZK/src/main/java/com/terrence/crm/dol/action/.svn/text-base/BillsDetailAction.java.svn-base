/*
 * 
 */
package com.terrence.crm.dol.action;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.BillsDetail;
import com.terrence.crm.dol.query.BillsDetailQuery;
import com.terrence.crm.dol.service.IBillsDetailService;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/billsDetail")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "billsDetail." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class BillsDetailAction extends CrudActionSupport<BillsDetail>  implements ApplicationContextAware{
	
	
	@Autowired
	@Qualifier("billsDetailService")
	private IBillsDetailService billsDetailService;
	
	
	private BillsDetail entity;

	private BillsDetailQuery billsDetailQuery;
	
	
	private java.lang.Long billsDetailId;
	
	/** 分页器 */
	private Page<BillsDetail> page = new Page<BillsDetail>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<BillsDetail> billsDetailList;
	
	
	

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (billsDetailId != null ) {
			entity = billsDetailService.getById(billsDetailId);
		} else {
			entity = new BillsDetail();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try {
			billsDetailService.deleteByMultipleId(checkedIdList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}
	public String listToStatement() throws Exception
	{
		if(billsDetailQuery == null) {
			billsDetailQuery = new BillsDetailQuery();
		}
		
		try {
			//billsDetailList = billsDetailService.findList(billsDetailQuery,"BillsDetail.Assembly.findList");
			billsDetailList = billsDetailService.findList(billsDetailQuery,"BillsDetail.find.new.pdload.data");
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	
	public String listStatementNew() throws Exception
	{
		if(billsDetailQuery == null) {
			billsDetailQuery = new BillsDetailQuery();
		}
		
		try {
			billsDetailList = billsDetailService.findList(billsDetailQuery,"BillsDetail.Assembly.findList");
			//billsDetailList = billsDetailService.findList(billsDetailQuery,"BillsDetail.find.new.pdload.data");
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	public String listToQuery()throws Exception
	{
		if(billsDetailQuery == null) {
			billsDetailQuery = new BillsDetailQuery();
		}
		
		try {
			billsDetailList = billsDetailService.findList(billsDetailQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("billsDetailId");
			page.setOrder(Page.DESC);
		}
		if(billsDetailQuery == null) {
			billsDetailQuery = new BillsDetailQuery();
		}
		
		try {
			page = billsDetailService.findPage(page, billsDetailQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			billsDetailService.saveOrUpdate(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = billsDetailService.getById(billsDetailId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {
		
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}

	
//--------------20130816 自定义方法  保存	
	public String saveBillsDetail() throws Exception {
		try {
			billsDetailId=billsDetailService.saveBillsDetail(billsDetailQuery);
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return JSON;
	}
	
	public void prepareUpdateBillsDetail() throws Exception {
		prepareModel();
	}
	
	public String updateBillsDetail() throws Exception {
		try{
			
			
			billsDetailService.updateBillsDetail(entity,true);
		
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return JSON;
		
	}
	public void prepareUpdateBillsDetails() throws Exception {
		prepareModel();
	}
	
	public String updateBillsDetails() throws Exception {
		try{
			
			
			billsDetailService.updateBillsDetail(entity,false);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return JSON;
		
	}
	public void prepareDosing() throws Exception {
		prepareModel();
	}
	public String dosing()throws Exception
	{
		try
		{
			billsDetailService.updateDosing(entity);
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return JSON;
	}
	//-----------------------------------------------------------
	public String findexcel() throws Exception
	{
		if(billsDetailQuery == null) {
			billsDetailQuery = new BillsDetailQuery();
		}
		
		try {
			String fileName = billsDetailService.findexcel(billsDetailQuery,"BillsDetail.Assembly.findList",getRequest().getRealPath("/"));
			
			resultInfo[0] = "0";
			resultInfo[1] = fileName;
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	
	@Action("/excel/saveDetailExcelExport")
	public void saveExport(){
		String filename=getRequest().getParameter("filename");
		HSSFWorkbook wb = null;
		try {
			wb = new HSSFWorkbook(new FileInputStream(getRequest().getRealPath("/")+filename));
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
			HttpServletResponse response = getResponse();
			response.setContentType("application/vnd.ms-excel");
			try {
				

					response.setHeader("Content-disposition","attachment; filename=" + new String( "产品装配材料清单.xls".getBytes("gb2312"), "ISO8859-1" ) );					
			
					OutputStream ouputStream = response.getOutputStream(); 
					 wb.write(ouputStream);  
					 ouputStream.flush();  
					 ouputStream.close();
					 new File(getRequest().getRealPath("/")+filename).delete();
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
	}
	// -------------------自定义方法

	public String listAll() throws Exception {
		try{
			billsDetailList = billsDetailService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	/**
	 * 更改BOM不一致标志
	 * @throws Exception
	 */
	public void prepareUpdateYBom() throws Exception {
		prepareModel();
	}
	
	public String updateYBom() throws Exception {
		try{
			
			
			billsDetailService.updateYBom(entity);
		
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return JSON;
		
	}
	/**
	 * 查询配料时同一物料多批次的数据
	 * @return
	 * @throws Exception
	 */
	public String findbatchnos()throws Exception
	{
		if(billsDetailQuery == null) {
			billsDetailQuery = new BillsDetailQuery();
		}
		
		try {
			billsDetailList = billsDetailService.findList(billsDetailQuery,"BillsDetail.find.new.pdload.data");
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	
	
	/**
	 * 配料单反提交操作
	 * @throws Exception
	 */
	public void prepareUpdateunsubmit() throws Exception {
		prepareModel();
	}
	@Action("/billsDetail/updateunsubmit")
	public String updateunsubmit() throws Exception {
		try{
			
			
			billsDetailService.updateunsubmit(entity);
		
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return JSON;
		
	}
	
	/**
	 * 更新已装数量
	 * @throws Exception
	 */
	public void prepareUpdateQuantity() throws Exception {
		prepareModel();
	}
	public String updateQuantity() throws Exception {
		try{
			
			
			billsDetailService.updateQuantity(entity);
		
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return JSON;
		
	}
	
	
	public void prepareUpdateisdel() throws Exception {
		prepareModel();
	}
	
	public String updateisdel() throws Exception {
		try{
			
			
			billsDetailService.updateisdel(checkedIdList);
		
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return JSON;
		
	}
	// -------------------自定义方法
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public BillsDetail getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public BillsDetailQuery getBillsDetailQuery() {
		return billsDetailQuery;
	}

	
	public void setBillsDetailQuery(BillsDetailQuery billsDetailQuery) {
		this.billsDetailQuery = billsDetailQuery;
	}

	public void setBillsDetailId(java.lang.Long billsDetailId) {
		this.billsDetailId = billsDetailId;
	}
	
	
	public java.lang.Long getBillsDetailId() {
		return this.billsDetailId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<BillsDetail> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<BillsDetail> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<BillsDetail> getBillsDetailList() {
		return billsDetailList;
	}

}
