package com.terrence.crm.dol.service.impl;

import java.lang.reflect.InvocationTargetException;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.dao.DataAccessException;
import org.springframework.transaction.annotation.Transactional;

import com.terrence.crm.dol.base.BaseService;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.DeviceDfiletype;
import com.terrence.crm.dol.query.DeviceDfiletypeQuery;
import com.terrence.crm.dol.dao.IDeviceDfiletypeDao;
import com.terrence.crm.dol.service.IDeviceDfiletypeService;

@Service
@Transactional
public class DeviceDfiletypeService extends BaseService implements IDeviceDfiletypeService {
	protected static Logger logger = LoggerFactory.getLogger(DeviceDfiletypeService.class);
	@Autowired
	@Qualifier("deviceDfiletypeDao")
	private IDeviceDfiletypeDao deviceDfiletypeDao;
	
	public String getIbatisSqlMapNamespace() {
		return "DeviceDfiletype";
	}
	@Transactional(readOnly=true)
	public DeviceDfiletype getById(java.lang.Long id) throws ServiceException
	{
		return deviceDfiletypeDao.getById(id);
	}
	
	public void saveOrUpdate(DeviceDfiletype entity) throws ServiceException
	{
		deviceDfiletypeDao.saveOrUpdate(entity);
	}
	
	public java.lang.Long save(DeviceDfiletype entity) throws ServiceException
	{
		Long adId = deviceDfiletypeDao.save(entity);
		
		return adId;
	}
	
	public Integer update(DeviceDfiletype entity) throws ServiceException
	{
		Integer returnValue =  deviceDfiletypeDao.update(entity);
		
		return returnValue;
	}
	
	public Integer deleteById(java.lang.Long id) throws ServiceException
	{
		Integer returnValue = deviceDfiletypeDao.deleteById(id);		
		return returnValue;
	}
	
	public Integer deleteByMultipleId(List<java.lang.Long> idList) throws ServiceException
	{
		String delIds = StringUtils.join(idList, ",");
		Integer returnValue = deviceDfiletypeDao.deleteByMultipleId(delIds);
		
		return returnValue;
	}
	
	public boolean isUnique(String uniquePropertyNames, Object newValue, Object oldValue) throws ServiceException
	{
		DeviceDfiletypeQuery query = new DeviceDfiletypeQuery();
		try {
			return deviceDfiletypeDao.isUnique(query, uniquePropertyNames, newValue, oldValue);
		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		}
	}
	@Transactional(readOnly=true)
	public Page<DeviceDfiletype> findPage(Page<DeviceDfiletype> page, DeviceDfiletypeQuery query) throws ServiceException
	{
		return deviceDfiletypeDao.findPage(page, query);
	}
	@Transactional(readOnly=true)
	public Page<DeviceDfiletype> findPage(Page<DeviceDfiletype> page,String statement, DeviceDfiletypeQuery query) throws ServiceException
	{
		return deviceDfiletypeDao.findPage(page,statement, query);
	}
	@Transactional(readOnly=true)
	public List<DeviceDfiletype> findList(DeviceDfiletypeQuery query) throws ServiceException
	{
		return deviceDfiletypeDao.findList(query);
	}
	@Transactional(readOnly=true)
	public List<DeviceDfiletype> findList(DeviceDfiletypeQuery query,Integer pageSize) throws ServiceException
	{
		return deviceDfiletypeDao.findList(query,pageSize);
	}
	
	@Transactional(readOnly=true)
	public List<DeviceDfiletype> findList(DeviceDfiletypeQuery query,String statement,Integer pageSize) throws ServiceException
	{
		return deviceDfiletypeDao.findList(query,statement,pageSize);
	}
	@Transactional(readOnly=true)
	public List<DeviceDfiletype> findAllList() throws ServiceException
	{
		return deviceDfiletypeDao.findAllList();
	}

}