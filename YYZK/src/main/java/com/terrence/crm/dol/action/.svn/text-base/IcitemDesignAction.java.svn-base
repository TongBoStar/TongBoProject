/*
 * 
 */
package com.terrence.crm.dol.action;


import java.util.EnumSet;
import java.util.List;

import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.BaseItem;
import com.terrence.crm.dol.bean.IcitemDesign;
import com.terrence.crm.dol.bean.Workinstructor;
import com.terrence.crm.dol.contasnt.ICItemDesign;
import com.terrence.crm.dol.query.BaseItemQuery;
import com.terrence.crm.dol.query.IcitemDesignQuery;
import com.terrence.crm.dol.service.IBaseItemService;
import com.terrence.crm.dol.service.IIcitemDesignService;
import com.terrence.crm.dol.service.IWorkinstructorService;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/icitemDesign")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "icitemDesign." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class IcitemDesignAction extends CrudActionSupport<IcitemDesign>  implements ApplicationContextAware{
	
	
	@Autowired
	@Qualifier("icitemDesignService")
	private IIcitemDesignService icitemDesignService;
	@Autowired
	@Qualifier("baseItemService")
	private IBaseItemService baseItemService;
	@Autowired
	@Qualifier("workinstructorService")
	private IWorkinstructorService workinstructorService;
	private IcitemDesign entity;

	private IcitemDesignQuery icitemDesignQuery;
	
	
	private java.lang.Long icitemDesignId;
	
	/** 分页器 */
	private Page<IcitemDesign> page = new Page<IcitemDesign>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<IcitemDesign> icitemDesignList;
	EnumSet<ICItemDesign> currEnumSet = EnumSet.allOf(ICItemDesign.class);
	private String itemcode;
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (icitemDesignId != null ) {
			entity = icitemDesignService.getById(icitemDesignId);
		} else {
			entity = new IcitemDesign();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try {
			icitemDesignService.deleteByMultipleId(checkedIdList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}
	
	public String listToQuery()throws Exception
	{
		if(icitemDesignQuery == null) {
			icitemDesignQuery = new IcitemDesignQuery();
		}
		
		try {
			icitemDesignList = icitemDesignService.findList(icitemDesignQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("icitemDesignId");
			page.setOrder(Page.DESC);
		}
		if(icitemDesignQuery == null) {
			icitemDesignQuery = new IcitemDesignQuery();
		}
		
		try {
			page = icitemDesignService.findPage(page, icitemDesignQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			icitemDesignService.saveOrUpdate(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = icitemDesignService.getById(icitemDesignId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	
		public String showToNew() throws Exception {
			
			try {
				
				entity=icitemDesignService.getByIdIncludeBaseitem("IcitemDesign.getByIdIncludeBaseitem",icitemDesignId);
				resultInfo[0] = "0";
				resultInfo[1] = "查询成功";
			} catch(Exception e) {
				logger.error(e.getMessage());
				resultInfo[0] = "-1";
				resultInfo[1] = "查询失败";
			}
			return JSON;
		}
		public String showToNewBatch() throws Exception {
			
			try {
				
				icitemDesignList=icitemDesignService.getByCheckedIdListIncludeBaseitem("IcitemDesign.findicitemDesign.IncludeBaseitem",checkedIdList);
				resultInfo[0] = "0";
				resultInfo[1] = "查询成功";
			} catch(Exception e) {
				logger.error(e.getMessage());
				resultInfo[0] = "-1";
				resultInfo[1] = "查询失败";
			}
			return JSON;
		}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {
		
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}
	public String showByItemcode() throws Exception {
		
		try {
			BaseItemQuery baseItemQuery = new BaseItemQuery();
			baseItemQuery.setItemcode(itemcode);
			BaseItem baseItem = baseItemService.findbaseguide(baseItemQuery);
			icitemDesignQuery = new IcitemDesignQuery();
			icitemDesignQuery.setBaseitemid(baseItem.getBaseitemid());
			List<IcitemDesign> icitemDesigns = icitemDesignService.findList(icitemDesignQuery);
			entity = icitemDesigns.get(0);
			if(null!=baseItem.getCraftid()){
				Workinstructor workinstructor = workinstructorService.getById(baseItem.getCraftid());
				entity.setCheckcraftsnum(workinstructor.getCheckcraftsnum());
			}
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}
	
	// -------------------自定义方法

	
	
	public String listAll() throws Exception {
		try{
			icitemDesignList = icitemDesignService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	/**
	 * 保存新数据
	 * @return
	 * @throws Exception
	 */
	public void prepareSaveUpdate() throws Exception {
		prepareModel();
	}
	public String saveUpdate() throws Exception {
			
			try {
				icitemDesignService.saveUpdate(entity,checkedIdList);
				
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功";
				
				addActionMessage("操作成功");
			} catch(ServiceException e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = e.getMessage();
			} catch(Exception e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = "操作失败";
				
				addActionMessage("操作失败");
				return INPUT;
			}
			return JSON;
		}
	// -------------------自定义方法
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public IcitemDesign getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public IcitemDesignQuery getIcitemDesignQuery() {
		return icitemDesignQuery;
	}

	
	public void setIcitemDesignQuery(IcitemDesignQuery icitemDesignQuery) {
		this.icitemDesignQuery = icitemDesignQuery;
	}

	public void setIcitemDesignId(java.lang.Long icitemDesignId) {
		this.icitemDesignId = icitemDesignId;
	}
	
	
	public java.lang.Long getIcitemDesignId() {
		return this.icitemDesignId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<IcitemDesign> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<IcitemDesign> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<IcitemDesign> getIcitemDesignList() {
		return icitemDesignList;
	}

	public EnumSet<ICItemDesign> getCurrEnumSet() {
		return currEnumSet;
	}

	public void setCurrEnumSet(EnumSet<ICItemDesign> currEnumSet) {
		this.currEnumSet = currEnumSet;
	}

	public String getItemcode() {
		return itemcode;
	}

	public void setItemcode(String itemcode) {
		this.itemcode = itemcode;
	}


	
}
