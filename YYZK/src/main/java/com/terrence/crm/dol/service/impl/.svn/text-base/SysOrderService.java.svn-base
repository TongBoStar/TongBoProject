package com.terrence.crm.dol.service.impl;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONObject;
import net.sourceforge.pinyin4j.PinyinHelper;
import net.sourceforge.pinyin4j.format.HanyuPinyinCaseType;
import net.sourceforge.pinyin4j.format.HanyuPinyinOutputFormat;
import net.sourceforge.pinyin4j.format.HanyuPinyinToneType;
import net.sourceforge.pinyin4j.format.exception.BadHanyuPinyinOutputFormatCombination;

import org.apache.commons.lang.StringUtils;
import org.apache.velocity.runtime.parser.node.MathUtils;
import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.dao.DataAccessException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.sun.star.uno.Exception;
import com.terrence.crm.common.util.ChineseCharToEn;
import com.terrence.crm.dol.base.BaseService;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.Admin;
import com.terrence.crm.dol.bean.ApproveMsg;
import com.terrence.crm.dol.bean.Bloc;
import com.terrence.crm.dol.bean.CollectPay;
import com.terrence.crm.dol.bean.Department;
import com.terrence.crm.dol.bean.Exchangerateentry;
import com.terrence.crm.dol.bean.Icbillno;
import com.terrence.crm.dol.bean.Message;
import com.terrence.crm.dol.bean.Order;
import com.terrence.crm.dol.bean.Organization;
import com.terrence.crm.dol.bean.ProcessExetask;
import com.terrence.crm.dol.bean.Product;
import com.terrence.crm.dol.bean.Productpl;
import com.terrence.crm.dol.bean.Province;
import com.terrence.crm.dol.bean.SysOrder;
import com.terrence.crm.dol.bean.security.AdminSession;
import com.terrence.crm.dol.dao.ICollectPayDao;
import com.terrence.crm.dol.dao.IMessageDao;
import com.terrence.crm.dol.dao.IProductDao;
import com.terrence.crm.dol.dao.IProductplDao;
import com.terrence.crm.dol.dao.ISysOrderDao;
import com.terrence.crm.dol.query.CollectPayQuery;
import com.terrence.crm.dol.query.ExchangerateentryQuery;
import com.terrence.crm.dol.query.IcbillnoQuery;
import com.terrence.crm.dol.query.MessageQuery;
import com.terrence.crm.dol.query.ProductQuery;
import com.terrence.crm.dol.query.ProductplQuery;
import com.terrence.crm.dol.query.SysOrderQuery;
import com.terrence.crm.dol.service.IAdminService;
import com.terrence.crm.dol.service.IApproveMsgService;
import com.terrence.crm.dol.service.IBlocService;
import com.terrence.crm.dol.service.ICollectPayService;
import com.terrence.crm.dol.service.IDepartmentService;
import com.terrence.crm.dol.service.IDutyService;
import com.terrence.crm.dol.service.IExchangerateentryService;
import com.terrence.crm.dol.service.IIcbillnoService;
import com.terrence.crm.dol.service.IOrganizationService;
import com.terrence.crm.dol.service.IPerformanceService;
import com.terrence.crm.dol.service.IProcessExetaskService;
import com.terrence.crm.dol.service.IProductService;
import com.terrence.crm.dol.service.IProductplService;
import com.terrence.crm.dol.service.IProvinceService;
import com.terrence.crm.dol.service.ISysOrderService;
import com.terrence.crm.dol.utils.ConfigTerrence;
import com.terrence.crm.dol.utils.DateUtil;
import com.terrence.crm.dol.utils.DateUtils;
import com.terrence.crm.dol.utils.OrgJsonUtil;
import com.terrence.crm.dol.utils.SpringSecurityUtils;
import com.terrence.crm.dol.utils.TREReturn;
import com.terrence.kee.base.bean.Seorder;
import com.terrence.kee.base.bean.SeorderEntry;
import com.terrence.kee.base.bean.TRpcontractScheme;
import com.terrence.kee.base.service.IItemOptService;
import com.terrence.kee.base.service.impl.ItemOptService;
import com.terrence.syncdb.entity.DDLType;
import com.terrence.syncdb.entity.SyncTable;
import com.terrence.syncdb.service.SyncService;
import com.terrence.syncdb.util.ConnectionUtil;

/**
 * 订单业务处理实现类
 * 
 * @author wangtongbo E-mail:tongbo.wang@terrence.com.cn
 * @version 创建时间：2014-5-30 下午3:36:39
 */
@Service
@Transactional
public class SysOrderService extends BaseService implements ISysOrderService {
	private SimpleDateFormat formt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	@Autowired
	@Qualifier("productService")
	private IProductService productService;
	@Autowired
	@Qualifier("processExetaskService")
	private IProcessExetaskService processExetaskService;
	@Autowired
	@Qualifier("departmentService")
	private IDepartmentService departmentService;
	@Autowired
	@Qualifier("provinceService")
	private IProvinceService provinceService;
	@Autowired
	@Qualifier("adminService")
	private IAdminService adminService;
	@Autowired
	@Qualifier("blocService")
	private IBlocService blocService;
	@Autowired
	@Qualifier("organizationService")
	private IOrganizationService organizationService;
	@Autowired
	@Qualifier("exchangerateentryService")
	private IExchangerateentryService exchangerateentryService;
	@Autowired
	@Qualifier("collectPayService")
	private ICollectPayService collectPayService;
	@Autowired
	@Qualifier("productplService")
	private IProductplService productplService;
	@Autowired
	@Qualifier("performanceService")
	private IPerformanceService performanceService;
	@Autowired
	@Qualifier("icbillnoService")
	private IIcbillnoService icbillnoService;
	@Autowired
	@Qualifier("approveMsgService")
	private IApproveMsgService approveMsgService;
	@Autowired
	@Qualifier("dutyService")
	private IDutyService dutyService;
	@Autowired
	private ISysOrderDao sysOrderDao;
	@Autowired
	private IProductDao productDao;
	@Autowired
	private ICollectPayDao collectPayDao;
	private SyncService syncService = new SyncService();
	@Autowired
	@Qualifier("productplDao")
	private IProductplDao productplDao;
	@Autowired
	@Qualifier("messageDao")
	private IMessageDao messageDao;
	@Override
	public Long save(SysOrder sysOrder) {
		return sysOrderDao.save(sysOrder);
	}

	public void updateSysOrder(SysOrder sysOrder) throws ServiceException {
		sysOrderDao.update(sysOrder);// 排产上更新操作
	}
	@Override
	public Long saveSysOrderList(List<SysOrder> sysOrderList) {
		//return sysOrderDao.saveSysOrderList(sysOrderList);
		 try {
			sysOrderDao.create(sysOrderList);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 return 1l;
	}
	
	/**
	 * 改变订单状态
	 */
	public void examineSysOrderInfo(SysOrderQuery sysOrderQuery,
			SysOrder sysOrder) throws ServiceException {
			AdminSession admin = (AdminSession) SecurityContextHolder
					.getContext().getAuthentication().getPrincipal();
			/*Long nowAdminDutyId = admin.getAdmin().getDutyid();
			Duty duty = dutyService.getById(nowAdminDutyId);*/
			// 根据职位id 查找职位名
			// 提交操作由订单管理员操作
			// 审核操作有财务审核员操作
			SimpleDateFormat formt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			sysOrder = getById(sysOrderQuery.getSysOrderId());
			int sysOrderStatus = sysOrderQuery.getSysOrderStatus();
			if (sysOrderStatus == 1) {// 提交系统订单
				if (null == sysOrder.getContractCode()
						|| "".equals(sysOrder.getContractCode())) {
					logger.error("系统订单的合同编号不能为空!");
					// Struts2Utils.renderJson("改变系统订单的状态只能是订单管理员或财务审核员！");
					/*
					 * resultInfo[0] = "-1"; resultInfo[1] = "系统订单的合同编号不能为空!";
					 * return JSON;
					 */
					throw new ServiceException("操作失败，原因：系统订单的合同编号不能为空!");
				}
			}
			//审核操作核算数据
			/**/if (sysOrderStatus == 2){
				//调用核算接口
				//从数据库找到当前订单关联产品的PL产品
				/*ProductQuery productQuery=new ProductQuery();
				productQuery.setOrderCode(sysOrder.getOrderCode());
				StringBuffer sb=new StringBuffer("");
				List<Product> productList=productService.findList(productQuery);
				setProductPlInfo(sb, productList);
				TREReturn returnInfo= performanceService.processBlance(sysOrder.getOrderCode(),
						sysOrder.getContractTime(),sysOrder.getBusinessUserId(),productList);
				if ("-1".equalsIgnoreCase(returnInfo.getnCode() )) {
					throw new ServiceException("操作失败，原因：" + returnInfo.getStrInfo());
				}*/
			}
			try {
				if (sysOrderStatus == 2
						|| sysOrderStatus == 3) {// 审核员审核或驳回操作
					// 同时保存审核意见
					ApproveMsg approveMsgentity = new ApproveMsg();
					approveMsgentity.setApprover(admin.getAdmin().getAdminName());
					approveMsgentity.setBillId(sysOrderQuery.getSysOrderId());
	
					approveMsgentity.setBillType(2);// 2系统订单
					if ("2".equals(sysOrderQuery.getSysOrderStatus() + "")) {
						approveMsgentity.setOptType(1);// 审核
					}
					if ("3".equals(sysOrderQuery.getSysOrderStatus() + "")) {
						approveMsgentity.setOptType(2);// 驳回
					}
					approveMsgentity.setApproverTime(DateUtil.GetDate2(DateUtil
							.GetDateTime(), "yyyy-MM-dd HH:mm:ss"));
					if (null != sysOrderQuery.getApproveCotent()) {
						approveMsgentity.setApproveCotent(sysOrderQuery
								.getApproveCotent());
					}
					approveMsgService.saveOrUpdate(approveMsgentity);
				}
				
			} catch (ServiceException e) {
				throw new ServiceException("操作失败，原因：" + e.getMessage());
			}
			
			//审核操作
			sysOrder.setExamineTime(formt.format(new Date()));
			//记录审核人WEB端和ERP中都需要存入
			sysOrder.setExamineUserName(admin.getAdmin().getAdminName());
			sysOrder.setExamineUserId(admin.getAdmin().getAdminId());
			
			sysOrder.setSysOrderStatus(sysOrderQuery.getSysOrderStatus());
		
			TREReturn returnInfoExam=updateOpt(sysOrder);
			if ("-1".equalsIgnoreCase(returnInfoExam.getnCode() )) {
				throw new ServiceException("操作失败，原因：" + returnInfoExam.getStrInfo());
			}
		
	}

	private void setProductPlInfo(StringBuffer sb, List<Product> productList) {
		if(null!=productList&&0<productList.size()){
			 for (int i = 0; i < productList.size(); i++) {
				 sb.append(productList.get(i).getProductId());
				 if(i!=(productList.size()-1)){//非最后一个
					 sb.append(",");
				 }
				 
			}
		}
		ProductplQuery productplQuery=new ProductplQuery();
		productplQuery.setProductIds(sb.toString());
		List<Productpl> productplList=productplService.findProductplId(productplQuery);
		
		if(null!=productList&&0<productList.size()){
			if(null!=productplList&&0<productplList.size()){
				for (Product product : productList) {
					List<Productpl> productpllistValue=new ArrayList<Productpl>();
					for (int i = 0; i < productplList.size(); i++) {
						if(product.getProductId()==productplList.get(0).getPdplid()){
							productpllistValue.add(i, productplList.get(0));
						}
					}
					product.setProductpllist(productpllistValue);
				}
			}
		}
	}

	/**
	 * 保存或修改系统订单
	 */
	public void saveOrUpdateSysOrder(SysOrder sysOrder, String products,
			String collectPays, String delcollectPays, String delproducts)
			throws ServiceException {
		Long id=null;
		if(sysOrder.getSysOrderId()!=null){
			id = sysOrder.getSysOrderId();
		}
		// 按照新流程添加和修改操作有订单管理员来操作
		AdminSession admin = (AdminSession) SecurityContextHolder.getContext()
				.getAuthentication().getPrincipal();
		/*Long nowAdminDutyId = admin.getAdmin().getDutyid();
		Duty duty = dutyService.getById(nowAdminDutyId);*/
		// 根据职位id 查找职位名
//		String dutyName = duty.getDutyname();
//		String dutykey = duty.getDutykey();
		if (null == sysOrder.getSysOrderId()) {
			setOrderCode(sysOrder);// 更具业务员设置单据编号
			// 查询合同编号是否存在
			SysOrderQuery sysorderQuery = new SysOrderQuery();
			sysorderQuery.setContractCode(sysOrder.getContractCode());
			List<SysOrder> sysorderList = findlistBySysOrderCode(sysorderQuery);
			if (null != sysorderList && 0 < sysorderList.size()) {
				/*
				 * resultInfo[0] = "-1"; resultInfo[1] = "当前单据的合同编号已经存在！";
				 * return JSON;
				 */
				throw new ServiceException("当前单据的合同编号已经存在！");
			}
			String productstring = sysOrder.getProductstring();
			if (null != productstring) {
				products = productstring;
			}
			sysOrder.setIssummary(0);
			saveTogather(sysOrder, products, collectPays);
		} else {
			if (null != sysOrder.getIssummary()
					&& "1".equals(sysOrder.getIssummary() + "")) {
				logger.error("该订单已经被汇总过,不允许再次修改!");
				/*
				 * resultInfo[0] = "-1"; resultInfo[1] = "该订单已经被汇总过,不允许再次修改!";
				 * return JSON;
				 */
				throw new ServiceException("该订单已经被汇总过,不允许再次修改!");
			}
			String productstring = sysOrder.getProductstring();
			if (null != productstring) {
				products = productstring;
			}
			updateTogather(sysOrder, products, collectPays, delcollectPays,
					delproducts);
		}
		if (null == id) {
			operationLogDao.save(ConfigTerrence.MODEL_SYSORDER, ConfigTerrence.OPT_ADD, "订单编号为："+sysOrder.getOrderCode()+"的系统订单添加成功，添加人为："+admin.getAdmin().getAdminName());
		}else{
			operationLogDao.save(ConfigTerrence.MODEL_SYSORDER, ConfigTerrence.OPT_EDIT, "订单编号为："+sysOrder.getOrderCode()+"的系统订单修改成功，修改人为："+admin.getAdmin().getAdminName());
		}
	}

	private void setOrderCode(SysOrder sysOrder) {
		// 新需求改为单据负责人为可以指定的
		// 替换订单编号
		// 显示今天时间
		Calendar a = Calendar.getInstance();
		String nowFullYear = a.get(Calendar.YEAR) + "";// 得到年

		IcbillnoQuery icbillnoQuery = new IcbillnoQuery();
		icbillnoQuery.setFpreletter("YX");
		Icbillno entity = icbillnoService.findBillno(icbillnoQuery);

		//ChineseCharToEn cte = new ChineseCharToEn();
		//String adminName = cte.getAllFirstLetter(sysOrder.getBusinessUser());// 单据负责人
		String adminName = getFirstSpell(sysOrder.getBusinessUser()).toUpperCase();
		String nowfbillno = entity.getNowfbillno() + "-" + adminName;
		if (null != sysOrder.getOrderCode()) {// 修改操作
			String orderCode = sysOrder.getOrderCode();
			String[] orderCodeArr = orderCode.split("-");
			if (null != orderCodeArr && 2 < orderCodeArr.length) {
				sysOrder.setOrderCode(orderCodeArr[0] + "-" + orderCodeArr[1]
						+ "-" + adminName);// 订单编号只改变人名
				sysOrder.setContractCode(orderCodeArr[0] + "-" + orderCodeArr[1]
				                           + "-" + adminName);// 订单编号只改变人名
				
			} else {
				sysOrder.setOrderCode(nowFullYear + "-" + nowfbillno);
				sysOrder.setContractCode(nowFullYear + "-" + nowfbillno);
			}
		} else {
			sysOrder.setOrderCode(nowFullYear + "-" + nowfbillno);// 按指定的单据负责人生成的单据编号
			sysOrder.setContractCode(nowFullYear + "-" + nowfbillno);
		}
		
	}
	/** 
     * 获取汉字串拼音首字母，英文字符不变 
     * @param chinese 汉字串 
     * @return 汉语拼音首字母 
     */ 
    public String getFirstSpell(String chinese) { 
            StringBuffer pybf = new StringBuffer(); 
            char[] arr = chinese.toCharArray(); 
            HanyuPinyinOutputFormat defaultFormat = new HanyuPinyinOutputFormat(); 
            defaultFormat.setCaseType(HanyuPinyinCaseType.LOWERCASE); 
            defaultFormat.setToneType(HanyuPinyinToneType.WITHOUT_TONE); 
            for (int i = 0; i < arr.length; i++) { 
                    if (arr[i] > 128) { 
                            try { 
                                    String[] temp = PinyinHelper.toHanyuPinyinStringArray(arr[i], defaultFormat); 
                                    if (temp != null) { 
                                            pybf.append(temp[0].charAt(0)); 
                                    } 
                            } catch (BadHanyuPinyinOutputFormatCombination e) { 
                                    e.printStackTrace(); 
                            } 
                    } else { 
                            pybf.append(arr[i]); 
                    } 
            } 
            return pybf.toString().replaceAll("\\W", "").trim(); 
    } 
	public TREReturn updateOpt(SysOrder sysOrder) throws ServiceException  {
		TREReturn ret=new TREReturn();
		try {
			if (sysOrder.getSysOrderStatus().intValue() == 2) {// 审核操作
				sysOrder.setChangeAreaType(1);// 可变范围 0非重要 1重要
				if ("2".equals(sysOrder.getSysOrderStatus() + "")) {
					sysOrder.setSysOrderStatus(100);// 审核
				}
				sysOrderDao.update(sysOrder);// 排产上更新操作
				
				//查找汇率值
				ExchangerateentryQuery exchangerateentryQuery = new ExchangerateentryQuery();
				List<Exchangerateentry> exchangerateentryList = 
					exchangerateentryService.findList(exchangerateentryQuery);
				if(null!=exchangerateentryList&&0<exchangerateentryList.size()){
					sysOrder.setExchangeRateValue(exchangerateentryList.get(0).getFexchangerate()+"");
					sysOrder.setExchangeRateNumber(exchangerateentryList.get(0).getFnumber());
				}else{
					ret.setnCode("-1");
					ret.setStrInfo( "汇率不存在,请联系管理员先设置汇率!");
					return ret;
					/*throw new RuntimeException(
					   "汇率不存在,请联系管理员先设置汇率!" );*/
				}
				examSynERPOpt(sysOrder);
				//原审核同步操作
				//examSynERP(sysOrder);
				ret.setnCode("0");
			} else {// 非审核操作,驳回只更新WEB端
				sysOrder.setExamineTime(formt.format(new Date()));
				sysOrderDao.update(sysOrder);
			}
			
		} catch (ServiceException e) {
			ret.setnCode("-1");
			ret.setStrInfo( "系统错误:"+e.getMessage());
			return ret;
		}
		 catch (DataAccessException e) {
			ret.setnCode("-1");
			ret.setStrInfo( "系统错误:"+e.getMessage());
			return ret;
		}
		return ret;
		
	}

	private void examSynERPOpt(SysOrder sysOrder) throws ServiceException {
		List<SyncTable> syncTables = new ArrayList<SyncTable>();// 同步列表
		// 获取要同步的此订单的产品信息
		ProductQuery pQuery = new ProductQuery();
		pQuery.setOrderCode(sysOrder.getOrderCode());
		List<Product>  products = productDao.findList(pQuery);// 得到系统订单关联的产品
		if (null != products && !products.equals("")) {
			List<Product> productList =  products ;
			syncTables.add(parseToInitID("t_RPContract"));// K3 t_RPContract合同表
			syncTables.add(parseToContractExam(sysOrder, productList,
					DDLType.INSERT, false));// 组装K3合同表需要的数据 及 操作类型为插入

			syncTables.add(parseToInitID("SEOrder"));// K3 SEOrder 订单表
			syncTables.add(parseToOrderExam(sysOrder, DDLType.INSERT, false));// 组装K3订单表需要的数据
			// 及
			// 操作类型为插入
			int i=0;
			for (Product product : productList) {
				i++;
				if(i%5000==0){
					try {
						Thread.currentThread().sleep(10000);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					System.out.println("休息10s");
				}
				String pLProducts=product.getpLProducts();
				if(null!=pLProducts&&""!=pLProducts){
					product.setIspl(1);
				}else{
					product.setIspl(0);
				}

				syncTables.add(parseToContractEntryExam(sysOrder, product,// 组装K3合同实体表需要的数据
						// 及
						// 操作类型为插入
						DDLType.INSERT));
				syncTables.add(parseToSeOrderEntryExam(sysOrder, product,// 组装K3订单实体表需要的数据
						// 及
						// 操作类型为插入
						DDLType.INSERT));
			}
		}
		// 获取要同步的此订单的应收款信息
		CollectPayQuery cPayQuery = new CollectPayQuery();
		cPayQuery.setOrderCode(sysOrder.getOrderCode());
		List<CollectPay> collectPays = collectPayDao.findList(cPayQuery);// 得到系统订单关联的收款计划表
		
		if (null != collectPays && !collectPays.equals("")) {// web端应收款管理表
			List<CollectPay> collectPayList =  collectPays;
			for (CollectPay collectPay : collectPayList) {
				// 收款管理类历史表
				syncTables.add(parseToRPContractSchemeExam(sysOrder, collectPay,// 组装K3收款计划表需要的数据
						// 及
						// 操作类型为插入
						DDLType.INSERT));
			}
		}
		// 同步数据之前加上判断订单编号和合同编号
		   SyncTable queryTable = new SyncTable();
		   queryTable.setTableName("SEOrder");
		   queryTable.setDdlType(DDLType.QUERY);
		   JSONObject queryWherejo = new JSONObject();
		   queryWherejo.put("FBillNo", sysOrder.getOrderCode());
		   queryWherejo.put("FVersionNo", sysOrder.getContractVersion());
		   queryTable.setWheres(queryWherejo); 
		   Map<String, Object> map = syncService.queryForObject(queryTable, "FInterID");
		   System.out.println(map.get("data")); 
		   Long finterId = 0L;
		   if(null!=map.get("data")){ 
			   finterId =Long.valueOf(String.valueOf(map.get("data"))); 
		   }
		   if(0<finterId){//说明存在
			   throw new RuntimeException( "订单编号为"+sysOrder.getOrderCode()+"且版本号为"+sysOrder.getContractVersion()+"的订单在ERP中已经存在!" );
		   }
		 
		   // 合同编号
		   SyncTable queryTableContract = new SyncTable();
		   queryTableContract.setTableName("t_RPContract");
		   queryTableContract.setDdlType(DDLType.QUERY);
		   
		   /**先查询ERP表中有没有此合同表编号，如果有则将原来的合同表中的合同号改为：合同号_版本号*/
		   //开始
		   JSONObject queryWherejoContract1 = new JSONObject();
		   queryWherejoContract1.put("FContractNo", sysOrder.getContractCode());
		   queryTableContract.setWheres(queryWherejoContract1); 
		   Map<String,Object> mapContract1 = syncService.queryForObject(queryTableContract,"FVersionNo"); 
		   System.out.println(mapContract1.get("data")); 
		   String version = ""; 
		   if(null!=mapContract1.get("data")&&sysOrder.getChangeordercode()!=null){
			   version = String.valueOf(mapContract1.get("data"));
			   String newno = sysOrder.getChangeordercode()+"_"+version;
			   String sql = "update t_RPContract set fbrID=0,FContractNo='"+newno+"',fchangemark=1,FRP=1 where FContractNo='"+sysOrder.getChangeordercode()+"' and FVersionNo='"+version+"'";
			   Connection conn = ConnectionUtil.getConnection();
			   PreparedStatement ps = null;
			   ResultSet rs = null;
			   try {
					ps = conn.prepareStatement(sql);
					//设置参数值
					ps.executeUpdate();//执行sql
				} catch (java.lang.Exception e) {
					throw new RuntimeException(e);
				} finally{
					ConnectionUtil.close(rs);
					ConnectionUtil.close(ps);
					ConnectionUtil.close(conn);
				}
			   /*List<SyncTable> syncTabs = new ArrayList<SyncTable>();
			   syncTabs.add(parseToContractUpdate(sysOrder.getContractCode(),version,DDLType.UPDATE));
			   // 组装表
			   Map<String, Object> resultMap = syncService.sync(syncTabs);
			   if(!(Boolean)resultMap.get("result")){ throw new RuntimeException(
					   (String)resultMap.get("resultinfo") ); }*/
		   }
		   //结束
		   JSONObject queryWherejoContract = new JSONObject();
		   queryWherejoContract.put("FContractNo", sysOrder.getContractCode());
		   queryWherejoContract.put("FVersionNo", sysOrder.getContractVersion());
		   queryTableContract.setWheres(queryWherejoContract); 
		   Map<String,Object> mapContract = syncService.queryForObject(queryTableContract,"FContractID"); 
		   System.out.println(mapContract.get("data")); 
		   Long finterIdContract = 0L; 
		   if(null!=mapContract.get("data")){
			   finterIdContract = Long.valueOf(String.valueOf(mapContract.get("data")));
		   }
		   if(0<finterIdContract){//说明存在 
			   throw new RuntimeException("合同编号为"+sysOrder.getOrderCode()+"且版本号为"+sysOrder.getContractVersion()+"的合同在ERP中已经存在!"  ); 
		   }
		  
		// 同时会同步K3
		  /**/Map<String, Object> resultMap = syncService.sync(syncTables);//排产保存操作
		  if(!(Boolean)resultMap.get("result")){ 
			  throw new RuntimeException(
		       (String)resultMap.get("resultinfo") 
		     ); 
	      }
		
	}

	private void examSynERP(SysOrder sysOrder) {
		// 组装的同步表列表
		List<SyncTable> syncTables = new ArrayList<SyncTable>();// SyncTable自定义对象
		// 组装表 ,KE销售订单
		SyncTable orderExamineTable = new SyncTable();
		orderExamineTable.setTableName("SEOrder");// 表名称K3销售订单表
		orderExamineTable.setDdlType(DDLType.UPDATE);// 操作类型更新

		JSONObject columnJo = new JSONObject();

		columnJo.put("fstatus", 1);// 状态 审核为1，关闭为3
		columnJo.put("fcheckdate", sysOrder.getExamineTime());// 审核日期审核时修改
		orderExamineTable.setColumns(columnJo);

		// 关联的字段对应
		List<JSONObject> refers = new ArrayList<JSONObject>();

		/**
		 * 组装关联对象
		 * 
		 * @param referTable
		 *            关联表//t_user K3中用户表
		 * @param resultName
		 *            查询的列//FUserId
		 * @param distName
		 *            添加的表中对应的列//FCheckerID
		 * @param queryName
		 *            查询的依据字段//FName
		 * @param queryValue
		 *            查询的依据字段的值
		 * @return 关联对象//
		 * **/

		/*
		 * refers.add(syncService.parseToRefer("t_user",
		 * "FUserId","FCheckerID"
		 * ,"FName",sysOrder.getBusinessUser()));//审核人ID
		 * orderExamineTable.setRefers(refers);
		 */

		refers.add(syncService.parseToRefer("t_user", "FUserId",
				"FCheckerID", "FName", sysOrder.getExamineUserName()));// 审核人ID
		orderExamineTable.setRefers(refers);

		// where条件
		JSONObject whereorderjo = new JSONObject();
		whereorderjo.put("FBillNo", sysOrder.getOrderCode());
		whereorderjo.put("FVersionNo", sysOrder.getContractVersion());

		orderExamineTable.setWheres(whereorderjo);// where 条件

		syncTables.add(orderExamineTable);// 将同步到K3中的所需的对象放到List
		// 同时将订单关联的合同置为已审核

		// 组装表 ,KE销售合同
		SyncTable rPContractTable = new SyncTable();
		rPContractTable.setTableName("t_RPContract");// 表名称K3销售合同表
		rPContractTable.setDdlType(DDLType.UPDATE);// 操作类型更新

		JSONObject columnJoRPContract = new JSONObject();
		columnJoRPContract.put("fstatus", 1);// 状态 审核为1，关闭为3
		columnJoRPContract.put("FCheckDate", sysOrder.getExamineTime());// 审核日期审核时修改
		rPContractTable.setColumns(columnJoRPContract);

		// 关联的字段对应
		List<JSONObject> rPContractRefers = new ArrayList<JSONObject>();
		rPContractRefers.add(syncService.parseToRefer("t_user", "FUserId",
				"FChecker", "FName", sysOrder.getExamineUserName()));// 审核人ID
		rPContractRefers.add(syncService.parseToRefer("t_user", "FUserId",
				"FXItemID", "FName", sysOrder.getExamineUserName()));// 审核人ID
		rPContractTable.setRefers(rPContractRefers);

		// where条件
		JSONObject whereRPContractjo = new JSONObject();
		whereRPContractjo.put("FContractNo", sysOrder.getContractCode());// 应该唯一
		// whereRPContractjo.put("FTEX5", sysOrder.getCustomContractCode());
		rPContractTable.setWheres(whereRPContractjo);// where 条件

		syncTables.add(rPContractTable);// 将同步到K3中的所需的对象放到List

		Map<String, Object> resultMap = syncService.sync(syncTables);
		if (!(Boolean) resultMap.get("result")) {
			System.out.println("error message:" + resultMap.get("error"));
			throw new RuntimeException((String) resultMap.get("resultinfo"));
		}
	}

	/**
	 * 组装同步表
	 * 
	 * @param sysOrder
	 *            需要同步的系统订单 SysOrder sysOrder, 数据库中的 List<Product>
	 *            backupProducts, 数据库中的 List<CollectPay> backupCollectPays,数据库中的
	 * 
	 *            List<Product> productList, 页面中的 List<CollectPay>
	 *            collectPayList 页面中的
	 * @return 同步表列表
	 */
	private List<SyncTable> parseToSyncTables(SysOrder sysOrder,
			List<Product> backupProducts, List<CollectPay> backupCollectPays,
			List<Product> productList, List<CollectPay> collectPayList) {
		// 获取要同步的系统订单
		SysOrder sysOrderTemp = sysOrderDao.getById(sysOrder.getSysOrderId());// 数据库中的
		if (null != sysOrder.getContractOldCode()
				&& (!sysOrder.getContractOldCode().equals(
						sysOrder.getContractCode()))) {
			// 修改的合同编号与旧的不一样
			sysOrderTemp.setContractOldCode(sysOrder.getContractOldCode());// 老合同单号
			sysOrderTemp.setContractCode(sysOrder.getContractCode());// 新合同单号
		}
		if (null != sysOrder.getExchangeRate()) {
			sysOrderTemp.setExchangeRate(sysOrder.getExchangeRate());// 汇率文本
		}
		if (null != sysOrder.getExchangeRateValue()) {
			sysOrderTemp.setExchangeRateValue(sysOrder.getExchangeRateValue());// 计算本位币用
		}
		if (null != sysOrder.getExchangeRateNumber()) {
			sysOrderTemp
					.setExchangeRateNumber(sysOrder.getExchangeRateNumber());// 同步用
		}

		if (!"2".equals(sysOrderTemp.getSysOrderStatus())) {
			AdminSession admin = (AdminSession) SecurityContextHolder
					.getContext().getAuthentication().getPrincipal();
			sysOrderTemp.setUserName(admin.getAdmin().getAdminName());// 制单人
		}

		// 组装的同步表列表
		List<SyncTable> syncTables = new ArrayList<SyncTable>();
		/**
		 * 如果客户没有 则插入一条 SyncTable sysCustomTable = new SyncTable(); JSONObject
		 * sysCustomJo = new JSONObject(); sysCustomJo.put("fitemclassid",
		 * 3014); sysCustomJo.put("FExternID", -1); sysCustomJo.put("FName",
		 * sysOrderTemp.getSystemConsumer()); JSONObject wherejo = new
		 * JSONObject(); wherejo.put("FName", sysOrderTemp.getSystemConsumer());
		 * wherejo.put("fitemclassid", 3014); sysCustomTable.setWheres(wherejo);
		 * sysCustomTable.setColumns(sysCustomJo);
		 * sysCustomTable.setDuplicate(true);
		 * sysCustomTable.setDreferAlias("sysCustom");
		 * sysCustomTable.setDrefer("fitemid");
		 * sysCustomTable.setDdlType(DDLType.INSERT);
		 * sysCustomTable.setTableName("t_item");
		 * syncTables.add(sysCustomTable);
		 */

		/**
		 * ------------------------------------------------------------------合同表
		 * 开始 ------------------------------------------------------------------
		 * -- ----------
		 */
		syncTables.add(parseToInitID("t_RPContract"));

		if (sysOrder.getContractVersion().equals("-1")) {// -1第一个版本,保存
			syncTables.add(parseToContract(sysOrderTemp, productList,
					DDLType.INSERT, false));
			for (Product product : productList) {
				syncTables.add(parseToContractEntry(sysOrderTemp, product,
						DDLType.INSERT));
			}
		} else {// 第二个版本 更新
			syncTables.add(parseToContract(sysOrderTemp, productList,
					DDLType.UPDATE, false));
			for (Product product : productList) {
				if (null != product.getProductId()
						&& !sysOrder.getContractVersion().equals("-1")) {
					syncTables.add(parseToContractEntry(sysOrderTemp, product,
							DDLType.UPDATE));
				} else {
					syncTables.add(parseToContractEntry(sysOrderTemp, product,
							DDLType.INSERT));
				}
			}
			syncTables.add(parseToContract(sysOrder, backupProducts,
					DDLType.INSERT, true));
			for (Product product : backupProducts) {
				syncTables.add(parseToContractEntry(sysOrder, product,
						DDLType.INSERT));
			}
		}

		/**
		 * ------------------------------------------------------------------合同表
		 * 结束 ------------------------------------------------------------------
		 * -- --------------
		 */
		/**
		 * ------------------------------------------------------------------
		 * 销售订单表
		 * 开始--------------------------------------------------------------
		 * ----------------
		 */
		/**
		 * if(!sysOrderTemp.getContractVersion().trim().equals("001")){ //组装表
		 * SyncTable orderTable = new SyncTable();
		 * orderTable.setTableName("SEOrder");//表名称
		 * orderTable.setDdlType(DDLType.UPDATE);//操作类型 JSONObject columnJo =
		 * new JSONObject(); columnJo.put("fstatus",
		 * sysOrderTemp.getSysOrderStatus().intValue()==2?1:0);
		 * columnJo.put("FChangeMark",1);//变更标志 columnJo.put("FCancellation",
		 * 1);//作废 columnJo.put("FSelTranType", 0);
		 * orderTable.setColumns(columnJo); //where条件 JSONObject whereorderjo =
		 * new JSONObject(); whereorderjo.put("FBillNo",
		 * sysOrderTemp.getOrderCode()); orderTable.setWheres(whereorderjo);
		 * syncTables.add(orderTable); }
		 */

		syncTables.add(parseToInitID("SEOrder"));
		if (sysOrder.getContractVersion().equals("-1")) {
			syncTables.add(parseToOrder(sysOrderTemp, DDLType.INSERT, false));
			for (Product product : productList) {
				syncTables.add(parseToSeOrderEntry(sysOrderTemp, product,
						DDLType.INSERT));
			}
		} else {
			syncTables.add(parseToOrder(sysOrderTemp, DDLType.UPDATE, false));
			for (Product product : productList) {
				if (null != product.getProductId()
						&& !sysOrder.getContractVersion().equals("-1")) {
					syncTables.add(parseToSeOrderEntry(sysOrderTemp, product,
							DDLType.UPDATE));
				} else {
					syncTables.add(parseToSeOrderEntry(sysOrderTemp, product,
							DDLType.INSERT));
				}
			}
			syncTables.add(parseToOrder(sysOrder, DDLType.INSERT, true));
			for (Product product : backupProducts) {
				syncTables.add(parseToSeOrderEntry(sysOrder, product,
						DDLType.INSERT));
			}
		}
		/**
		 * ------------------------------------------------------------------
		 * 销售订单表
		 * 结束--------------------------------------------------------------
		 * ----------------
		 */
		/**
		 * ------------------------------------------------------------------
		 * 应收款管理表
		 * 开始--------------------------------------------------------------
		 * ----------------
		 */
		// syncTables.add(parseToInitID("t_RPContractScheme"));
		if (null != collectPayList && !collectPayList.equals("")) {
			for (CollectPay collectPay : collectPayList) {
				syncTables.add(parseToRPContractScheme(sysOrderTemp,
						collectPay, DDLType.INSERT));
			}
		}
		/**
		 * ------------------------------------------------------------------
		 * 应收款管理表
		 * 结束--------------------------------------------------------------
		 * ----------------
		 */
		/**
		 * ------------------------------------------------------------------
		 * 变更记录表 ICOrderAlter 是ERP中的
		 * 开始--------------------------------------------------------------
		 * ----------------
		 */
		int newLen = 0;
		int oldLen = 0;
		if (null != productList) {
			newLen = productList.size();
		}
		if (null != backupProducts) {
			oldLen = backupProducts.size();
		}
		int len = newLen > oldLen ? newLen : oldLen;

		for (int i = 0; i < len; i++) {
			if (i < newLen && i < oldLen) {
				if (productList.get(i).getProductCount().intValue() != backupProducts
						.get(i).getProductCount().intValue()) {
					syncTables.add(parseToICOrderAlter("Fauxqty", "数量",
							"SEOrderEntry", 81, sysOrderTemp, productList
									.get(i), backupProducts.get(i), productList
									.get(i).getProductCount()
									+ "", backupProducts.get(i)
									.getProductCount()
									+ "", DDLType.INSERT, "修改"));
					syncTables.add(parseToICOrderAlter("数量", "FQuantity",
							"t_RPContract", 1000019, sysOrderTemp, productList
									.get(i), backupProducts.get(i), productList
									.get(i).getProductCount()
									+ "", backupProducts.get(i)
									.getProductCount()
									+ "", DDLType.INSERT, "Modify"));
				}
				if (productList.get(i).getTaxRate().floatValue() != backupProducts
						.get(i).getTaxRate().floatValue()) {
					syncTables.add(parseToICOrderAlter("FCess", "税率",
							"SEOrderEntry", 81, sysOrderTemp, productList
									.get(i), backupProducts.get(i), productList
									.get(i).getTaxRate()
									+ "", backupProducts.get(i).getTaxRate()
									+ "", DDLType.INSERT, "修改"));
				}
				if (null != productList.get(i).getOutSaleName()) {
					if (!productList.get(i).getOutSaleName().equals(
							backupProducts.get(i).getOutSaleName())) {
						syncTables.add(parseToICOrderAlter("FEntrySelfS0165",
								"对外销售名称", "SEOrderEntry", 81, sysOrderTemp,
								productList.get(i), backupProducts.get(i),
								productList.get(i).getOutSaleName() + "",
								backupProducts.get(i).getOutSaleName() + "",
								DDLType.INSERT, "修改"));
						syncTables.add(parseToICOrderAlter("对外销售名称", "FText3",
								"t_RPContract", 1000019, sysOrderTemp,
								productList.get(i), backupProducts.get(i),
								productList.get(i).getOutSaleName() + "",
								backupProducts.get(i).getOutSaleName() + "",
								DDLType.INSERT, "Modify"));
					}
				}
				if (null != productList.get(i).getProProjectName()) {
					if (!productList.get(i).getProProjectName().equals(
							backupProducts.get(i).getProProjectName())) {
						syncTables.add(parseToICOrderAlter("FEntrySelfS0163",
								"项目名称", "SEOrderEntry", 81, sysOrderTemp,
								productList.get(i), backupProducts.get(i),
								productList.get(i).getProProjectName() + "",
								backupProducts.get(i).getProProjectName() + "",
								DDLType.INSERT, "修改"));
					}
				}

			}
		}
		/**
		 * ------------------------------------------------------------------
		 * 变更记录表
		 * 结束--------------------------------------------------------------
		 * ----------------
		 */
		return syncTables;
	}

	private SyncTable parseToICOrderAlter(String fieldName,
			String changeFieldName, String changeTableName, Integer fBillType,
			SysOrder sysOrderTemp, Product newProduct, Product oldProduct,
			String newValue, String oldValue, String ddlType, String changeType) {
		Long finterId = 0L;
		SyncTable queryTable = new SyncTable();
		if (changeTableName.equals("SEOrderEntry")) {
			queryTable.setTableName("SEOrder");
			queryTable.setDdlType(DDLType.QUERY);
			JSONObject queryWherejo = new JSONObject();
			queryWherejo.put("FBillNo", sysOrderTemp.getOrderCode());
			Integer version = Integer.valueOf(sysOrderTemp.getContractVersion()
					.substring(0, sysOrderTemp.getContractVersion().length())) - 1;
			if (String.valueOf(version).length() == 1) {
				queryWherejo.put("FVersionNo", "00" + version);
			} else if (String.valueOf(version).length() == 2) {
				queryWherejo.put("FVersionNo", "0" + version);
			} else {
				queryWherejo.put("FVersionNo", version);
			}
			queryTable.setWheres(queryWherejo);
			Map<String, Object> map = syncService.queryForObject(queryTable,
					"FInterID");
			System.out.println(map.get("data"));
			if (null != map.get("data")) {
				finterId = Long.valueOf(String.valueOf(map.get("data")));
			}

		} else {
			queryTable.setTableName("t_RPContract");
			queryTable.setDdlType(DDLType.QUERY);
			JSONObject queryWherejo = new JSONObject();
			queryWherejo.put("FContractNo", sysOrderTemp.getContractCode());
			Integer version = Integer.valueOf(sysOrderTemp.getContractVersion()
					.substring(0, sysOrderTemp.getContractVersion().length())) - 1;
			if (String.valueOf(version).length() == 1) {
				queryWherejo.put("FVersionNo", "00" + version);
			} else if (String.valueOf(version).length() == 2) {
				queryWherejo.put("FVersionNo", "0" + version);
			} else {
				queryWherejo.put("FVersionNo", version);
			}
			queryTable.setWheres(queryWherejo);
			Map<String, Object> map = syncService.queryForObject(queryTable,
					"FContractID");
			System.out.println(map.get("data"));
			if (null != map.get("data")) {
				finterId = Long.valueOf(String.valueOf(map.get("data")));
			}
		}
		SyncTable syncTable = new SyncTable();
		syncTable.setTableName("ICOrderAlter");
		syncTable.setDdlType(ddlType);
		// 表字段对应
		JSONObject columnjo = new JSONObject();
		columnjo.put("FFieldName", fieldName);// 列名
		columnjo.put("FChangeField", changeFieldName);// 变更列的名称
		columnjo.put("FEChangeValue", newValue);// 新数据
		columnjo.put("FBChangeValue", oldValue);// 旧数据
		columnjo.put("FItemName", newProduct.getProductName());// 物料名称
		columnjo.put("FNumbers", newProduct.getProductCode());// 物料编码
		columnjo.put("FChangeType", changeType);// 变化类型
		if (changeType.equals("修改") || changeType.equals("删除")
				|| changeType.equals("Modify")) {
			columnjo.put("FoldNo", newProduct.getOrderTrNumber());// 行号
		} else {
			columnjo.put("FoldNo", 99999);// 行号
		}
		columnjo.put("FInterID", finterId);// 订单内码
		columnjo.put("FBillType", fBillType);//
		columnjo.put("FVersionNo", newProduct.getProductVersion());// 版本号
		columnjo.put("FTableName", changeTableName);// 变更的表名
		columnjo.put("FChangeDate", formt.format(new Date()));// 变更时间
		if (changeTableName.equals("SEOrderEntry")) {
			columnjo.put("FChangeUser", sysOrderTemp.getChangeUserName());// 变更人
		} else {
			// 关联的字段对应
			List<JSONObject> refers = new ArrayList<JSONObject>();
			/**/
			refers.add(syncService.parseToRefer("t_user", "FUserID",
					"FChangeUser", "FName", sysOrderTemp.getChangeUserName()));// 变更人
			/*
			 * refers.add(syncService.parseToRefer("t_user", "FUserID",
			 * "FChangeUser", "FName", "顾文勇" ));// 变更人
			 */
			// columnjo.put("FChangeUser", sysOrderTemp.getChangeUserId());//变更人
			syncTable.setRefers(refers);
		}
		columnjo.put("FChangeCauses", sysOrderTemp.getChangeReason());// 变更原因
		syncTable.setColumns(columnjo);

		return syncTable;
	}

	/**
	 * 初始化ID
	 * 
	 * @param tableName
	 *            需要初始化ID的表明
	 * @return 同步表
	 */
	private SyncTable parseToInitID(String tableName) throws ServiceException {
		// 组装表
		SyncTable indexOrderTable = new SyncTable();
		indexOrderTable.setTableName("icmaxnum");// 表名称
		indexOrderTable.setDdlType(DDLType.UPDATE);// 操作类型

		// where条件
		JSONObject whereorderjo = new JSONObject();
		whereorderjo.put("ftablename", tableName);

		indexOrderTable.setWheres(whereorderjo);
		return indexOrderTable;
	}
	/**
	 * 组装合同表
	 * 
	 * @param syncTables
	 *            组装的合同列表
	 * @param sysOrderTemp
	 *            需要同步的系统订单
	 * @param products
	 *            产品列表
	 */
	private SyncTable parseToContractExam(SysOrder sysOrderTemp,
			List<Product> products, String ddlType, Boolean isCopy)
			throws ServiceException {
		// 组装表
		SyncTable contractTable = new SyncTable();

		contractTable.setTableName("t_RPContract");// 表名称
		contractTable.setDdlType(ddlType);// 操作类型

		// 如果是删除操作
		if (ddlType.equals(DDLType.DELETE)) {
			List<JSONObject> delrefers = new ArrayList<JSONObject>();

			delrefers.add(syncService.parseToRefer("t_RPContract",
					"FContractID", "FContractID", "FContractNo", sysOrderTemp
							.getContractCode()));// 合同内码

			contractTable.setRefers(delrefers);
			return contractTable;
		}

		// 表字段对应
		JSONObject contractcolumnjo = new JSONObject();

		contractcolumnjo.put("fbrID", "0");// 分支机构

		String fContractNo = sysOrderTemp.getContractVersion();
		contractcolumnjo.put("FVersionNo", fContractNo);// 合同版本号

		if (isCopy) {
			fContractNo = sysOrderTemp.getContractCode() + "_" + fContractNo;
			contractcolumnjo.put("FContractNo", fContractNo);// 合同编码
			contractcolumnjo.put("fchangemark", 1);// 变更标志
		} else {
			contractcolumnjo.put("FContractNo", sysOrderTemp.getContractCode());// 合同编码
			contractcolumnjo.put("FChangeDate", sysOrderTemp.getChangeTime());// 变更时间
			contractcolumnjo.put("FChangeUser", sysOrderTemp.getChangeUserId());// 变更人ID
			contractcolumnjo.put("fchangemark", 0);// 变更标志
		}
		contractcolumnjo.put("FRP", 1);// 系统类型 默认值 固定是1
		contractcolumnjo.put("fdate", sysOrderTemp.getContractTime());// 制单日期

		float totalFee = 0;
		for (Product product : products) {
			totalFee += product.getTotalFee();
		}
		contractcolumnjo.put("FTotalAmountFor", totalFee);// 合同原币金额
		Float exchangeRate = Float.valueOf(sysOrderTemp.getExchangeRateValue());
		Float fTotalAmount = MathUtils.multiply(totalFee, exchangeRate)
				.floatValue();// 合同本币金额
		contractcolumnjo.put("FTotalAmount", fTotalAmount);// 合同本币金额

		contractcolumnjo.put("FContractTypeID", 1);// 合同类型代码 默认值 固定为1
		contractcolumnjo.put("FContractName", sysOrderTemp.getContractName());// 合同名称
		contractcolumnjo.put("FText", sysOrderTemp.getRemarks());// 附注
		contractcolumnjo.put("FItemClassID", 1);// 核算类型内码 可修改（客户1，供应商8）
		if(null!=sysOrderTemp.getExamineTime()&&!"".equalsIgnoreCase(sysOrderTemp.getExamineTime())){
			contractcolumnjo.put("FCheckDate", sysOrderTemp.getExamineTime());// 审核日期
		}
		contractcolumnjo.put("fstatus", sysOrderTemp.getSysOrderStatus()
				.intValue() == 2 ? 1 : 0);// 状态 审核为1 关闭为3
		// sysOrderTemp.getSysOrderStatus().intValue()-1

		contractcolumnjo.put("FSystemType", 1);// 系统类型 默认值 固定是1
		contractcolumnjo.put("FClassTypeID", 1000019);// 单据类型 默认值 固定位1000019
		contractcolumnjo.put("FConnectFlag", 1);// 关联标志
		contractcolumnjo.put("FCheckDate", sysOrderTemp.getExamineTime());// 审核日期
		contractcolumnjo.put("FSysStatus", 2);// 整单折扣参数 目前不知道数据来源
		contractcolumnjo.put("FExchangeRateType", 1);// 汇率类型 默认值 固定为1

		String contractTypeName;
		if (sysOrderTemp.getContractType().equals("1")) {
			contractTypeName = "年度合同";
		} else if (sysOrderTemp.getContractType().equals("2")) {
			contractTypeName = "合同正本";
		} else {
			contractTypeName = "内部订单";
		}
		contractcolumnjo.put("FTEXT4", contractTypeName);// 合同分类
		contractcolumnjo.put("FTEXT5", sysOrderTemp.getCustomContractCode());// 客户合同编号

		// 关联的字段对应
		List<JSONObject> contractrefers = new ArrayList<JSONObject>();
		// FContractID
		/**
		 * 组装关联对象 5字段
		 * 
		 * @param referTable
		 *            ERP中关联表
		 * @param resultName
		 *            ERP中查询的列
		 * @param distName
		 *            添加的表中对应的列
		 * @param queryName
		 *            查询的依据字段
		 * @param queryValue
		 *            查询的依据字段的值
		 * @return 关联对象
		 * **/
		// SELECT fmaxnum,*
		// FROM [AIS20120813194456].[dbo].[icmaxnum] where
		// FTableName='t_RPContract'
		// FContractID=上面读出的fmaxnum值,因为合同表中需要存FContractID这个值
		if (ddlType.equals(DDLType.INSERT)) {
			contractrefers.add(syncService.parseToRefer("icmaxnum", "fmaxnum",
					"FContractID", "ftablename", "t_RPContract"));// 合同内码
		}
		//
		contractrefers.add(syncService.parseToRefer("t_Currency",
				"fcurrencyid", "fcurrencyid", "FNumber", sysOrderTemp
						.getCoinType()));// 币种ID

		/*
		 * contractrefers.add(syncService.parseToRefer("t_ExchangeRateEntry",
		 * "FExchangeRate", "FExchangeRate", "FNumber", sysOrderTemp
		 * .getExchangeRate()));// 汇率ID
		 */contractrefers.add(syncService.parseToRefer("t_ExchangeRateEntry",
				"FExchangeRate", "FExchangeRate", "FNumber", sysOrderTemp
						.getExchangeRateNumber()));// 汇率ID

		JSONObject customjo = new JSONObject();
		customjo.put("fitemclassid", 1);
		// 组装关联对象6字段
		// customjo第二个where 条件
		contractrefers
				.add(syncService.parseToRefer("t_Item", "fitemid", "FCustomer",
						"FName", sysOrderTemp.getCheckProject(), customjo));// 客户

		/*
		 * contractrefers.add(syncService.parseToRefer("t_Department",
		 * "fitemid", "FDepartment", "FName", sysOrderTemp.getDepartment()));//
		 * 部门 modify by tly
		 */
		contractrefers.add(syncService.parseToRefer("t_Department", "fitemid",
				"FDepartment", "FName", sysOrderTemp.getDepartment()));// 部门
		// modify
		// by
		// tly

		contractrefers.add(syncService.parseToRefer("t_Emp", "fitemid",
				"FEmployee", "FName", sysOrderTemp.getBusinessUser()));// 业务员ID

		/*
		 * contractrefers.add(syncService.parseToRefer("t_user", "fuserid",
		 * "FXItemID", "FName", sysOrderTemp.getBusinessUser()));// 审核人ID
		 */
		if(null!=sysOrderTemp.getExamineUserName()&&!"".equalsIgnoreCase(sysOrderTemp.getExamineUserName())){
			contractrefers.add(syncService.parseToRefer("t_user", "fuserid",
					"FXItemID", "FName", sysOrderTemp.getExamineUserName()));// 审核人ID
			contractrefers.add(syncService.parseToRefer("t_user", "fuserid",
					"FChecker", "FName", sysOrderTemp.getExamineUserName()));// 审核人ID
		}
		/*
		 * contractrefers.add(syncService.parseToRefer("t_user", "fuserid",
		 * "FChecker", "FName", sysOrderTemp.getBusinessUser()));// 审核人ID
		 */
		contractrefers.add(syncService.parseToRefer("t_user", "fuserid",
				"FBillerID", "FName", /** sysOrderTemp.getUserName() */
				sysOrderTemp.getUserName()));// 制单人ID

		contractTable.setColumns(contractcolumnjo);

		contractTable.setRefers(contractrefers);

		if (ddlType.equals(DDLType.UPDATE)) {
			JSONObject wherejo = new JSONObject();
			// wherejo.put("FContractNo", sysOrderTemp.getContractCode());

			if (null != sysOrderTemp.getContractOldCode()
					&& (!sysOrderTemp.getContractOldCode().equals(
							sysOrderTemp.getContractCode()))) {
				// 修改的合同编号与旧的合同编号不一样
				wherejo.put("FContractNo", "\'"
						+ sysOrderTemp.getContractOldCode() + "\'");// 如果是更新操作话,更新了合同编码,更新时用旧编码查找
			} else {
				// 更新时新编码没变,用原编码查找更新
				wherejo.put("FContractNo", "\'"
						+ sysOrderTemp.getContractCode() + "\'");
			}

			Integer version = Integer.valueOf(sysOrderTemp.getContractVersion()
					.substring(0, sysOrderTemp.getContractVersion().length())) - 1;

			if (String.valueOf(version).length() == 1) {
				wherejo.put("FVersionNo", "00" + version);

			} else if (String.valueOf(version).length() == 2) {
				wherejo.put("FVersionNo", "0" + version);

			} else {
				wherejo.put("FVersionNo", version);

			}
			contractTable.setWheres(wherejo);
		}
		return contractTable;
	}
	/**
	 * 组装合同表
	 * 
	 * @param syncTables
	 *            组装的合同列表
	 * @param sysOrderTemp
	 *            需要同步的系统订单
	 * @param products
	 *            产品列表
	 */
	private SyncTable parseToContract(SysOrder sysOrderTemp,
			List<Product> products, String ddlType, Boolean isCopy)
			throws ServiceException {
		// 组装表
		SyncTable contractTable = new SyncTable();

		contractTable.setTableName("t_RPContract");// 表名称
		contractTable.setDdlType(ddlType);// 操作类型

		// 如果是删除操作
		if (ddlType.equals(DDLType.DELETE)) {
			List<JSONObject> delrefers = new ArrayList<JSONObject>();

			delrefers.add(syncService.parseToRefer("t_RPContract",
					"FContractID", "FContractID", "FContractNo", sysOrderTemp
							.getContractCode()));// 合同内码

			contractTable.setRefers(delrefers);
			return contractTable;
		}

		// 表字段对应
		JSONObject contractcolumnjo = new JSONObject();

		contractcolumnjo.put("fbrID", "0");// 分支机构

		String fContractNo = sysOrderTemp.getContractVersion();
		contractcolumnjo.put("FVersionNo", fContractNo);// 合同版本号

		if (isCopy) {
			fContractNo = sysOrderTemp.getContractCode() + "_" + fContractNo;
			contractcolumnjo.put("FContractNo", fContractNo);// 合同编码
			contractcolumnjo.put("fchangemark", 1);// 变更标志
		} else {
			contractcolumnjo.put("FContractNo", sysOrderTemp.getContractCode());// 合同编码
			contractcolumnjo.put("FChangeDate", sysOrderTemp.getChangeTime());// 变更时间

			contractcolumnjo.put("FChangeUser", sysOrderTemp.getChangeUserId());// 变更人ID

			contractcolumnjo.put("fchangemark", 0);// 变更标志
		}
		contractcolumnjo.put("FRP", 1);// 系统类型 默认值 固定是1
		contractcolumnjo.put("fdate", sysOrderTemp.getContractTime());// 制单日期

		float totalFee = 0;
		for (Product product : products) {
			totalFee += product.getTotalFee();
		}
		contractcolumnjo.put("FTotalAmountFor", totalFee);// 合同原币金额
		Float exchangeRate = Float.valueOf(sysOrderTemp.getExchangeRateValue());
		Float fTotalAmount = MathUtils.multiply(totalFee, exchangeRate)
				.floatValue();// 合同本币金额
		contractcolumnjo.put("FTotalAmount", fTotalAmount);// 合同本币金额

		contractcolumnjo.put("FContractTypeID", 1);// 合同类型代码 默认值 固定为1
		contractcolumnjo.put("FContractName", sysOrderTemp.getContractName());// 合同名称
		contractcolumnjo.put("FText", sysOrderTemp.getRemarks());// 附注
		contractcolumnjo.put("FItemClassID", 1);// 核算类型内码 可修改（客户1，供应商8）
		if(null!=sysOrderTemp.getExamineTime()&&!"".equalsIgnoreCase(sysOrderTemp.getExamineTime())){
			contractcolumnjo.put("FCheckDate", sysOrderTemp.getExamineTime());// 审核日期
		}
		contractcolumnjo.put("fstatus", sysOrderTemp.getSysOrderStatus()
				.intValue() == 2 ? 1 : 0);// 状态 审核为1 关闭为3
		// sysOrderTemp.getSysOrderStatus().intValue()-1

		contractcolumnjo.put("FSystemType", 1);// 系统类型 默认值 固定是1
		contractcolumnjo.put("FClassTypeID", 1000019);// 单据类型 默认值 固定位1000019
		contractcolumnjo.put("FConnectFlag", 1);// 关联标志
		contractcolumnjo.put("FCheckDate", sysOrderTemp.getExamineTime());// 审核日期
		contractcolumnjo.put("FSysStatus", 2);// 整单折扣参数 目前不知道数据来源
		contractcolumnjo.put("FExchangeRateType", 1);// 汇率类型 默认值 固定为1

		String contractTypeName;
		if (sysOrderTemp.getContractType().equals("1")) {
			contractTypeName = "年度合同";
		} else if (sysOrderTemp.getContractType().equals("2")) {
			contractTypeName = "合同正本";
		} else {
			contractTypeName = "内部订单";
		}
		contractcolumnjo.put("FTEXT4", contractTypeName);// 合同分类
		contractcolumnjo.put("FTEXT5", sysOrderTemp.getCustomContractCode());// 客户合同编号

		// 关联的字段对应
		List<JSONObject> contractrefers = new ArrayList<JSONObject>();
		// FContractID
		/**
		 * 组装关联对象 5字段
		 * 
		 * @param referTable
		 *            ERP中关联表
		 * @param resultName
		 *            ERP中查询的列
		 * @param distName
		 *            添加的表中对应的列
		 * @param queryName
		 *            查询的依据字段
		 * @param queryValue
		 *            查询的依据字段的值
		 * @return 关联对象
		 * **/
		// SELECT fmaxnum,*
		// FROM [AIS20120813194456].[dbo].[icmaxnum] where
		// FTableName='t_RPContract'
		// FContractID=上面读出的fmaxnum值,因为合同表中需要存FContractID这个值
		if (ddlType.equals(DDLType.INSERT)) {
			contractrefers.add(syncService.parseToRefer("icmaxnum", "fmaxnum",
					"FContractID", "ftablename", "t_RPContract"));// 合同内码
		}
		//
		contractrefers.add(syncService.parseToRefer("t_Currency",
				"fcurrencyid", "fcurrencyid", "FNumber", sysOrderTemp
						.getCoinType()));// 币种ID

		/*
		 * contractrefers.add(syncService.parseToRefer("t_ExchangeRateEntry",
		 * "FExchangeRate", "FExchangeRate", "FNumber", sysOrderTemp
		 * .getExchangeRate()));// 汇率ID
		 */contractrefers.add(syncService.parseToRefer("t_ExchangeRateEntry",
				"FExchangeRate", "FExchangeRate", "FNumber", sysOrderTemp
						.getExchangeRateNumber()));// 汇率ID

		JSONObject customjo = new JSONObject();
		customjo.put("fitemclassid", 1);
		// 组装关联对象6字段
		// customjo第二个where 条件
		contractrefers
				.add(syncService.parseToRefer("t_Item", "fitemid", "FCustomer",
						"FName", sysOrderTemp.getCheckProject(), customjo));// 客户

		/*
		 * contractrefers.add(syncService.parseToRefer("t_Department",
		 * "fitemid", "FDepartment", "FName", sysOrderTemp.getDepartment()));//
		 * 部门 modify by tly
		 */
		contractrefers.add(syncService.parseToRefer("t_Department", "fitemid",
				"FDepartment", "FName", sysOrderTemp.getDepartment()));// 部门
		// modify
		// by
		// tly

		contractrefers.add(syncService.parseToRefer("t_Emp", "fitemid",
				"FEmployee", "FName", sysOrderTemp.getBusinessUser()));// 业务员ID

		/*
		 * contractrefers.add(syncService.parseToRefer("t_user", "fuserid",
		 * "FXItemID", "FName", sysOrderTemp.getBusinessUser()));// 审核人ID
		 */
		if(null!=sysOrderTemp.getExamineUserName()&&!"".equalsIgnoreCase(sysOrderTemp.getExamineUserName())){
			contractrefers.add(syncService.parseToRefer("t_user", "fuserid",
					"FXItemID", "FName", sysOrderTemp.getExamineUserName()));// 审核人ID
			contractrefers.add(syncService.parseToRefer("t_user", "fuserid",
					"FChecker", "FName", sysOrderTemp.getExamineUserName()));// 审核人ID
		}
		/*
		 * contractrefers.add(syncService.parseToRefer("t_user", "fuserid",
		 * "FChecker", "FName", sysOrderTemp.getBusinessUser()));// 审核人ID
		 */
		contractrefers.add(syncService.parseToRefer("t_user", "fuserid",
				"FBillerID", "FName", /** sysOrderTemp.getUserName() */
				sysOrderTemp.getUserName()));// 制单人ID

		contractTable.setColumns(contractcolumnjo);

		contractTable.setRefers(contractrefers);

		if (ddlType.equals(DDLType.UPDATE)) {
			JSONObject wherejo = new JSONObject();
			// wherejo.put("FContractNo", sysOrderTemp.getContractCode());

			if (null != sysOrderTemp.getContractOldCode()
					&& (!sysOrderTemp.getContractOldCode().equals(
							sysOrderTemp.getContractCode()))) {
				// 修改的合同编号与旧的合同编号不一样
				wherejo.put("FContractNo", "\'"
						+ sysOrderTemp.getContractOldCode() + "\'");// 如果是更新操作话,更新了合同编码,更新时用旧编码查找
			} else {
				// 更新时新编码没变,用原编码查找更新
				wherejo.put("FContractNo", "\'"
						+ sysOrderTemp.getContractCode() + "\'");
			}

			Integer version = Integer.valueOf(sysOrderTemp.getContractVersion()
					.substring(0, sysOrderTemp.getContractVersion().length())) - 1;

			if (String.valueOf(version).length() == 1) {
				wherejo.put("FVersionNo", "00" + version);

			} else if (String.valueOf(version).length() == 2) {
				wherejo.put("FVersionNo", "0" + version);

			} else {
				wherejo.put("FVersionNo", version);

			}
			contractTable.setWheres(wherejo);
		}
		return contractTable;
	}
	/**
	 * 组装合同分录
	 * 
	 * @param sysOrderTemp
	 *            订单对象
	 * @param product
	 *            产品
	 * @param ddlType
	 *            操作类型
	 * @return 合同分录对象
	 */
	private SyncTable parseToContractEntryExam(SysOrder sysOrderTemp,
			Product product, String ddlType) throws ServiceException {
		// 分录表开始组装
		SyncTable proContractSyncTable = null;
		// 表字段对应
		JSONObject procontractcolumnjo = null;
		// 产品关联字段对应
		List<JSONObject> procontractrefers = new ArrayList<JSONObject>();

		// int countcontract = 0;
		proContractSyncTable = new SyncTable();
		proContractSyncTable.setTableName("t_rpContractEntry");
		proContractSyncTable.setDdlType(ddlType);

		procontractcolumnjo = new JSONObject();
		procontractcolumnjo.put("FQuantity", product.getProductCount());// 数量
		// 浮点型 *
		procontractcolumnjo.put("FQuantity_Base", product.getProductCount());// 基本数量
		// 浮点型
		// *
		/*
		 * procontractcolumnjo.put("fprice", product.getUnitPrice());//
		 * 不含税单价(本币) // 浮点型 *
		 */
		
		Float exchangeRate = Float.valueOf(sysOrderTemp.getExchangeRateValue());
		/*Float fprice = MathUtils.multiply(product.getUnitRemoveTaxH(),
				exchangeRate).floatValue();// 
		procontractcolumnjo.put("fprice", fprice);// 不含税单价(本币)
		// 浮点型 *
		
		 * procontractcolumnjo.put("FPriceFor", product.getUnitPrice() / (1 +
		 * product.getTaxRate()));// 不含税单价(原币) 浮点型 *
		 
		procontractcolumnjo.put("FPriceFor", product.getUnitRemoveTaxH());// 不含税单价(原币)
		 */
		//从数据库读取的没有存UnitRemoveTaxH值需要重新计算得到
		Float taxRate= product.getTaxRate();
		Float temptaxRate=MathUtils.multiply(taxRate,
				0.01f).floatValue();//
		temptaxRate=MathUtils.add(temptaxRate,
				1).floatValue();//
		Double unitRemoveTaxH= MathUtils.divide(product.getListprice(),
				temptaxRate).doubleValue();//
		//转换精度不含税单价(原币)4位
		Float unitRemoveTaxHFPriceFor=Float.valueOf(formateNumber(unitRemoveTaxH,4));
		
		Float fprice = MathUtils.multiply(unitRemoveTaxHFPriceFor,
				exchangeRate).floatValue();// 
		Float unitRemoveTaxHfprice=Float.valueOf(formateNumber(Double.valueOf(fprice),4));
				
		procontractcolumnjo.put("fprice", unitRemoveTaxHfprice);// 不含税单价(本币)
		procontractcolumnjo.put("FPriceFor", unitRemoveTaxHFPriceFor);// 不含税单价(原币)
		
		//var temptaxRate=Number(taxRate*0.01)+Number(1);
		//unitRemoveTaxH= Number( ( listprice/(temptaxRate) ).toFixed(4) );
		
		
		
		
		// 浮点型
		// *

		/*Double fTaxPrice = MathUtils.multiply(product.getUnitPrice(),
				exchangeRate).doubleValue();// 
		procontractcolumnjo.put("FTaxPrice", fTaxPrice);111// 含税单价(本币)111
		// 浮点型 *
		procontractcolumnjo.put("FTaxPriceFor", product.getUnitPrice());// 含税单价(原币)
*/		// 浮点型 *
		Double fTaxPrice = MathUtils.multiply(product.getListprice(),
				exchangeRate).doubleValue();// 
		procontractcolumnjo.put("FTaxPrice", fTaxPrice);// 含税单价(本币)111
		// 浮点型 *
		procontractcolumnjo.put("FTaxPriceFor", product.getListprice());// 含税单价(原币)

		/*
		 * procontractcolumnjo.put("Famount", product.getProductCount()
		 * product.getUnitRemoveTax());// 不含税金额(本币) 浮点型 *
		 * procontractcolumnjo.put("FAmountFor", product.getProductCount()
		 * product.getUnitRemoveTax());// 不含税金额(原币) 浮点型 *
		 */
		Float fAmount = MathUtils.multiply(product.getTotalFee(), exchangeRate)
				.floatValue();// 
		procontractcolumnjo.put("FAmount", fAmount);// 不含税金额(本币) 浮点型 *

		procontractcolumnjo.put("FAmountFor", product.getTotalFee());// 不含税金额(原币)
		// 浮点型 *

		/*
		 * procontractcolumnjo.put("FTax", product.getPriceTaxTotal() -
		 * product.getProductCount() * product.getUnitRemoveTax());// 税额(本币) //
		 * 浮点型 // * procontractcolumnjo.put("FTaxFor",
		 * product.getPriceTaxTotal() - product.getProductCount() *
		 * product.getUnitRemoveTax());// 税额(原币) // 浮点型 // *
		 */
		Double fTax = MathUtils.multiply(product.getSaleTax(), exchangeRate)
				.doubleValue();
		procontractcolumnjo.put("FTax", fTax);// 税额(本币)=销项税额
		procontractcolumnjo.put("FTaxFor", product.getSaleTax());// 税额(原币)销项税额

		Double fAmountIncludeTax = MathUtils.multiply(
				product.getPriceTaxTotal(), exchangeRate).doubleValue();
		procontractcolumnjo.put("FAmountIncludeTax", fAmountIncludeTax);// 价税合计(本币)
		// 浮点型 *
		procontractcolumnjo.put("FAmountIncludeTaxFor", product
				.getPriceTaxTotal());// 价税合计(原币) 浮点型 *>>>>>>>>>>>>>>>>>>>>

		procontractcolumnjo.put("FIndex", product.getOrderTrNumber());// 分录号
		// 自增长不需要填入值
		/*
		 * procontractcolumnjo.put("FFactPriceFor", product.getUnitPrice());//
		 * 实际含税单价原币 // 浮点型 // *
		 */
		/*procontractcolumnjo.put("FFactPriceFor", product.getFactUnitPrice());// 实际含税单价原币
		Float fFactPrice = MathUtils.multiply(product.getFactUnitPrice(),
				exchangeRate).floatValue();
		procontractcolumnjo.put("FFactPrice", fFactPrice);1111122// 实际含税单价
		 */		
		Float fFactPrice = MathUtils.multiply(product.getFactUnitPrice(),
				exchangeRate).floatValue();
		procontractcolumnjo.put("FFactPriceFor", product.getFactUnitPrice());// 实际含税单价原币
		procontractcolumnjo.put("FFactPrice", fFactPrice);// 实际含税单价
		// 浮点型
		// *

		/*
		 * procontractcolumnjo.put("FBusinessDiscount",
		 * product.getProductCount() product.getDiscountRate() / 100);//
		 * 折扣额(本币)浮点型 *
		 */
		Float fBusinessDiscount = MathUtils.multiply(product.getDiscount(),
				exchangeRate).floatValue();
		procontractcolumnjo.put("FBusinessDiscount", fBusinessDiscount);// 折扣额(本币)浮点型
		// *

		/*
		 * procontractcolumnjo.put("FBusinessDiscountFor", product
		 * .getProductCount() product.getDiscountRate() / 100);// 折扣额(原币) 浮点型 *
		 */
		procontractcolumnjo.put("FBusinessDiscountFor", product.getDiscount());// 折扣额(原币)
		// 浮点型
		// *>>>>>>>>>>>>>>>>>>>>

		// procontractcolumnjo.put("FBusinessDiscountRate", product
		// .getDiscountRate());// 折扣率 浮点型 *>>>>>>>>>>>>>>>>>>>>
		if (null != product.getFdiscountrate()
				&& 0 != product.getFdiscountrate()) {
			procontractcolumnjo.put("FBusinessDiscountRate", (Float
					.valueOf(product.getFdiscountrate() + "")));
		}

		procontractcolumnjo
				.put("FSecOrderCommitQty", product.getProductCount());// 订单执行辅助数量
		// 浮点型 *
		procontractcolumnjo.put("FOrderAmtFor_Relative", product
				.getProductCount());// 订单关联金额 浮点型 *

		procontractcolumnjo.put("FOrderQty_Base_Commit", product
				.getProductCount());// 订单执行基本数量 浮点型 *

		procontractcolumnjo.put("FTaxRate", product.getTaxRate());// 税率
		/**
		 * FQuantity as 数量,FTaxPrice AS 含税单价, fprice as 不含税单价
		 * ,FBusinessDiscountRate as 折扣率 , FFACTPRICE AS 实际含税单价 ,
		 * FBusinessDiscount AS 折扣额,FAmountIncludeTaxFor AS 价税合计, FTaxRate AS
		 * 税率,FTax AS 税额,FAmount AS 金额,FUnitID AS 基本单位,FQuantity_Base AS 基本数量
		 */

		if (ddlType.equals(DDLType.INSERT)) {
			procontractrefers.add(syncService.parseToRefer("icmaxnum",
					"fmaxnum-1", "FContractID", "ftablename", "t_RPContract"));// 合同内码
		}
		procontractrefers.add(syncService.parseToRefer("t_icitem", "FITEMID",
				"FProductID", "FNumber", product.getProductCode()));// 物料ID
		procontractrefers.add(syncService.parseToRefer("t_icitem", "FITEMID",
				"FUnitID", "FNumber", product.getProductCode()));// 单位 *

		if (ddlType.equals(DDLType.DELETE)) {
			List<JSONObject> delrefers = new ArrayList<JSONObject>();
			delrefers.add(syncService.parseToRefer("t_RPContract",
					"FContractID", "FContractID", "FContractNo", sysOrderTemp
							.getContractCode()));// 合同内码
			proContractSyncTable.setRefers(delrefers);
			return proContractSyncTable;
		}
		proContractSyncTable.setColumns(procontractcolumnjo);
		proContractSyncTable.setRefers(procontractrefers);
		if (ddlType.equals(DDLType.UPDATE)) {
			SyncTable queryTable = new SyncTable();
			queryTable.setTableName("t_RPContract");
			queryTable.setDdlType(DDLType.QUERY);
			JSONObject queryWherejo = new JSONObject();
			// queryWherejo.put("FContractNo", sysOrderTemp.getContractCode());
			if (null != sysOrderTemp.getContractOldCode()
					&& (!sysOrderTemp.getContractOldCode().equals(
							sysOrderTemp.getContractCode()))) {
				// 合同编号有变化
				queryWherejo.put("FContractNo", sysOrderTemp
						.getContractOldCode());
			} else {
				queryWherejo.put("FContractNo", sysOrderTemp.getContractCode());
			}

			Integer version = Integer.valueOf(sysOrderTemp.getContractVersion()
					.substring(0, sysOrderTemp.getContractVersion().length())) - 1;
			if (String.valueOf(version).length() == 1) {
				queryWherejo.put("FVersionNo", "00" + version);
			} else if (String.valueOf(version).length() == 2) {
				queryWherejo.put("FVersionNo", "0" + version);
			} else {
				queryWherejo.put("FVersionNo", version);
			}
			queryTable.setWheres(queryWherejo);
			Map<String, Object> map = syncService.queryForObject(queryTable,
					"FContractID");// 报错了
			System.out.println(map.get("data"));
			if (null != map.get("data")) {
				Long finterId = Long.valueOf(String.valueOf(map.get("data")));

				JSONObject wherejo = new JSONObject();
				wherejo.put("FContractID", finterId);
				wherejo.put("FIndex", product.getOrderTrNumber());
				proContractSyncTable.setWheres(wherejo);
			}

		}
		return proContractSyncTable;
	}
	/**
	 * 组装合同分录
	 * 
	 * @param sysOrderTemp
	 *            订单对象
	 * @param product
	 *            产品
	 * @param ddlType
	 *            操作类型
	 * @return 合同分录对象
	 */
	private SyncTable parseToContractEntry(SysOrder sysOrderTemp,
			Product product, String ddlType) throws ServiceException {
		// 分录表开始组装
		SyncTable proContractSyncTable = null;
		// 表字段对应
		JSONObject procontractcolumnjo = null;
		// 产品关联字段对应
		List<JSONObject> procontractrefers = new ArrayList<JSONObject>();

		// int countcontract = 0;
		proContractSyncTable = new SyncTable();
		proContractSyncTable.setTableName("t_rpContractEntry");
		proContractSyncTable.setDdlType(ddlType);

		procontractcolumnjo = new JSONObject();
		procontractcolumnjo.put("FQuantity", product.getProductCount());// 数量
		// 浮点型 *
		procontractcolumnjo.put("FQuantity_Base", product.getProductCount());// 基本数量
		// 浮点型
		// *
		/*
		 * procontractcolumnjo.put("fprice", product.getUnitPrice());//
		 * 不含税单价(本币) // 浮点型 *
		 */
		Float exchangeRate = Float.valueOf(sysOrderTemp.getExchangeRateValue());
		Float fprice = MathUtils.multiply(product.getUnitRemoveTaxH(),
				exchangeRate).floatValue();// 
		procontractcolumnjo.put("fprice", fprice);// 不含税单价(本币)
		// 浮点型 *

		/*
		 * procontractcolumnjo.put("FPriceFor", product.getUnitPrice() / (1 +
		 * product.getTaxRate()));// 不含税单价(原币) 浮点型 *
		 */
		procontractcolumnjo.put("FPriceFor", product.getUnitRemoveTaxH());// 不含税单价(原币)
		// 浮点型
		// *

		/*Double fTaxPrice = MathUtils.multiply(product.getUnitPrice(),
				exchangeRate).doubleValue();// 
		procontractcolumnjo.put("FTaxPrice", fTaxPrice);111// 含税单价(本币)111
		// 浮点型 *
		procontractcolumnjo.put("FTaxPriceFor", product.getUnitPrice());// 含税单价(原币)
*/		// 浮点型 *
		Double fTaxPrice = MathUtils.multiply(product.getListprice(),
				exchangeRate).doubleValue();// 
		procontractcolumnjo.put("FTaxPrice", fTaxPrice);// 含税单价(本币)111
		// 浮点型 *
		procontractcolumnjo.put("FTaxPriceFor", product.getListprice());// 含税单价(原币)

		/*
		 * procontractcolumnjo.put("Famount", product.getProductCount()
		 * product.getUnitRemoveTax());// 不含税金额(本币) 浮点型 *
		 * procontractcolumnjo.put("FAmountFor", product.getProductCount()
		 * product.getUnitRemoveTax());// 不含税金额(原币) 浮点型 *
		 */
		Float fAmount = MathUtils.multiply(product.getTotalFee(), exchangeRate)
				.floatValue();// 
		procontractcolumnjo.put("FAmount", fAmount);// 不含税金额(本币) 浮点型 *

		procontractcolumnjo.put("FAmountFor", product.getTotalFee());// 不含税金额(原币)
		// 浮点型 *

		/*
		 * procontractcolumnjo.put("FTax", product.getPriceTaxTotal() -
		 * product.getProductCount() * product.getUnitRemoveTax());// 税额(本币) //
		 * 浮点型 // * procontractcolumnjo.put("FTaxFor",
		 * product.getPriceTaxTotal() - product.getProductCount() *
		 * product.getUnitRemoveTax());// 税额(原币) // 浮点型 // *
		 */
		Double fTax = MathUtils.multiply(product.getSaleTax(), exchangeRate)
				.doubleValue();
		procontractcolumnjo.put("FTax", fTax);// 税额(本币)=销项税额
		procontractcolumnjo.put("FTaxFor", product.getSaleTax());// 税额(原币)销项税额

		Double fAmountIncludeTax = MathUtils.multiply(
				product.getPriceTaxTotal(), exchangeRate).doubleValue();
		procontractcolumnjo.put("FAmountIncludeTax", fAmountIncludeTax);// 价税合计(本币)
		// 浮点型 *
		procontractcolumnjo.put("FAmountIncludeTaxFor", product
				.getPriceTaxTotal());// 价税合计(原币) 浮点型 *>>>>>>>>>>>>>>>>>>>>

		procontractcolumnjo.put("FIndex", product.getOrderTrNumber());// 分录号
		// 自增长不需要填入值
		/*
		 * procontractcolumnjo.put("FFactPriceFor", product.getUnitPrice());//
		 * 实际含税单价原币 // 浮点型 // *
		 */
		/*procontractcolumnjo.put("FFactPriceFor", product.getFactUnitPrice());// 实际含税单价原币
		Float fFactPrice = MathUtils.multiply(product.getFactUnitPrice(),
				exchangeRate).floatValue();
		procontractcolumnjo.put("FFactPrice", fFactPrice);1111122// 实际含税单价
		 */		
		Float fFactPrice = MathUtils.multiply(product.getFactUnitPrice(),
				exchangeRate).floatValue();
		procontractcolumnjo.put("FFactPriceFor", product.getFactUnitPrice());// 实际含税单价原币
		procontractcolumnjo.put("FFactPrice", fFactPrice);// 实际含税单价
		// 浮点型
		// *

		/*
		 * procontractcolumnjo.put("FBusinessDiscount",
		 * product.getProductCount() product.getDiscountRate() / 100);//
		 * 折扣额(本币)浮点型 *
		 */
		Float fBusinessDiscount = MathUtils.multiply(product.getDiscount(),
				exchangeRate).floatValue();
		procontractcolumnjo.put("FBusinessDiscount", fBusinessDiscount);// 折扣额(本币)浮点型
		// *

		/*
		 * procontractcolumnjo.put("FBusinessDiscountFor", product
		 * .getProductCount() product.getDiscountRate() / 100);// 折扣额(原币) 浮点型 *
		 */
		procontractcolumnjo.put("FBusinessDiscountFor", product.getDiscount());// 折扣额(原币)
		// 浮点型
		// *>>>>>>>>>>>>>>>>>>>>

		// procontractcolumnjo.put("FBusinessDiscountRate", product
		// .getDiscountRate());// 折扣率 浮点型 *>>>>>>>>>>>>>>>>>>>>
		if (null != product.getFdiscountrate()
				&& 0 != product.getFdiscountrate()) {
			procontractcolumnjo.put("FBusinessDiscountRate", (Float
					.valueOf(product.getFdiscountrate() + "")));
		}

		procontractcolumnjo
				.put("FSecOrderCommitQty", product.getProductCount());// 订单执行辅助数量
		// 浮点型 *
		procontractcolumnjo.put("FOrderAmtFor_Relative", product
				.getProductCount());// 订单关联金额 浮点型 *

		procontractcolumnjo.put("FOrderQty_Base_Commit", product
				.getProductCount());// 订单执行基本数量 浮点型 *

		procontractcolumnjo.put("FTaxRate", product.getTaxRate());// 税率
		/**
		 * FQuantity as 数量,FTaxPrice AS 含税单价, fprice as 不含税单价
		 * ,FBusinessDiscountRate as 折扣率 , FFACTPRICE AS 实际含税单价 ,
		 * FBusinessDiscount AS 折扣额,FAmountIncludeTaxFor AS 价税合计, FTaxRate AS
		 * 税率,FTax AS 税额,FAmount AS 金额,FUnitID AS 基本单位,FQuantity_Base AS 基本数量
		 */

		if (ddlType.equals(DDLType.INSERT)) {
			procontractrefers.add(syncService.parseToRefer("icmaxnum",
					"fmaxnum-1", "FContractID", "ftablename", "t_RPContract"));// 合同内码
		}
		procontractrefers.add(syncService.parseToRefer("t_icitem", "FITEMID",
				"FProductID", "FNumber", product.getProductCode()));// 物料ID
		procontractrefers.add(syncService.parseToRefer("t_icitem", "FITEMID",
				"FUnitID", "FNumber", product.getProductCode()));// 单位 *

		if (ddlType.equals(DDLType.DELETE)) {
			List<JSONObject> delrefers = new ArrayList<JSONObject>();
			delrefers.add(syncService.parseToRefer("t_RPContract",
					"FContractID", "FContractID", "FContractNo", sysOrderTemp
							.getContractCode()));// 合同内码
			proContractSyncTable.setRefers(delrefers);
			return proContractSyncTable;
		}
		proContractSyncTable.setColumns(procontractcolumnjo);
		proContractSyncTable.setRefers(procontractrefers);
		if (ddlType.equals(DDLType.UPDATE)) {
			SyncTable queryTable = new SyncTable();
			queryTable.setTableName("t_RPContract");
			queryTable.setDdlType(DDLType.QUERY);
			JSONObject queryWherejo = new JSONObject();
			// queryWherejo.put("FContractNo", sysOrderTemp.getContractCode());
			if (null != sysOrderTemp.getContractOldCode()
					&& (!sysOrderTemp.getContractOldCode().equals(
							sysOrderTemp.getContractCode()))) {
				// 合同编号有变化
				queryWherejo.put("FContractNo", sysOrderTemp
						.getContractOldCode());
			} else {
				queryWherejo.put("FContractNo", sysOrderTemp.getContractCode());
			}

			Integer version = Integer.valueOf(sysOrderTemp.getContractVersion()
					.substring(0, sysOrderTemp.getContractVersion().length())) - 1;
			if (String.valueOf(version).length() == 1) {
				queryWherejo.put("FVersionNo", "00" + version);
			} else if (String.valueOf(version).length() == 2) {
				queryWherejo.put("FVersionNo", "0" + version);
			} else {
				queryWherejo.put("FVersionNo", version);
			}
			queryTable.setWheres(queryWherejo);
			Map<String, Object> map = syncService.queryForObject(queryTable,
					"FContractID");// 报错了
			System.out.println(map.get("data"));
			if (null != map.get("data")) {
				Long finterId = Long.valueOf(String.valueOf(map.get("data")));

				JSONObject wherejo = new JSONObject();
				wherejo.put("FContractID", finterId);
				wherejo.put("FIndex", product.getOrderTrNumber());
				proContractSyncTable.setWheres(wherejo);
			}

		}
		return proContractSyncTable;
	}
	/**
	 * 组装订单表
	 * 
	 * @param syncTables
	 *            需要同步的订单列表
	 * @param sysOrderTemp
	 *            需要同步的订单
	 * @param products
	 *            产品列表
	 */
	private SyncTable parseToOrderExam(SysOrder sysOrderTemp, String ddlType,
			Boolean isCopy) throws ServiceException {
		// 组装总录表
		SyncTable orderTable = new SyncTable();

		orderTable.setTableName("SEOrder");// 表名称
		orderTable.setDdlType(ddlType);// 操作类型

		// 总录表字段对应
		JSONObject columnjo = new JSONObject();
		columnjo.put("fbrno", "0");// 机构内码
		columnjo.put("fbillno", sysOrderTemp.getOrderCode());// 单据编号
		columnjo.put("fdate", sysOrderTemp.getContractTime());// 制单日期
		// columnjo.put("FFetchAdd", sysOrderTemp.getCheckProject());//项目
		columnjo.put("ftrantype", 81);// 单据类型 默认值 固定为81
		if (!ddlType.equals(DDLType.DELETE)) {
			columnjo.put("fcheckdate", sysOrderTemp.getExamineTime());// 审核日期
			columnjo.put("fstatus",
					sysOrderTemp.getSysOrderStatus().intValue() == 2 ? 2 : 0);// 状态
			// 审核为1
			// 关闭为3
			// sysOrderTemp.getSysOrderStatus().intValue()-1
		}
		columnjo.put("FAreaPS", 20302);// 销售范围
		//columnjo.put("FSettleID", 2);// 结算方式
		columnjo.put("FSysStatus", 2);// 系统设置
		columnjo.put("FChildren", 0);// 关联标识
		columnjo.put("FClosed", 0);// 关闭标识
		columnjo.put("FVersionNo", sysOrderTemp.getContractVersion());// 版本号
		columnjo.put("FChangeCauses", sysOrderTemp.getChangeReason());// 变更原因
		columnjo.put("FChangeDate", sysOrderTemp.getChangeTime());// 变更日期
		columnjo.put("FHeadSelfS0156", sysOrderTemp.getFheadSelfS0156());
		columnjo.put("FConsignee", 0);
		// 如果是更新操作或者是版本号为000(原始订单) 设置FSelTranType为1000019 否则为0
		if (!isCopy) {
			columnjo.put("FSelTranType", 1000019);
			columnjo.put("FCancellation", 0);// 作废
			columnjo.put("FChangeMark", 0);// 变更标志
		} else {
			columnjo.put("FSelTranType", 0);
			columnjo.put("FCancellation", 1);// 作废
			columnjo.put("FChangeMark", 1);// 变更标志
		}
		// 关联的字段对应
		List<JSONObject> refers = new ArrayList<JSONObject>();
		if (ddlType.equals(DDLType.INSERT)) {
			refers.add(syncService.parseToRefer("icmaxnum", "fmaxnum",
					"finterid", "ftablename", "SEOrder"));// 单据内码
		}
		refers.add(syncService.parseToRefer("t_Currency", "fcurrencyid",
				"fcurrencyid", "FNumber", sysOrderTemp.getCoinType()));// 币别ID
		JSONObject buygoodsjo = new JSONObject();
		buygoodsjo.put("fitemclassid", 1);
		refers.add(syncService.parseToRefer("t_Item", "fitemid", "FCustID",
				"FName", sysOrderTemp.getFinalConsumer(), buygoodsjo));// 购货单位
		refers.add(syncService.parseToRefer("t_SubMessage", "finterid",
				"FSaleStyle", "FName", sysOrderTemp.getSaleType()));// 销售方式

		/*
		 * refers.add(syncService.parseToRefer("t_Department", "fitemid",
		 * "FDeptID", "FName", sysOrderTemp.getDepartment()));// 制单部门ID
		 */
		refers.add(syncService.parseToRefer("t_Department", "fitemid",
				"FDeptID", "FName", sysOrderTemp.getDepartment()));// 制单部门ID

		refers.add(syncService.parseToRefer("t_Emp", "fitemid", "FEmpID",
				"FName", sysOrderTemp.getBusinessUser()));// 业务员ID
		if (!ddlType.equals(DDLType.DELETE)
				&& sysOrderTemp.getSysOrderStatus().intValue() == 2) {
			/*
			 * refers.add(syncService.parseToRefer("t_user", "FUserId",
			 * "FCheckerID", "FName", sysOrderTemp.getBusinessUser()));// 审核人ID
			 */
			refers.add(syncService.parseToRefer("t_user", "FUserId",
					"FCheckerID", "FName", sysOrderTemp.getExamineUserName()));// 审核人ID
		}
		refers.add(syncService.parseToRefer("t_user", "FUserId", "FBillerID",
				"FName", /** sysOrderTemp.getUserName() */
				sysOrderTemp.getUserName()));// 制单人ID
		/*
		 * refers.add(syncService.parseToRefer("t_ExchangeRateEntry",
		 * "FExchangeRate", "FExchangeRate", "FNumber", sysOrderTemp
		 * .getExchangeRate()));// 汇率ID
		 */refers.add(syncService.parseToRefer("t_ExchangeRateEntry",
				"FExchangeRate", "FExchangeRate", "FNumber", sysOrderTemp
						.getExchangeRateNumber()));// 汇率ID

		refers.add(syncService.parseToRefer("t_Emp", "fitemid", "FMangerID",
				"FName", sysOrderTemp.getManager()));// 主管

		/*
		 * refers.add(syncService.parseToRefer("t_user", "FUserId",
		 * "FChangeUser", "FName", sysOrderTemp.getChangeUserName()));// 变更人
		 */
		refers.add(syncService.parseToRefer("t_user", "FUserId", "FChangeUser",
				"FName", sysOrderTemp.getChangeUserName()));// 变更人
		
		/*//FCheckerID审核人
		if(null!=sysOrderTemp.getExamineUserName()&&!"".equalsIgnoreCase(sysOrderTemp.getExamineUserName())){
		refers.add(syncService.parseToRefer("t_user", "fuserid",
					"FCheckerID", "FName", sysOrderTemp.getExamineUserName()));// 审核人ID
		
		//fcheckdate审核日期
		columnjo.put("FCheckDate", sysOrderTemp.getExamineTime());// 审核日期
		//fstatus状态	
		columnjo.put("fstatus", sysOrderTemp.getSysOrderStatus()
							.intValue() == 2 ? 1 : 0);// 状态 审核为1 关闭为3
		}*/
		
		
		JSONObject syscustomjo = new JSONObject();
		syscustomjo.put("fitemclassid", 3014);
		/**
		 * if(ddlType.equals(DDLType.DELETE)){
		 * refers.add(syncService.parseToRefer("t_Item", "fitemid",
		 * "fheadselfs0151"
		 * ,"FName",sysOrderTemp.getSystemConsumer(),syscustomjo));//体系客户 }else
		 * { refers.add(syncService.parseToRefer("fheadselfs0151",
		 * "sysCustom"));//体系客户 }
		 */
		refers.add(syncService.parseToRefer("t_Item", "fitemid",
				"fheadselfs0151", "FName", sysOrderTemp.getSystemConsumer(),
				syscustomjo));// 体系客户
		JSONObject modeljo = new JSONObject();
		modeljo.put("fitemclassid", 3012);
		refers.add(syncService.parseToRefer("t_Item", "fitemid",
				"fheadselfs0152", "FName", sysOrderTemp.getModel(), modeljo));// 营销部模式
		JSONObject finalConsumer = new JSONObject();
		finalConsumer.put("fitemclassid", 1);
		refers.add(syncService.parseToRefer("t_Item", "FName",
				"fheadselfs0153", "FName", sysOrderTemp.getFinalConsumer(),
				finalConsumer));// 最终用户
		JSONObject saleprovincejo = new JSONObject();
		saleprovincejo.put("fitemclassid", 3013);
		refers.add(syncService.parseToRefer("t_Item", "fitemid",
				"fheadselfs0154", "FName", sysOrderTemp.getProvince(),
				saleprovincejo));// 营销部省份
		JSONObject bussinesstypejo = new JSONObject();
		bussinesstypejo.put("fitemclassid", 3020);
		refers.add(syncService.parseToRefer("t_Item", "fitemid",
				"fheadselfs0155", "FName", sysOrderTemp.getBussinessType()
						.equals("1") ? "基础业务" : "大项目业务", bussinesstypejo));// 业务类型
		if (ddlType.equals(DDLType.UPDATE)) {
			JSONObject wherejo = new JSONObject();
			wherejo.put("FBillNo", sysOrderTemp.getOrderCode());
			Integer version = Integer.valueOf(sysOrderTemp.getContractVersion()
					.substring(0, sysOrderTemp.getContractVersion().length())) - 1;
			if (String.valueOf(version).length() == 1) {
				wherejo.put("FVersionNo", "00" + version);
			} else if (String.valueOf(version).length() == 2) {
				wherejo.put("FVersionNo", "0" + version);
			} else {
				wherejo.put("FVersionNo", version);
			}
			orderTable.setWheres(wherejo);
		}
		orderTable.setColumns(columnjo);
		orderTable.setRefers(refers);
		return orderTable;
	}
	/**
	 * 组装订单表
	 * 
	 * @param syncTables
	 *            需要同步的订单列表
	 * @param sysOrderTemp
	 *            需要同步的订单
	 * @param products
	 *            产品列表
	 */
	private SyncTable parseToOrder(SysOrder sysOrderTemp, String ddlType,
			Boolean isCopy) throws ServiceException {
		// 组装总录表
		SyncTable orderTable = new SyncTable();

		orderTable.setTableName("SEOrder");// 表名称
		orderTable.setDdlType(ddlType);// 操作类型

		// 总录表字段对应
		JSONObject columnjo = new JSONObject();
		columnjo.put("fbrno", "0");// 机构内码
		columnjo.put("fbillno", sysOrderTemp.getOrderCode());// 单据编号
		columnjo.put("fdate", sysOrderTemp.getContractTime());// 制单日期
		// columnjo.put("FFetchAdd", sysOrderTemp.getCheckProject());//项目
		columnjo.put("ftrantype", 81);// 单据类型 默认值 固定为81
		if (!ddlType.equals(DDLType.DELETE)) {
			columnjo.put("fcheckdate", sysOrderTemp.getExamineTime());// 审核日期
			columnjo.put("fstatus",
					sysOrderTemp.getSysOrderStatus().intValue() == 2 ? 2 : 0);// 状态
			// 审核为1
			// 关闭为3
			// sysOrderTemp.getSysOrderStatus().intValue()-1
		}
		columnjo.put("FAreaPS", 20302);// 销售范围
		//columnjo.put("FSettleID", 2);// 结算方式吴娟沟通了不需要设置值
		
		columnjo.put("FSysStatus", 2);// 系统设置
		columnjo.put("FChildren", 0);// 关联标识
		columnjo.put("FClosed", 0);// 关闭标识
		columnjo.put("FVersionNo", sysOrderTemp.getContractVersion());// 版本号
		columnjo.put("FChangeCauses", sysOrderTemp.getChangeReason());// 变更原因
		columnjo.put("FChangeDate", sysOrderTemp.getChangeTime());// 变更日期
		columnjo.put("FHeadSelfS0156", sysOrderTemp.getFheadSelfS0156());
		columnjo.put("FConsignee", 0);
		// 如果是更新操作或者是版本号为000(原始订单) 设置FSelTranType为1000019 否则为0
		if (!isCopy) {
			columnjo.put("FSelTranType", 1000019);
			columnjo.put("FCancellation", 0);// 作废
			columnjo.put("FChangeMark", 0);// 变更标志
		} else {
			columnjo.put("FSelTranType", 0);
			columnjo.put("FCancellation", 1);// 作废
			columnjo.put("FChangeMark", 1);// 变更标志
		}
		// 关联的字段对应
		List<JSONObject> refers = new ArrayList<JSONObject>();
		if (ddlType.equals(DDLType.INSERT)) {
			refers.add(syncService.parseToRefer("icmaxnum", "fmaxnum",
					"finterid", "ftablename", "SEOrder"));// 单据内码
		}
		refers.add(syncService.parseToRefer("t_Currency", "fcurrencyid",
				"fcurrencyid", "FNumber", sysOrderTemp.getCoinType()));// 币别ID
		JSONObject buygoodsjo = new JSONObject();
		buygoodsjo.put("fitemclassid", 1);
		refers.add(syncService.parseToRefer("t_Item", "fitemid", "FCustID",
				"FName", sysOrderTemp.getFinalConsumer(), buygoodsjo));// 购货单位
		refers.add(syncService.parseToRefer("t_SubMessage", "finterid",
				"FSaleStyle", "FName", sysOrderTemp.getSaleType()));// 销售方式

		/*
		 * refers.add(syncService.parseToRefer("t_Department", "fitemid",
		 * "FDeptID", "FName", sysOrderTemp.getDepartment()));// 制单部门ID
		 */
		refers.add(syncService.parseToRefer("t_Department", "fitemid",
				"FDeptID", "FName", sysOrderTemp.getDepartment()));// 制单部门ID

		refers.add(syncService.parseToRefer("t_Emp", "fitemid", "FEmpID",
				"FName", sysOrderTemp.getBusinessUser()));// 业务员ID
		if (!ddlType.equals(DDLType.DELETE)
				&& sysOrderTemp.getSysOrderStatus().intValue() == 2) {
			/*
			 * refers.add(syncService.parseToRefer("t_user", "FUserId",
			 * "FCheckerID", "FName", sysOrderTemp.getBusinessUser()));// 审核人ID
			 */
			refers.add(syncService.parseToRefer("t_user", "FUserId",
					"FCheckerID", "FName", sysOrderTemp.getExamineUserName()));// 审核人ID
		}
		refers.add(syncService.parseToRefer("t_user", "FUserId", "FBillerID",
				"FName", /** sysOrderTemp.getUserName() */
				sysOrderTemp.getUserName()));// 制单人ID
		/*
		 * refers.add(syncService.parseToRefer("t_ExchangeRateEntry",
		 * "FExchangeRate", "FExchangeRate", "FNumber", sysOrderTemp
		 * .getExchangeRate()));// 汇率ID
		 */refers.add(syncService.parseToRefer("t_ExchangeRateEntry",
				"FExchangeRate", "FExchangeRate", "FNumber", sysOrderTemp
						.getExchangeRateNumber()));// 汇率ID

		refers.add(syncService.parseToRefer("t_Emp", "fitemid", "FMangerID",
				"FName", sysOrderTemp.getManager()));// 主管

		/*
		 * refers.add(syncService.parseToRefer("t_user", "FUserId",
		 * "FChangeUser", "FName", sysOrderTemp.getChangeUserName()));// 变更人
		 */
		refers.add(syncService.parseToRefer("t_user", "FUserId", "FChangeUser",
				"FName", sysOrderTemp.getChangeUserName()));// 变更人

		JSONObject syscustomjo = new JSONObject();
		syscustomjo.put("fitemclassid", 3014);
		/**
		 * if(ddlType.equals(DDLType.DELETE)){
		 * refers.add(syncService.parseToRefer("t_Item", "fitemid",
		 * "fheadselfs0151"
		 * ,"FName",sysOrderTemp.getSystemConsumer(),syscustomjo));//体系客户 }else
		 * { refers.add(syncService.parseToRefer("fheadselfs0151",
		 * "sysCustom"));//体系客户 }
		 */
		refers.add(syncService.parseToRefer("t_Item", "fitemid",
				"fheadselfs0151", "FName", sysOrderTemp.getSystemConsumer(),
				syscustomjo));// 体系客户
		JSONObject modeljo = new JSONObject();
		modeljo.put("fitemclassid", 3012);
		refers.add(syncService.parseToRefer("t_Item", "fitemid",
				"fheadselfs0152", "FName", sysOrderTemp.getModel(), modeljo));// 营销部模式
		JSONObject finalConsumer = new JSONObject();
		finalConsumer.put("fitemclassid", 1);
		refers.add(syncService.parseToRefer("t_Item", "FName",
				"fheadselfs0153", "FName", sysOrderTemp.getFinalConsumer(),
				finalConsumer));// 最终用户
		JSONObject saleprovincejo = new JSONObject();
		saleprovincejo.put("fitemclassid", 3013);
		refers.add(syncService.parseToRefer("t_Item", "fitemid",
				"fheadselfs0154", "FName", sysOrderTemp.getProvince(),
				saleprovincejo));// 营销部省份
		JSONObject bussinesstypejo = new JSONObject();
		bussinesstypejo.put("fitemclassid", 3020);
		refers.add(syncService.parseToRefer("t_Item", "fitemid",
				"fheadselfs0155", "FName", sysOrderTemp.getBussinessType()
						.equals("1") ? "基础业务" : "大项目业务", bussinesstypejo));// 业务类型
		if (ddlType.equals(DDLType.UPDATE)) {
			JSONObject wherejo = new JSONObject();
			wherejo.put("FBillNo", sysOrderTemp.getOrderCode());
			Integer version = Integer.valueOf(sysOrderTemp.getContractVersion()
					.substring(0, sysOrderTemp.getContractVersion().length())) - 1;
			if (String.valueOf(version).length() == 1) {
				wherejo.put("FVersionNo", "00" + version);
			} else if (String.valueOf(version).length() == 2) {
				wherejo.put("FVersionNo", "0" + version);
			} else {
				wherejo.put("FVersionNo", version);
			}
			orderTable.setWheres(wherejo);
		}
		orderTable.setColumns(columnjo);
		orderTable.setRefers(refers);
		return orderTable;
	}
	
	//定义一个方法用来格式化实数
	public String formateNumber(double d,int minimum){
	    NumberFormat  nf = NumberFormat.getInstance();//NumberFormat是java.text.NumberFormat包里的类
	    nf.setMinimumFractionDigits(minimum);//保留小数点两位
	    return nf.format(d).replace(",", "");
	}
	
	/**
	 * 组装订单分录
	 * 
	 * @param sysOrderTemp
	 *            需要同步的订单
	 * @param product
	 *            需要同步的产品
	 * @return 订单分录表
	 */
	private SyncTable parseToSeOrderEntryExam(SysOrder sysOrderTemp,
			Product product, String ddlType) throws ServiceException {
		// 分录表开始组装
		SyncTable proSyncTable = null;
		// 表字段对应
		JSONObject procolumnjo = null;
		// 产品关联字段对应
		List<JSONObject> prorefers = new ArrayList<JSONObject>();
		proSyncTable = new SyncTable();
		proSyncTable.setTableName("SEOrderEntry");
		proSyncTable.setDdlType(ddlType);

		procolumnjo = new JSONObject();
		procolumnjo.put("fbrno", "0");// 机构内码
		if (ddlType.equals(DDLType.INSERT)) {
			procolumnjo.put("fentryid", product.getOrderTrNumber());// 分录号
		}
		procolumnjo.put("fqty", product.getProductCount());// 数量 浮点型 *
		procolumnjo.put("FAuxQty", product.getProductCount());// 辅助订货数量 浮点型 *

		//procolumnjo.put("FTaxPrice", product.getUnitPrice());// 含税单价 浮点型 *
		
		procolumnjo.put("FTaxPrice", product.getListprice());// 含税单价 浮点型 *

		//procolumnjo.put("FAuxTaxPrice", product.getUnitPrice());// 辅助含税单价 浮点型 *
		procolumnjo.put("FAuxTaxPrice", product.getListprice());// 辅助含税单价 浮点型 *

		/*
		 * procolumnjo.put("FAmount", product.getProductCount()
		 * product.getUnitPrice() / (1 + product.getTaxRate()));// 不含税金额 // 浮点型
		 * *
		 */
		procolumnjo.put("FAmount", product.getTotalFee());// 不含税金额
		// 浮点型 *
		/*
		 * procolumnjo.put("fprice", product.getUnitPrice() / (1 +
		 * product.getTaxRate()));// 不含税单价 浮点型 *
		 */
		procolumnjo.put("fprice", product.getUnitRemoveTaxH());// 不含税单价 浮点型 *
		procolumnjo.put("FAuxPrice", product.getUnitRemoveTaxH());// 辅助不含税单价
		//从数据库中读取ERP中不含税单价没有存,需要重新计算
		Float exchangeRate = Float.valueOf(sysOrderTemp.getExchangeRateValue());
		Float taxRate= product.getTaxRate();
		Float temptaxRate=MathUtils.multiply(taxRate,
				0.01f).floatValue();//
		temptaxRate=MathUtils.add(temptaxRate,
				1).floatValue();//
		Double unitRemoveTaxH= MathUtils.divide(product.getListprice(),
				temptaxRate).doubleValue();//
		//转换精度不含税单价(原币)4位
		Float unitRemoveTaxHFPriceFor=Float.valueOf(formateNumber(unitRemoveTaxH,4));
		
		Float fprice = MathUtils.multiply(unitRemoveTaxHFPriceFor,
				exchangeRate).floatValue();// 
		Float unitRemoveTaxHfprice=Float.valueOf(formateNumber(Double.valueOf(fprice),4));
				
		procolumnjo.put("fprice", unitRemoveTaxHfprice);// 不含税单价(本币)
		procolumnjo.put("FAuxPrice", unitRemoveTaxHfprice);// 不含税单价(原币)
		

		// ERP中的 FTaxRate=折扣率
		// procolumnjo.put("FTaxRate", product.getDiscountRate());
		if (null != product.getFdiscountrate()
				&& 0 != product.getFdiscountrate()) {
			procolumnjo.put("FTaxRate", (Float.valueOf(product
					.getFdiscountrate()
					+ "")));
		}

		/*
		 * //FBusinessDiscountRate 折扣率 procolumnjo.put("FBusinessDiscountRate",
		 * product.getDiscountRate()); //价税合计 FAmountIncludeTaxFor
		 * procolumnjo.put("FAmountIncludeTaxFor", product.getPriceTaxTotal());
		 */// 在销售订单中没有在合同实体中有
		// 销项税额
		procolumnjo.put("FTaxAmt", product.getSaleTax());
		// 价税合计 FAllStdAmount
		procolumnjo.put("FAllAmount", product.getPriceTaxTotal());//  
		procolumnjo.put("FAllStdAmount", product.getPriceTaxTotal());

		// FTaxAmount as 折扣额,FAllAmount as 价税合计,FAllStdAmount as 价税合计

		// FTaxAmount as 折扣额,FAllAmount as 价税合计,FAllStdAmount as 价税合计

		// 质保金和质保金率不考虑
		// 质保金率
		procolumnjo.put("FEntrySelfS0167", product.getQualityFeeRate());
		// 质保金
		procolumnjo.put("FEntrySelfS0168", product.getQualityFee());

		/*
		 * //服务费
		 * if(null!=product.getServicecharge()&&0!=product.getServicecharge()){
		 * procolumnjo.put("FEntrySelfS0169", product.getServicecharge()); }
		 * //列表价 if(null!=product.getListprice()&&0!=product.getListprice()){
		 * procolumnjo.put("FEntrySelfS0170", product.getListprice()); }
		 */
		/*
		 * procolumnjo.put("FAuxPrice", product.getUnitPrice() / (1 +
		 * product.getTaxRate()));// 辅助不含税单价 浮点型 *
		 */
		// 浮点型 *

		procolumnjo.put("fdate", product.getDeliveryTime());// 交货日期
		procolumnjo.put("FAdviceConsignDate", product.getAdviceDeliveryTime());// 建议交货日期
		procolumnjo.put("fcess", product.getTaxRate());// 税率

		/*
		 * procolumnjo.put("ftaxamount", product.getTotalFee() -
		 * product.getProductCount() * product.getUnitPrice() / (1 +
		 * product.getTaxRate()));// 税额
		 */
		procolumnjo.put("ftaxamount", product.getDiscount());// 折扣额

		//procolumnjo.put("fpricediscount", product.getFactUnitPrice());// 实际含税单价
		
		procolumnjo.put("fpricediscount", product.getFactUnitPrice());// 实际含税单价
		
		//procolumnjo.put("FAuxPriceDiscount", product.getFactUnitPrice());// 辅助实际含税单价
		procolumnjo.put("FAuxPriceDiscount", product.getFactUnitPrice());// 辅助实际含税单价
		
		procolumnjo.put("FSourceBillNo", sysOrderTemp.getContractCode());// 源单单号
		procolumnjo.put("FSourceEntryID", product.getOrderTrNumber());// 源单行号
		procolumnjo.put("FContractBillNo", sysOrderTemp.getContractCode());// 合同单号
		procolumnjo.put("FContractEntryID", product.getOrderTrNumber());// 合同分录
		procolumnjo.put("FEntrySelfS0160", product.getMakeNumberCode());// 制令号
		procolumnjo.put("FStockQty", product.getOutHouseCount());// 出库数量
		procolumnjo.put("FAuxStockQty", product.getAssistUnitOutHouseCount());// 辅助单位出库数量
		if (ddlType.equals(DDLType.INSERT)) {
			prorefers.add(syncService.parseToRefer("icmaxnum", "fmaxnum",
					"finterid", "ftablename", "SEOrder"));// 单据内码
		}
		prorefers.add(syncService.parseToRefer("t_icitem", "FITEMID",
				"FITEMID", "FNumber", product.getProductCode()));// 物料ID *
		prorefers.add(syncService.parseToRefer("t_icitem", "FUnitID",
				"FUnitID", "FNumber", product.getProductCode()));// 单位
		prorefers.add(syncService.parseToRefer("icmaxnum", "fmaxnum",
				"FSourceInterId", "ftablename", "t_RPContract"));// 源单内码 *
		prorefers.add(syncService.parseToRefer("icmaxnum", "fmaxnum",
				"FContractInterID", "ftablename", "t_RPContract"));// 合同内码 *
		JSONObject fEntrySelfS0164jo = new JSONObject();
		fEntrySelfS0164jo.put("fitemclassid", 3010);
		prorefers.add(syncService.parseToRefer("t_Item", "fitemid",
				"FEntrySelfS0164", "FName", product.getProductType(),
				fEntrySelfS0164jo));// 营销部分类
		JSONObject fEntrySelfS0161jo = new JSONObject();
		//fEntrySelfS0161jo.put("fitemclassid", 3001);
//		prorefers.add(syncService.parseToRefer("t_Item", "fName",
//				"FEntrySelfS0161", "fitemid", product.getMaterial(),
//				fEntrySelfS0161jo));// 材质
		prorefers.add(syncService.parseToRefer("t_Item", "fName",
				"FEntrySelfS0161", "fName", product.getMaterialname()
				));// 材质
		proSyncTable.setColumns(procolumnjo);
		proSyncTable.setRefers(prorefers);
		if (ddlType.equals(DDLType.UPDATE)) {
			SyncTable queryTable = new SyncTable();
			queryTable.setTableName("SEOrder");
			queryTable.setDdlType(DDLType.QUERY);
			JSONObject queryWherejo = new JSONObject();
			queryWherejo.put("FBillNo", sysOrderTemp.getOrderCode());
			Integer version = Integer.valueOf(sysOrderTemp.getContractVersion()
					.substring(0, sysOrderTemp.getContractVersion().length())) - 1;
			if (String.valueOf(version).length() == 1) {
				queryWherejo.put("FVersionNo", "00" + version);
			} else if (String.valueOf(version).length() == 2) {
				queryWherejo.put("FVersionNo", "0" + version);
			} else {
				queryWherejo.put("FVersionNo", version);
			}
			queryTable.setWheres(queryWherejo);
			Map<String, Object> map = syncService.queryForObject(queryTable,
					"FInterID");
			System.out.println(map.get("data"));
			if (null != map.get("data")) {
				Long finterId = Long.valueOf(String.valueOf(map.get("data")));
				JSONObject wherejo = new JSONObject();
				wherejo.put("FInterID", finterId);
				wherejo.put("FEntryID", product.getOrderTrNumber());
				proSyncTable.setWheres(wherejo);
			}

		}
		return proSyncTable;
	}
	/**
	 * 组装订单分录
	 * 
	 * @param sysOrderTemp
	 *            需要同步的订单
	 * @param product
	 *            需要同步的产品
	 * @return 订单分录表
	 */
	private SyncTable parseToSeOrderEntry(SysOrder sysOrderTemp,
			Product product, String ddlType) throws ServiceException {
		// 分录表开始组装
		SyncTable proSyncTable = null;
		// 表字段对应
		JSONObject procolumnjo = null;
		// 产品关联字段对应
		List<JSONObject> prorefers = new ArrayList<JSONObject>();
		proSyncTable = new SyncTable();
		proSyncTable.setTableName("SEOrderEntry");
		proSyncTable.setDdlType(ddlType);

		procolumnjo = new JSONObject();
		procolumnjo.put("fbrno", "0");// 机构内码
		if (ddlType.equals(DDLType.INSERT)) {
			procolumnjo.put("fentryid", product.getOrderTrNumber());// 分录号
		}
		procolumnjo.put("fqty", product.getProductCount());// 数量 浮点型 *
		procolumnjo.put("FAuxQty", product.getProductCount());// 辅助订货数量 浮点型 *

		//procolumnjo.put("FTaxPrice", product.getUnitPrice());// 含税单价 浮点型 *
		
		procolumnjo.put("FTaxPrice", product.getListprice());// 含税单价 浮点型 *

		//procolumnjo.put("FAuxTaxPrice", product.getUnitPrice());// 辅助含税单价 浮点型 *
		procolumnjo.put("FAuxTaxPrice", product.getListprice());// 辅助含税单价 浮点型 *

		/*
		 * procolumnjo.put("FAmount", product.getProductCount()
		 * product.getUnitPrice() / (1 + product.getTaxRate()));// 不含税金额 // 浮点型
		 * *
		 */
		procolumnjo.put("FAmount", product.getTotalFee());// 不含税金额
		// 浮点型 *
		/*
		 * procolumnjo.put("fprice", product.getUnitPrice() / (1 +
		 * product.getTaxRate()));// 不含税单价 浮点型 *
		 */
		procolumnjo.put("fprice", product.getUnitRemoveTaxH());// 不含税单价 浮点型 *

		// ERP中的 FTaxRate=折扣率
		// procolumnjo.put("FTaxRate", product.getDiscountRate());
		if (null != product.getFdiscountrate()
				&& 0 != product.getFdiscountrate()) {
			procolumnjo.put("FTaxRate", (Float.valueOf(product
					.getFdiscountrate()
					+ "")));
		}

		/*
		 * //FBusinessDiscountRate 折扣率 procolumnjo.put("FBusinessDiscountRate",
		 * product.getDiscountRate()); //价税合计 FAmountIncludeTaxFor
		 * procolumnjo.put("FAmountIncludeTaxFor", product.getPriceTaxTotal());
		 */// 在销售订单中没有在合同实体中有
		// 销项税额
		procolumnjo.put("FTaxAmt", product.getSaleTax());
		// 价税合计 FAllStdAmount
		procolumnjo.put("FAllAmount", product.getPriceTaxTotal());//  
		procolumnjo.put("FAllStdAmount", product.getPriceTaxTotal());

		// FTaxAmount as 折扣额,FAllAmount as 价税合计,FAllStdAmount as 价税合计

		// FTaxAmount as 折扣额,FAllAmount as 价税合计,FAllStdAmount as 价税合计

		// 质保金和质保金率不考虑
		// 质保金率
		procolumnjo.put("FEntrySelfS0167", product.getQualityFeeRate());
		// 质保金
		procolumnjo.put("FEntrySelfS0168", product.getQualityFee());

		/*
		 * //服务费
		 * if(null!=product.getServicecharge()&&0!=product.getServicecharge()){
		 * procolumnjo.put("FEntrySelfS0169", product.getServicecharge()); }
		 * //列表价 if(null!=product.getListprice()&&0!=product.getListprice()){
		 * procolumnjo.put("FEntrySelfS0170", product.getListprice()); }
		 */
		/*
		 * procolumnjo.put("FAuxPrice", product.getUnitPrice() / (1 +
		 * product.getTaxRate()));// 辅助不含税单价 浮点型 *
		 */procolumnjo.put("FAuxPrice", product.getUnitRemoveTaxH());// 辅助不含税单价
		// 浮点型 *

		procolumnjo.put("fdate", product.getDeliveryTime());// 交货日期
		procolumnjo.put("FAdviceConsignDate", product.getAdviceDeliveryTime());// 建议交货日期
		procolumnjo.put("fcess", product.getTaxRate());// 税率

		/*
		 * procolumnjo.put("ftaxamount", product.getTotalFee() -
		 * product.getProductCount() * product.getUnitPrice() / (1 +
		 * product.getTaxRate()));// 税额
		 */
		procolumnjo.put("ftaxamount", product.getDiscount());// 折扣额

		//procolumnjo.put("fpricediscount", product.getFactUnitPrice());// 实际含税单价
		
		procolumnjo.put("fpricediscount", product.getFactUnitPrice());// 实际含税单价
		
		//procolumnjo.put("FAuxPriceDiscount", product.getFactUnitPrice());// 辅助实际含税单价
		procolumnjo.put("FAuxPriceDiscount", product.getFactUnitPrice());// 辅助实际含税单价
		
		procolumnjo.put("FSourceBillNo", sysOrderTemp.getContractCode());// 源单单号
		procolumnjo.put("FSourceEntryID", product.getOrderTrNumber());// 源单行号
		procolumnjo.put("FContractBillNo", sysOrderTemp.getContractCode());// 合同单号
		procolumnjo.put("FContractEntryID", product.getOrderTrNumber());// 合同分录
		procolumnjo.put("FEntrySelfS0160", product.getMakeNumberCode());// 制令号
		procolumnjo.put("FStockQty", product.getOutHouseCount());// 出库数量
		procolumnjo.put("FAuxStockQty", product.getAssistUnitOutHouseCount());// 辅助单位出库数量
		if (ddlType.equals(DDLType.INSERT)) {
			prorefers.add(syncService.parseToRefer("icmaxnum", "fmaxnum",
					"finterid", "ftablename", "SEOrder"));// 单据内码
		}
		prorefers.add(syncService.parseToRefer("t_icitem", "FITEMID",
				"FITEMID", "FNumber", product.getProductCode()));// 物料ID *
		prorefers.add(syncService.parseToRefer("t_icitem", "FUnitID",
				"FUnitID", "FNumber", product.getProductCode()));// 单位
		prorefers.add(syncService.parseToRefer("icmaxnum", "fmaxnum",
				"FSourceInterId", "ftablename", "t_RPContract"));// 源单内码 *
		prorefers.add(syncService.parseToRefer("icmaxnum", "fmaxnum",
				"FContractInterID", "ftablename", "t_RPContract"));// 合同内码 *
		JSONObject fEntrySelfS0164jo = new JSONObject();
		fEntrySelfS0164jo.put("fitemclassid", 3010);
		prorefers.add(syncService.parseToRefer("t_Item", "fitemid",
				"FEntrySelfS0164", "FName", product.getProductType(),
				fEntrySelfS0164jo));// 营销部分类
		JSONObject fEntrySelfS0161jo = new JSONObject();
		//fEntrySelfS0161jo.put("fitemclassid", 3001);
//		prorefers.add(syncService.parseToRefer("t_Item", "fName",
//				"FEntrySelfS0161", "fitemid", product.getMaterial(),
//				fEntrySelfS0161jo));// 材质
		prorefers.add(syncService.parseToRefer("t_Item", "fName",
				"FEntrySelfS0161", "fitemid", product.getMaterial()
				));// 材质
		
		proSyncTable.setColumns(procolumnjo);
		proSyncTable.setRefers(prorefers);
		if (ddlType.equals(DDLType.UPDATE)) {
			SyncTable queryTable = new SyncTable();
			queryTable.setTableName("SEOrder");
			queryTable.setDdlType(DDLType.QUERY);
			JSONObject queryWherejo = new JSONObject();
			queryWherejo.put("FBillNo", sysOrderTemp.getOrderCode());
			Integer version = Integer.valueOf(sysOrderTemp.getContractVersion()
					.substring(0, sysOrderTemp.getContractVersion().length())) - 1;
			if (String.valueOf(version).length() == 1) {
				queryWherejo.put("FVersionNo", "00" + version);
			} else if (String.valueOf(version).length() == 2) {
				queryWherejo.put("FVersionNo", "0" + version);
			} else {
				queryWherejo.put("FVersionNo", version);
			}
			queryTable.setWheres(queryWherejo);
			Map<String, Object> map = syncService.queryForObject(queryTable,
					"FInterID");
			System.out.println(map.get("data"));
			if (null != map.get("data")) {
				Long finterId = Long.valueOf(String.valueOf(map.get("data")));
				JSONObject wherejo = new JSONObject();
				wherejo.put("FInterID", finterId);
				wherejo.put("FEntryID", product.getOrderTrNumber());
				proSyncTable.setWheres(wherejo);
			}

		}
		return proSyncTable;
	}
	/**
	 * 页面右上角组装收款计划表
	 * 
	 * @param sysOrderTemp
	 *            系统订单
	 * @param collectPay
	 *            收款计划数据
	 * @return 同步表
	 */
	private SyncTable parseToRPContractSchemeExam(SysOrder sysOrderTemp,
			CollectPay collectPay, String ddlType) throws ServiceException {
		// 分录表开始组装
		SyncTable collectSyncTable = null;
		// 表字段对应
		JSONObject collectColumnjo = new JSONObject();
		// 应收款管理关联字段对应
		List<JSONObject> collectRefers = new ArrayList<JSONObject>();
		collectSyncTable = new SyncTable();
		collectSyncTable.setTableName("t_RPContractScheme");
		collectSyncTable.setDdlType(ddlType);

		collectColumnjo.put("FReceiveDate", collectPay.getShouldCollectTime());// 应收日期
		collectColumnjo.put("FExplanation", " ");// 摘要
		collectColumnjo.put("FAmount", collectPay.getShouldCollectFeeRm());// 金额(本位币)
		collectColumnjo.put("FAmountFor", collectPay.getShouldCollectFee());// 金额(原币)
		collectColumnjo.put("FReceiveAmount", collectPay.getPayFeeRM());// 收到金额(本位币)

		collectColumnjo.put("FReceiveAmountFor", collectPay.getPayFee());// 收到金额(原币)
		collectColumnjo.put("FTEXT1", collectPay.getCollectPayType());// 收款方式
		collectColumnjo.put("FTEXT2", collectPay.getGuaranteeLetterType());// 保函种类
		if(null!=collectPay.getGuaranteeLetterStart()
				&&!"".equalsIgnoreCase(collectPay.getGuaranteeLetterStart())){
			collectColumnjo.put("FDate1", collectPay.getGuaranteeLetterStart());// 保函起始时间
		}
		if(null!=collectPay.getGuaranteeLetterStart()
				&&!"".equalsIgnoreCase(collectPay.getGuaranteeLetterEnd())){
			collectColumnjo.put("FDate2", collectPay.getGuaranteeLetterEnd());// 保函终止时间
		}
		if (ddlType.equals(DDLType.INSERT)) {
			collectRefers.add(syncService.parseToRefer("icmaxnum", "fmaxnum-1",
					"FContractID", "ftablename", "t_RPContract"));// 保存时加入 合同内码
		}
		collectRefers.add(syncService.parseToRefer("t_Currency", "fcurrencyid",
				"fcurrencyid", "FNumber", sysOrderTemp.getCoinType()));// 币别内码
		/*
		 * collectRefers.add(syncService.parseToRefer("t_ExchangeRateEntry",
		 * "FExchangeRate", "FExchangeRate", "FNumber", sysOrderTemp
		 * .getExchangeRate()));// 汇率
		 */collectRefers.add(syncService.parseToRefer("t_ExchangeRateEntry",
				"FExchangeRate", "FExchangeRate", "FNumber", sysOrderTemp
						.getExchangeRateNumber()));// 汇率

		collectSyncTable.setRefers(collectRefers);
		collectSyncTable.setColumns(collectColumnjo);
		if (ddlType.equals(DDLType.UPDATE)) {
			JSONObject wherejo = new JSONObject();
			wherejo.put("FContractBillNo", sysOrderTemp.getOrderCode());
			collectSyncTable.setWheres(wherejo);// 更新通过合同单据号
		}
		return collectSyncTable;
	}
	/**
	 * 页面右上角组装收款计划表
	 * 
	 * @param sysOrderTemp
	 *            系统订单
	 * @param collectPay
	 *            收款计划数据
	 * @return 同步表
	 */
	private SyncTable parseToRPContractScheme(SysOrder sysOrderTemp,
			CollectPay collectPay, String ddlType) throws ServiceException {
		// 分录表开始组装
		SyncTable collectSyncTable = null;
		// 表字段对应
		JSONObject collectColumnjo = new JSONObject();
		// 应收款管理关联字段对应
		List<JSONObject> collectRefers = new ArrayList<JSONObject>();
		collectSyncTable = new SyncTable();
		collectSyncTable.setTableName("t_RPContractScheme");
		collectSyncTable.setDdlType(ddlType);

		collectColumnjo.put("FReceiveDate", collectPay.getShouldCollectTime());// 应收日期
		collectColumnjo.put("FExplanation", " ");// 摘要
		collectColumnjo.put("FAmount", collectPay.getShouldCollectFeeRm());// 金额(本位币)
		collectColumnjo.put("FAmountFor", collectPay.getShouldCollectFee());// 金额(原币)
		collectColumnjo.put("FReceiveAmount", collectPay.getPayFeeRM());// 收到金额(本位币)

		collectColumnjo.put("FReceiveAmountFor", collectPay.getPayFee());// 收到金额(原币)
		collectColumnjo.put("FTEXT1", collectPay.getCollectPayType());// 收款方式
		collectColumnjo.put("FTEXT2", collectPay.getGuaranteeLetterType());// 保函种类
		if(null!=collectPay.getGuaranteeLetterStart()
				&&!"".equalsIgnoreCase(collectPay.getGuaranteeLetterStart())){
			collectColumnjo.put("FDate1", collectPay.getGuaranteeLetterStart());// 保函起始时间
		}
		if(null!=collectPay.getGuaranteeLetterStart()
				&&!"".equalsIgnoreCase(collectPay.getGuaranteeLetterEnd())){
			collectColumnjo.put("FDate2", collectPay.getGuaranteeLetterEnd());// 保函终止时间
		}
		if (ddlType.equals(DDLType.INSERT)) {
			collectRefers.add(syncService.parseToRefer("icmaxnum", "fmaxnum-1",
					"FContractID", "ftablename", "t_RPContract"));// 保存时加入 合同内码
		}
		collectRefers.add(syncService.parseToRefer("t_Currency", "fcurrencyid",
				"fcurrencyid", "FNumber", sysOrderTemp.getCoinType()));// 币别内码
		/*
		 * collectRefers.add(syncService.parseToRefer("t_ExchangeRateEntry",
		 * "FExchangeRate", "FExchangeRate", "FNumber", sysOrderTemp
		 * .getExchangeRate()));// 汇率
		 */collectRefers.add(syncService.parseToRefer("t_ExchangeRateEntry",
				"FExchangeRate", "FExchangeRate", "FNumber", sysOrderTemp
						.getExchangeRateNumber()));// 汇率

		collectSyncTable.setRefers(collectRefers);
		collectSyncTable.setColumns(collectColumnjo);
		if (ddlType.equals(DDLType.UPDATE)) {
			JSONObject wherejo = new JSONObject();
			wherejo.put("FContractBillNo", sysOrderTemp.getOrderCode());
			collectSyncTable.setWheres(wherejo);// 更新通过合同单据号
		}
		return collectSyncTable;
	}

	@Override
	public Page<SysOrder> findPage(Page<SysOrder> page,
			SysOrderQuery sysOrderQuery) {
		Page<SysOrder> returnPage = sysOrderDao.findPage(page, sysOrderQuery);
		returnPage.setResult(returnPage.getResult());
		return returnPage;
	}
	/**
	 * 查询订单
	 */
	public List<SysOrder> listSysOrders( 
			SysOrderQuery sysOrderQuery) {
		return sysOrderDao.listSysOrders(sysOrderQuery);
	}

	@Override
	public void deleteOrder(Long id) {
		sysOrderDao.deleteById(id);
	}

	@Override
	public void deleteByMultipleId(List<Long> checkedIdList) {
		String delIds = StringUtils.join(checkedIdList, ",");
		sysOrderDao.deleteByMultipleId(delIds);
	}

	@Override
	public void deleteByMultipleOrderCode(List<String> checkedCodeList) {
		// 组装的同步表列表
		// List<SyncTable> syncTables = new ArrayList<SyncTable>();
		// SysOrder sysOrderTemp = null;
		// for(String str:checkedCodeList){
		// 获取要同步的系统订单
		// sysOrderTemp = sysOrderDao.getByColumn("SysOrder.getByOrderCode",
		// str);
		// 获取要同步的此订单的产品信息
		// ProductQuery pQuery = new ProductQuery();
		// pQuery.setOrderCode(sysOrderTemp.getOrderCode());
		// List<Product> products = productDao.findList(pQuery);
		// 获取要同步的此订单的应收款信息
		// CollectPayQuery cPayQuery = new CollectPayQuery();
		// cPayQuery.setOrderCode(sysOrderTemp.getOrderCode());
		// List<CollectPay> collectPays = collectPayDao.findList(cPayQuery);

		// for(Product product:products){
		// syncTables.add(parseToContractEntry(sysOrderTemp,
		// product,DDLType.DELETE));
		// }
		// for(Product product:products){
		// syncTables.add(parseToSeOrderEntry(sysOrderTemp,
		// product,DDLType.DELETE));
		// }
		// SyncTable updateTable = new SyncTable();
		// updateTable.setTableName("SEOrder");
		// updateTable.setDdlType(DDLType.UPDATE);
		// JSONObject columnjo = new JSONObject();
		// columnjo.put("fstatus", 0);
		// columnjo.put("fcheckerid", "");
		// columnjo.put("fcheckdate", "");
		// updateTable.setColumns(columnjo);

		// JSONObject wherejo = new JSONObject();
		// wherejo.put("fbillno", sysOrderTemp.getOrderCode());
		// updateTable.setWheres(wherejo);
		// syncTables.add(updateTable);
		// if(collectPays.size()>0){
		// syncTables.add(parseToRPContractScheme(sysOrderTemp,
		// collectPays.get(0),DDLType.DELETE));
		// }
		// syncTables.add(parseToOrder(sysOrderTemp,DDLType.DELETE));
		// syncTables.add(parseToContract(sysOrderTemp,null,DDLType.DELETE));
		// }
		// Map<String, Object> resultMap = syncService.sync(syncTables);
		// if(!(Boolean)resultMap.get("result")){
		// System.out.println("error message:"+resultMap.get("error"));
		// throw new RuntimeException();
		// }
		String delCodes = joinOrderCode(checkedCodeList, ",");
		sysOrderDao.deleteByMultipleId("SysOrder.deleteSysOrderByOrderCode",
				delCodes);
		productDao.deleteByMultipleId("Product.deleteProductByOrderCode",
				delCodes);
		collectPayDao.deleteByMultipleId(
				"CollectPay.deleteCollectPayByOrderCode", delCodes);
		operationLogDao.save(ConfigTerrence.MODEL_SYSORDER, ConfigTerrence.OPT_DEL, "订单编号为："+delCodes+"的系统订单删除成功");
	}

	@Override
	public SysOrder getById(Long id) {
		return sysOrderDao.getById(id);
	}

	/**
	 * 查询系统订单列表
	 * 
	 * @param order
	 * @return
	 */
	public List<SysOrder> findlistBySysOrderCodes(SysOrderQuery sysorderQuery) {
		return sysOrderDao.findlistBySysOrderCodes(sysorderQuery);
	}

	/**
	 * 通过系统订单编号查询系统订单列表
	 * 
	 * @param order
	 * @return
	 */
	public List<SysOrder> findlistBySysOrderCode(SysOrderQuery sysorderQuery) {
		return sysOrderDao.findlistBySysOrderCode(sysorderQuery);
	}

	@Override
	public Long saveSysOrder(Order orderEntity) {
		SysOrder sysOrder = new SysOrder();
		sysOrder.setOrderCode(orderEntity.getOrderCode());// 订单编号

		sysOrder.setUserName(orderEntity.getUserName());// 负责人名称
		sysOrder.setCheckProject(orderEntity.getProjectName());// 工程项目名称
		sysOrder.setSystemConsumer(orderEntity.getSystemConsumer());// 体系客户
		sysOrder.setSystemConsumerId(orderEntity.getSystemConsumerId());// 体系客户id

		sysOrder.setBussinessType(orderEntity.getBussinessType());// 业务类型

		sysOrder.setContractTime(formt.format(new Date()));// 合同签订时间(yyyy-MM-dd)

		sysOrder.setContractVersion("-1");// 合同版本第一次为-1
		sysOrder.setSysOrderStatus(0);// 合同状态 0 待提交 1 待审核 2 已生效 3 被驳回 4 关闭

		// 保存保准订单中的国产PL信息
		int pL3000Count = orderEntity.getpL3000Count();
		sysOrder.setpL3000Count(pL3000Count);

		double pL3000Unit = orderEntity.getpL3000Unit();
		sysOrder.setpL3000Unit(pL3000Unit);

		double pL3000ListPrice = orderEntity.getpL3000ListPrice();
		sysOrder.setpL3000ListPrice(pL3000ListPrice);

		int sSV3500Count = orderEntity.getsSV3500Count();
		sysOrder.setsSV3500Count(sSV3500Count);

		double sSV3500Unit = orderEntity.getsSV3500Unit();
		sysOrder.setsSV3500Unit(sSV3500Unit);

		double sSV3500ListPrice = orderEntity.getsSV3500ListPrice();
		sysOrder.setsSV3500ListPrice(sSV3500ListPrice);

		int pL4200Count = orderEntity.getpL4200Count();
		sysOrder.setpL4200Count(pL4200Count);

		double pL4200Unit = orderEntity.getpL4200Unit();
		sysOrder.setpL4200Unit(pL4200Unit);

		double pL4200ListPrice = orderEntity.getpL4200ListPrice();
		sysOrder.setpL4200ListPrice(pL4200ListPrice);

		int sPL2000Count = orderEntity.getsPL2000Count();
		sysOrder.setsPL2000Count(sPL2000Count);

		double sPL2000Unit = orderEntity.getsPL2000Unit();
		sysOrder.setsPL2000Unit(sPL2000Unit);

		double sPL2000ListPrice = orderEntity.getsPL2000ListPrice();
		sysOrder.setsPL2000ListPrice(sPL2000ListPrice);

		sysOrder.setUserId(orderEntity.getUserId());
		sysOrder.setUserName(orderEntity.getUserName());

		sysOrder.setBillUserId(orderEntity.getBillUserId());
		sysOrder.setBillUserName(orderEntity.getBillUserName());

		sysOrder.setContainProductType(orderEntity.getContainProductType());

		Double nostraightcoeff = orderEntity.getNostraightcoeff();// 标准订单奖励系数
		if (null != nostraightcoeff) {
			sysOrder.setDisCoefficient(nostraightcoeff);
		}
		Double operatorrate = orderEntity.getOperatorrate();// 标准订单业务费系数
		if (null != operatorrate) {
			sysOrder.setOperatorrate(operatorrate);
		}
		sysOrder.setBusinessUser(orderEntity.getUserName());// 保存标准订单中的负责人为系统订单中的业务员
		sysOrder.setBusinessUserId(orderEntity.getUserId());
		if (null != orderEntity.getSalemethod()
				&& "1".equals(orderEntity.getSalemethod())) {// 经销
			sysOrder.setModel("经销商");
		}
		if (null != orderEntity.getSalemethod()
				&& "2".equals(orderEntity.getSalemethod())) {// 直销
			sysOrder.setModel("直签");
			/*
			 * sysOrder.setOperatorrate(1d);//直销系数为1
			 * sysOrder.setDisCoefficient(1d);//直销系数为1
			 */}
		sysOrder.setIssummary(0);
		return sysOrderDao.save(sysOrder);
	}

	/**
	 * 更新系统订单
	 */
	@Override
	public void updateTogather(SysOrder sysOrder, String products,
			String collectPays, String delcollectPays, String delproducts) {
		// ERP中备份的变更数据
		SysOrder backupOrder = getById(sysOrder.getSysOrderId());// 得到系统订单

		if (null != sysOrder.getContractOldCode()
				&& (!sysOrder.getContractOldCode().equals(
						sysOrder.getContractCode()))) {
			// 修改的合同编号和旧的不一样
			backupOrder.setContractOldCode(sysOrder.getContractOldCode());// 老合同编号
			backupOrder.setContractCode(sysOrder.getContractCode());// 新合同编号
		}

		List<Product> backupProducts = null;
		List<CollectPay> backupCollectPays = null;

		if (!sysOrder.getContractVersion().equals("-1")) {
			
			// 获取要同步的此订单的产品信息
			ProductQuery pQuery = new ProductQuery();
			pQuery.setOrderCode(sysOrder.getOrderCode());

			backupProducts = productDao.findList(pQuery);// 得到系统订单关联的产品
			// 获取要同步的此订单的应收款信息
			CollectPayQuery cPayQuery = new CollectPayQuery();
			cPayQuery.setOrderCode(sysOrder.getOrderCode());
			backupCollectPays = collectPayDao.findList(cPayQuery);// 得到系统订单关联的收款计划表
		}

		List<Product> productList = null;
		//List<Product> productListERP = null;
		List<CollectPay> collectPayList = null;

		Integer version = Integer.valueOf(sysOrder.getContractVersion()
				.substring(0, sysOrder.getContractVersion().length())) + 1;// 获取要更新的系统订单的版本

		if (String.valueOf(version).length() == 1) {
			sysOrder.setContractVersion("00" + version);
		} else if (String.valueOf(version).length() == 2) {
			sysOrder.setContractVersion("0" + version);
		} else {
			sysOrder.setContractVersion("" + version);// 设置合同版本
		}
		//sysOrder.setChangeTime(formt.format(new Date()));// 设置合同变更时间
		// AdminSession admin =
		// (AdminSession)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		// sysOrder.setChangeUserName(admin.getAdmin().getAdminName());//变更人

		// sysOrder.setChangeUserName("冯伟强");在页面中已经取到
		// sysOrder.setChangeUserId(23L);

		if (backupOrder.getSysOrderStatus().intValue() == 2) {// 系统订单的状态为2为审核状态
			sysOrder.setChangeAreaType(1);// 系统订单的状态为2为审核状态一些字段不允许再修改
		} else {
			sysOrder.setChangeAreaType(0);
		}

		String exchangeRateSelect = sysOrder.getExchangeRate();
		if (null != exchangeRateSelect) {
			sysOrder.setExchangeRate(exchangeRateSelect.split("\\|")[2]);// 汇率文本
			sysOrder.setExchangeRateValue(exchangeRateSelect.split("\\|")[0]);// 计算本位币用
			sysOrder.setExchangeRateNumber(exchangeRateSelect.split("\\|")[1]);// 同步用

			backupOrder.setExchangeRate(exchangeRateSelect.split("\\|")[2]);// 汇率文本
			backupOrder
					.setExchangeRateValue(exchangeRateSelect.split("\\|")[0]);// 计算本位币用
			backupOrder
					.setExchangeRateNumber(exchangeRateSelect.split("\\|")[1]);// 同步用
		}

		sysOrderDao.update(sysOrder);// 排产更新系统订单
		sysOrderDao.save(sysOrder, "SysOrder.insert.history");// 排产插入系统订单历史

		if (null != products && !products.equals("")) {
			productList = parseProducts(products, sysOrder.getOrderCode(),
					sysOrder.getContractVersion());
			
			/*productListERP = parseProductsERP(products, sysOrder.getOrderCode(),
					sysOrder.getContractVersion());*/

			for (Product product : productList) {
				//modify by tly 设置到更新产品的子PL产品行,所以修改产品改为直接删除后,在保存
				/*if (null != product.getProductId()) {
					productDao.update(product);
				} else {
					productDao.save(product);
				}*/
				//modify by tly 设置到更新产品的子PL产品行,所以修改产品改为直接删除后,在保存
				//先删除产品
				productDao.deleteById(product.getProductId());
				//再保存
				String pLProducts=product.getpLProducts();
				if(null!=pLProducts&&""!=pLProducts){
					product.setIspl(1);
				}else{
					product.setIspl(0);
				}
				Long  productId=productDao.save(product);// 保存web端产品表
				Long  productIdHistory=productDao.save(product, "Product.insert.history");// 保存历史
				//同时保存产品关联的PL产品
				try {
					if(null!=product.getpLProducts()&&""!=product.getpLProducts()){
						List<Productpl> productplList=OrgJsonUtil.ParseJsonMethod(product.getpLProducts());
						
						for (Productpl productpl : productplList) {
							productpl.setProductId(productId);
							productplDao.save(productpl);//依次保存产品关联的PL产品
						}
						for (Productpl productplHistory : productplList) {
							productplHistory.setProductId(productIdHistory);
							//同时保存产品关联的PL产品历史
							productplDao.save(productplHistory,"Productpl.insert.history");
						}
						
					}
					} catch (JSONException e) {
						// TODO Auto-generated catch block
						throw new ServiceException(e.getMessage()); 
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						throw new ServiceException(e.getMessage());
					}catch (DataAccessException e) {
						// TODO Auto-generated catch block
						throw new ServiceException(e.getMessage());
					}
				
			}
		}
		// 页面中的应收款信息
		if (null != collectPays && !collectPays.equals("")) {// 非空保存或更新
			collectPayList = parseCollectPays(collectPays, sysOrder
					.getOrderCode(), sysOrder.getContractVersion());
			for (CollectPay collectPay : collectPayList) {
				if (null != collectPay.getCollectPayId()) {
					collectPayDao.update(collectPay);
				} else {
					collectPayDao.save(collectPay);
				}
				collectPayDao.save(collectPay, "CollectPay.insert.history");// 更新收款管理类
			}
		}
		if (delproducts.length() > 0) {
			String[] delproductsArr = delproducts.split(",");
			for (String productIdStr : delproductsArr) {
				productDao.deleteById(Long.valueOf(productIdStr));
			}
		}

		if (delcollectPays.length() > 0) {
			String[] delcollectPaysArr = delcollectPays.split(",");
			for (String collectPayIdStr : delcollectPaysArr) {
				collectPayDao.deleteById(Long.valueOf(collectPayIdStr));
			}
		}
		// backupOrder,backupProducts,backupCollectPays 数据库记录的
		// productList,collectPayList页面中的
		// 更新操作,修改操作不同步ERP
		  /*List<SyncTable> syncTables =
		  parseToSyncTables(backupOrder,backupProducts,backupCollectPays,
				  productList,collectPayList);
		  
		  Map<String, Object> resultMap =
		  syncService.sync(syncTables);//修改操作也要更新K3
		  if(!(Boolean)resultMap.get("result")){ throw new RuntimeException(
		  (String)resultMap.get("resultinfo") ); }*/
		  

	}

	private List<CollectPay> parseCollectPays(String collectPays,
			String orderCode, String version) throws ServiceException {
		List<CollectPay> collectPayList = new ArrayList<CollectPay>();
		String[] collectPayArr = collectPays.split("\\|");
		CollectPay collectPay = null;
		for (int i = 0; i < collectPayArr.length; i++) {
			String[] collcetPayValues = collectPayArr[i].split(",");
			collectPay = new CollectPay();
			collectPay.setOrderCode(orderCode);
			if (!collcetPayValues[0].equals("null")
					&& !collcetPayValues[0].equals("")) {
				collectPay.setCollectPayId(Long.valueOf(collcetPayValues[0]));// 收款管理ID
			}
			collectPay.setPlanCollectTime(collcetPayValues[1]);//
			collectPay.setShouldCollectTime(collcetPayValues[2]);
			collectPay.setShouldCollectFee(Double.valueOf(collcetPayValues[3]));
			collectPay.setShouldCollectFeeRm(Double
					.valueOf(collcetPayValues[4]));
			collectPay.setCollectPayType(collcetPayValues[5].equals("") ? ""
					: collcetPayValues[5]);
			collectPay
					.setGuaranteeLetterType(collcetPayValues[6].equals("") ? ""
							: collcetPayValues[6]);
			collectPay
					.setGuaranteeLetterStart(collcetPayValues[7].equals("") ? ""
							: collcetPayValues[7]);
			collectPay
					.setGuaranteeLetterEnd(collcetPayValues[8].replaceAll(" ","").equals("") ? ""
							: collcetPayValues[8]);
			collectPay.setCollectPayVersion(version);
			collectPayList.add(collectPay);
		}
		return collectPayList;
	}

	/**
	 * 
	 * @param products
	 *            订单关联产品
	 * @param orderCode
	 *            订单编号
	 * @param version
	 *            订单版本
	 * @return
	 */
	private List<Product> parseProducts(String products, String orderCode,
			String version) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		String[] productArr = products.split("\\|");
		Product product = null;
		for (int i = 0; i < productArr.length; i++) {
			String[] productValues = productArr[i].split("-spit-");
			product = new Product();
			/**
			 * 1行号? 2产品代码3产品名称4对外销售名称5材质6执行标准7规格型号8类别9项目名称10辅助属性 11单位名12数量13辅助单位
			 * 14换算率 15辅助数量 16单价(不含税)17含税单价18服务/工程费单价19列表单价20结算单价
			 * 21总金额（元）22税率(%)
			 * 23折扣率(%)24折扣25实际含税单价26销项税额27价税合计28交货时间29建议交货时间30质保金率(%) 31
			 * 质保金32制令号33任务单号34辅助单位出库数量35客户BOM36成本对象37开票数量38辅助单位开票数量39辅助单位组装数量
			 * 40基本单位组装数量 41组装数量42备注,43产品行关联PL产品
			 */

			product.setOrderCode(orderCode);// 2产品代码
			// 影藏域中产品ID productIdHiddenTD
			if (!productValues[0].equals("null")
					&& !productValues[0].equals("")) {
				product.setProductId(Long.valueOf(productValues[0]));// 产品ID
			}
			// 规格型号 6
			if (!productValues[1].equals("null")
					&& !productValues[1].equals("")) {
				product.setSpecifications(productValues[1]);// 规格型号
			}
			// product.setProductType(productValues[2]);
			// 产品名称 2
			if (!productValues[2].equals("null")
					&& !productValues[2].equals("")) {
				product.setProductName(productValues[2]);// 产品名称
			}
			// 产品数量 11
			if (!productValues[3].equals("null")
					&& !productValues[3].equals("")) {
				product.setProductCount(Float.valueOf(productValues[3]));// 数量
			}
			// 含税单价 15
			if (!productValues[4].equals("null")
					&& !productValues[4].equals("")) {
				product.setUnitPrice(Double.valueOf(productValues[4]));// 含税单价
			}
			// 折扣额 20
			if (!productValues[5].equals("null")
					&& !productValues[5].equals("")) {
				product.setDiscount(Float.valueOf(productValues[5]));
			}
			// 总金额 17

			if (!productValues[6].equals("null")
					&& !productValues[6].equals("")) {
				product.setTotalFee(Float.valueOf(productValues[6]));
			}
			// 交货时间 26
			if (!productValues[7].equals("null")
					&& !productValues[7].equals("")) {
				product.setDeliveryTime(productValues[7]);
			}

			product.setProductVersion(version);
			// 产品代码 1
			if (!productValues[8].equals("null")
					&& !productValues[8].equals("")) {
				product.setProductCode(productValues[8]);
			}
			// product.setBaseUnitName(productValues[9]);
			// product.setBaseUnitCount(productValues[10].equals("")?null:Integer.valueOf(productValues[10]));
			/*
			 * if (!productValues[11].equals("null") &&
			 * !productValues[11].equals("")) {
			 * product.setProductUnit(productValues[11]); }
			 */
			// undefined baseUnitName
			// 单位名
			if (!productValues[11].equals("null")
					&& !productValues[11].equals("")) {
				product.setMeasureunitname(productValues[11]);
			}
			// undefined baseUnitCount
			// 建议交货时间 27
			if (!productValues[12].equals("null")
					&& !productValues[12].equals("")) {
				product.setAdviceDeliveryTime(productValues[12]);
			}
			// 不含税单价 16
			if (!productValues[13].equals("null")
					&& !productValues[13].equals("")) {
				product.setUnitRemoveTax(productValues[13].equals("") ? null
						: Float.valueOf(productValues[13]));
			}
			// 换算率 13
			if (!productValues[14].equals("null")
					&& !productValues[14].equals("")) {
				product.setConvertRate(productValues[14].equals("") ? null
						: Float.valueOf(productValues[14]));
			}
			// 税率 18
			if (!productValues[15].equals("null")
					&& !productValues[15].equals("")) {
				product.setTaxRate(productValues[15].equals("") ? null : Float
						.valueOf(productValues[15]));
			}
			// 折扣率 19
			if (!productValues[16].equals("null")
					&& !productValues[16].equals("")) {
				product.setDiscountRate(productValues[16].equals("") ? null
						: Float.valueOf(productValues[16]));
				// 设置WEB端统计用的折扣率
				product.setFdiscountrate((double) ((float) 100 - Float
						.valueOf(productValues[16])));
			}
			// 实际含税单价 21
			if (!productValues[17].equals("null")
					&& !productValues[17].equals("")) {
				product.setFactUnitPrice(productValues[17].equals("") ? null
						: Float.valueOf(productValues[17]));
			}
			// 销项税额 22
			if (!productValues[18].equals("null")
					&& !productValues[18].equals("")) {
				product.setSaleTax(productValues[18].equals("") ? null : Double
						.valueOf(productValues[18]));
			}
			// 价税合计 23
			if (!productValues[19].equals("null")
					&& !productValues[19].equals("")) {
				product.setPriceTaxTotal(productValues[19].equals("") ? null
						: Double.valueOf(productValues[19]));
			}
			// 制令号 24
			if (!productValues[20].equals("null")
					&& !productValues[20].equals("")) {
				product.setMakeNumberCode(productValues[20]);
			}
			// 任务单号 25
			if (!productValues[21].equals("null")
					&& !productValues[21].equals("")) {
				product.setTaskCode(productValues[21]);
			}
			// product.setReferCount(productValues[22].equals("")?null:Integer.valueOf(productValues[22]));
			// product.setAssistUnitReferCount(productValues[23].equals("")?null:Integer.valueOf(productValues[23]));
			// 辅助单位出库数量 关联出库单 31
			if (!productValues[24].equals("null")
					&& !productValues[24].equals("")) {
				product
						.setAssistUnitOutHouseCount(productValues[24]
								.equals("") ? null : Integer
								.valueOf(productValues[24]));
			}
			// product.setOutHouseCount(productValues[25].trim().equals("")?null:Integer.valueOf(productValues[25]));
			// 材质 4
			if (!productValues[26].equals("null")
					&& !productValues[26].equals("")) {
				product.setMaterialname(productValues[26]);
			}
			// 辅助数量 14
			if (!productValues[27].equals("null")
					&& !productValues[27].equals("")) {
				product.setProductAssistCount(productValues[27].trim().equals(
						"") ? null : Float.valueOf(productValues[27]));
			}
			// 分类 7
			if (!productValues[28].equals("null")
					&& !productValues[28].equals("")) {
				product
						.setProductType(productValues[28].trim().equals("") ? null
								: productValues[28].trim());
			}
			// 对外销售名称 3
			if (!productValues[29].equals("null")
					&& !productValues[29].equals("")) {
				product
						.setOutSaleName(productValues[29].trim().equals("") ? null
								: productValues[29].trim());
			}
			// 项目名称 8
			if (!productValues[30].equals("null")
					&& !productValues[30].equals("")) {
				product
						.setProProjectName(productValues[30].trim().equals("") ? null
								: productValues[30].trim());
			}
			// 辅助属性 9
			if (!productValues[31].equals("null")
					&& !productValues[31].equals("")) {
				product
						.setAssistAttribute(productValues[31].trim().equals("") ? null
								: productValues[31].trim());
			}
			// 执行标准 5
			if (!productValues[32].equals("null")
					&& !productValues[32].equals("")) {
				product
						.setExcuteStandard(productValues[32].trim().equals("") ? null
								: productValues[32].trim());
			}
			// 辅助单位 12
			if (!productValues[33].equals("null")
					&& !productValues[33].equals("")) {
				product
						.setAssistUnit(productValues[33].trim().equals("") ? null
								: productValues[33].trim());
			}
			// 备注 28
			if (!productValues[34].equals("null")
					&& !productValues[34].equals("")) {
				product.setRemarks(productValues[34].trim().equals("") ? null
						: productValues[34].trim());
			}
			// 客户BOM 32
			if (!productValues[35].equals("null")
					&& !productValues[35].equals("")) {
				product.setCustomBOM(productValues[35].trim().equals("") ? null
						: productValues[35].trim());
			}
			// 成本对象 33
			if (!productValues[36].equals("null")
					&& !productValues[36].equals("")) {
				product.setCostObj(productValues[36].trim().equals("") ? null
						: productValues[36].trim());
			}
			// product.setSourceOrderCode(productValues[37].trim().equals("")?null:productValues[37].trim());
			// product.setContactCode(productValues[38].trim().equals("")?null:productValues[38].trim());
			// 开票数量 关联开票 36
			if (!productValues[39].equals("null")
					&& !productValues[39].equals("")) {
				product.setBillCount(productValues[39].trim().equals("") ? null
						: Integer.valueOf(productValues[39]));
			}
			// 辅助单位开票数量 37
			if (!productValues[40].equals("null")
					&& !productValues[40].equals("")) {
				product
						.setAssistCompanyBillCount(productValues[40].trim()
								.equals("") ? null : Integer
								.valueOf(productValues[40]));
			}
			// 辅助单位组装数量 38
			if (!productValues[41].equals("null")
					&& !productValues[41].equals("")) {
				product
						.setAssistCompanyFitCount(productValues[41].trim()
								.equals("") ? null : Integer
								.valueOf(productValues[41]));
			}
			// 基本单位组装数量 39
			if (!productValues[42].equals("null")
					&& !productValues[42].equals("")) {
				product.setBaseCompanyFitCount(productValues[42].trim().equals(
						"") ? null : Integer.valueOf(productValues[42]));
			}
			// 组装数量 40
			if (!productValues[43].equals("null")
					&& !productValues[43].equals("")) {
				product.setFitCount(productValues[43].trim().equals("") ? null
						: Integer.valueOf(productValues[43]));
			}
			// 质保金率 41
			if (!productValues[44].equals("null")
					&& !productValues[44].equals("")) {
				product
						.setQualityFeeRate(productValues[44].trim().equals("") ? null
								: Float.valueOf(productValues[44]));
			}
			// 服务费
			if (!productValues[45].equals("null")
					&& !productValues[45].equals("")) {
				product
						.setServicecharge(productValues[45].trim().equals("") ? null
								: Double.valueOf(productValues[45]));
			}
			// 列表价
			if (!productValues[46].equals("null")
					&& !productValues[46].equals("")) {
				product.setListprice(productValues[46].trim().equals("") ? null
						: Double.valueOf(productValues[46]));
				
			}
			// 结算价
			if (!productValues[47].equals("null")
					&& !productValues[47].equals("")) {
				product
						.setBalanceprice(productValues[47].trim().equals("") ? null
								: Double.valueOf(productValues[47]));
			}
			// 质保金
			if (!productValues[48].equals("null")
					&& !productValues[48].equals("")) {
				product
						.setQualityFee(productValues[48].trim().equals("") ? null
								: Float.valueOf(productValues[48]));
			}
			// 单位
			if (!productValues[49].equals("null")
					&& !productValues[49].equals("")) {
				product.setProductUnit(productValues[49]);
			}
			// 材质ID
			if (!productValues[50].equals("null")
					&& !productValues[50].equals("")) {
				product.setMaterial(productValues[50]);
			}
			// 价税合计(本位币)
			if (!productValues[51].equals("null")
					&& !productValues[51].equals("")) {
				product
						.setPriceTaxTotalRM(productValues[51].trim().equals("") ? null
								: Double.valueOf(productValues[51]));
			}
			// 折扣额(本位币)
			if (!productValues[52].equals("null")
					&& !productValues[52].equals("")) {
				product.setFbusinessdiscount(productValues[52].trim()
						.equals("") ? null : Double.valueOf(productValues[52]));
			}
			// 税额(本币)
			if (!productValues[53].equals("null")
					&& !productValues[53].equals("")) {
				product.setFtax(productValues[53].trim().equals("") ? null
						: Double.valueOf(productValues[53]));
			}
			// 金额(本币)
			if (!productValues[54].equals("null")
					&& !productValues[54].equals("")) {
				product
						.setFamountfor(productValues[54].trim().equals("") ? null
								: Double.valueOf(productValues[54]));
			}
			// 含税单价(本币)
			if (!productValues[55].equals("null")
					&& !productValues[55].equals("")) {
				product.setFtaxprice(productValues[55].trim().equals("") ? null
						: Double.valueOf(productValues[55]));
			}
			// 产品行关联PL产品
			if (!productValues[56].equals("null")
					&& !productValues[56].equals("")) {
				product.setpLProducts(productValues[56].trim().equals("") ? null
						: productValues[56] );
			}
			// 产品列表价
			/*if (!productValues[57].equals("null")
					&& !productValues[57].equals("")) {
				product.setUnitPrice(Double.valueOf(productValues[57]));// ERP中含税单价=WEB端列表价
			}*/
			// 单价(不含税)ERP
			if (!productValues[58].equals("null")
					&& !productValues[58].trim().equals("")) {
				product.setUnitRemoveTaxH(Float.valueOf(productValues[58]));//  单价(不含税)ERP=WEB端不含税列表价
			}

			// 行号
			product.setOrderTrNumber(i + 1);// 行号

			productList.add(product);
		}
		return productList;
	}
	/**
	 * 
	 * @param products
	 *            订单关联产品
	 * @param orderCode
	 *            订单编号
	 * @param version
	 *            订单版本
	 * @return
	 */
	/*private List<Product> parseProductsERP(String products
			,String orderCode,
			String version) throws ServiceException {
		List<Product> productList = new ArrayList<Product>();
		
		String[] productArr = products.split("\\|");
		Product product = null;
		for (int i = 0; i < productArr.length; i++) {
			String[] productValues = productArr[i].split("-spit-");
			product = new Product();
			*//**
			 * 1行号? 2产品代码3产品名称4对外销售名称5材质6执行标准7规格型号8类别9项目名称10辅助属性 11单位名12数量13辅助单位
			 * 14换算率 15辅助数量 16单价(不含税)17含税单价18服务/工程费单价19列表单价20结算单价
			 * 21总金额（元）22税率(%)
			 * 23折扣率(%)24折扣25实际含税单价26销项税额27价税合计28交货时间29建议交货时间30质保金率(%) 31
			 * 质保金32制令号33任务单号34辅助单位出库数量35客户BOM36成本对象37开票数量38辅助单位开票数量39辅助单位组装数量
			 * 40基本单位组装数量 41组装数量42备注,43产品行关联PL产品
			 *//*

			product.setOrderCode(orderCode);// 2产品代码
			// 影藏域中产品ID productIdHiddenTD
			if (!productValues[0].equals("null")
					&& !productValues[0].equals("")) {
				product.setProductId(Long.valueOf(productValues[0]));// 产品ID
			}
			// 规格型号 6
			if (!productValues[1].equals("null")
					&& !productValues[1].equals("")) {
				product.setSpecifications(productValues[1]);// 规格型号
			}
			// product.setProductType(productValues[2]);
			// 产品名称 2
			if (!productValues[2].equals("null")
					&& !productValues[2].equals("")) {
				product.setProductName(productValues[2]);// 产品名称
			}
			// 产品数量 11
			if (!productValues[3].equals("null")
					&& !productValues[3].equals("")) {
				product.setProductCount(Float.valueOf(productValues[3]));// 数量
			}
			// 含税单价 15
			if (!productValues[4].equals("null")
					&& !productValues[4].equals("")) {
				//product.setUnitPrice(Double.valueOf(productValues[4]));// 含税单价
				
				product.setFactUnitPrice(productValues[4].equals("") ? null
						: Float.valueOf(productValues[4]));// WEB中含税单价=ERP端实际含税单价
			}
			// 折扣额 20
			if (!productValues[5].equals("null")
					&& !productValues[5].equals("")) {
				product.setDiscount(Float.valueOf(productValues[5]));
			}
			// 总金额 17

			if (!productValues[6].equals("null")
					&& !productValues[6].equals("")) {
				product.setTotalFee(Float.valueOf(productValues[6]));
			}
			// 交货时间 26
			if (!productValues[7].equals("null")
					&& !productValues[7].equals("")) {
				product.setDeliveryTime(productValues[7]);
			}

			product.setProductVersion(version);
			// 产品代码 1
			if (!productValues[8].equals("null")
					&& !productValues[8].equals("")) {
				product.setProductCode(productValues[8]);
			}
			// product.setBaseUnitName(productValues[9]);
			// product.setBaseUnitCount(productValues[10].equals("")?null:Integer.valueOf(productValues[10]));
			
			 * if (!productValues[11].equals("null") &&
			 * !productValues[11].equals("")) {
			 * product.setProductUnit(productValues[11]); }
			 
			// undefined baseUnitName
			// 单位名
			if (!productValues[11].equals("null")
					&& !productValues[11].equals("")) {
				product.setMeasureunitname(productValues[11]);
			}
			// undefined baseUnitCount
			// 建议交货时间 27
			if (!productValues[12].equals("null")
					&& !productValues[12].equals("")) {
				product.setAdviceDeliveryTime(productValues[12]);
			}
			// 不含税单价 16
			if (!productValues[13].equals("null")
					&& !productValues[13].equals("")) {
				product.setUnitRemoveTax(productValues[13].equals("") ? null
						: Float.valueOf(productValues[13]));
			}
			// 换算率 13
			if (!productValues[14].equals("null")
					&& !productValues[14].equals("")) {
				product.setConvertRate(productValues[14].equals("") ? null
						: Float.valueOf(productValues[14]));
			}
			// 税率 18
			if (!productValues[15].equals("null")
					&& !productValues[15].equals("")) {
				product.setTaxRate(productValues[15].equals("") ? null : Float
						.valueOf(productValues[15]));
			}
			// 折扣率 19
			if (!productValues[16].equals("null")
					&& !productValues[16].equals("")) {
				product.setDiscountRate(productValues[16].equals("") ? null
						: Float.valueOf(productValues[16]));
				// 设置WEB端统计用的折扣率
				product.setFdiscountrate((double) ((float) 100 - Float
						.valueOf(productValues[16])));
			}
			// 实际含税单价 21
			if (!productValues[17].equals("null")
					&& !productValues[17].equals("")) {
				product.setFactUnitPrice(productValues[17].equals("") ? null
						: Float.valueOf(productValues[17]));
				
			}
			// 销项税额 22
			if (!productValues[18].equals("null")
					&& !productValues[18].equals("")) {
				product.setSaleTax(productValues[18].equals("") ? null : Double
						.valueOf(productValues[18]));
			}
			// 价税合计 23
			if (!productValues[19].equals("null")
					&& !productValues[19].equals("")) {
				product.setPriceTaxTotal(productValues[19].equals("") ? null
						: Double.valueOf(productValues[19]));
			}
			// 制令号 24
			if (!productValues[20].equals("null")
					&& !productValues[20].equals("")) {
				product.setMakeNumberCode(productValues[20]);
			}
			// 任务单号 25
			if (!productValues[21].equals("null")
					&& !productValues[21].equals("")) {
				product.setTaskCode(productValues[21]);
			}
			// product.setReferCount(productValues[22].equals("")?null:Integer.valueOf(productValues[22]));
			// product.setAssistUnitReferCount(productValues[23].equals("")?null:Integer.valueOf(productValues[23]));
			// 辅助单位出库数量 关联出库单 31
			if (!productValues[24].equals("null")
					&& !productValues[24].equals("")) {
				product
						.setAssistUnitOutHouseCount(productValues[24]
								.equals("") ? null : Integer
								.valueOf(productValues[24]));
			}
			// product.setOutHouseCount(productValues[25].trim().equals("")?null:Integer.valueOf(productValues[25]));
			// 材质 4
			if (!productValues[26].equals("null")
					&& !productValues[26].equals("")) {
				product.setMaterialname(productValues[26]);
			}
			// 辅助数量 14
			if (!productValues[27].equals("null")
					&& !productValues[27].equals("")) {
				product.setProductAssistCount(productValues[27].trim().equals(
						"") ? null : Float.valueOf(productValues[27]));
			}
			// 分类 7
			if (!productValues[28].equals("null")
					&& !productValues[28].equals("")) {
				product
						.setProductType(productValues[28].trim().equals("") ? null
								: productValues[28].trim());
			}
			// 对外销售名称 3
			if (!productValues[29].equals("null")
					&& !productValues[29].equals("")) {
				product
						.setOutSaleName(productValues[29].trim().equals("") ? null
								: productValues[29].trim());
			}
			// 项目名称 8
			if (!productValues[30].equals("null")
					&& !productValues[30].equals("")) {
				product
						.setProProjectName(productValues[30].trim().equals("") ? null
								: productValues[30].trim());
			}
			// 辅助属性 9
			if (!productValues[31].equals("null")
					&& !productValues[31].equals("")) {
				product
						.setAssistAttribute(productValues[31].trim().equals("") ? null
								: productValues[31].trim());
			}
			// 执行标准 5
			if (!productValues[32].equals("null")
					&& !productValues[32].equals("")) {
				product
						.setExcuteStandard(productValues[32].trim().equals("") ? null
								: productValues[32].trim());
			}
			// 辅助单位 12
			if (!productValues[33].equals("null")
					&& !productValues[33].equals("")) {
				product
						.setAssistUnit(productValues[33].trim().equals("") ? null
								: productValues[33].trim());
			}
			// 备注 28
			if (!productValues[34].equals("null")
					&& !productValues[34].equals("")) {
				product.setRemarks(productValues[34].trim().equals("") ? null
						: productValues[34].trim());
			}
			// 客户BOM 32
			if (!productValues[35].equals("null")
					&& !productValues[35].equals("")) {
				product.setCustomBOM(productValues[35].trim().equals("") ? null
						: productValues[35].trim());
			}
			// 成本对象 33
			if (!productValues[36].equals("null")
					&& !productValues[36].equals("")) {
				product.setCostObj(productValues[36].trim().equals("") ? null
						: productValues[36].trim());
			}
			// product.setSourceOrderCode(productValues[37].trim().equals("")?null:productValues[37].trim());
			// product.setContactCode(productValues[38].trim().equals("")?null:productValues[38].trim());
			// 开票数量 关联开票 36
			if (!productValues[39].equals("null")
					&& !productValues[39].equals("")) {
				product.setBillCount(productValues[39].trim().equals("") ? null
						: Integer.valueOf(productValues[39]));
			}
			// 辅助单位开票数量 37
			if (!productValues[40].equals("null")
					&& !productValues[40].equals("")) {
				product
						.setAssistCompanyBillCount(productValues[40].trim()
								.equals("") ? null : Integer
								.valueOf(productValues[40]));
			}
			// 辅助单位组装数量 38
			if (!productValues[41].equals("null")
					&& !productValues[41].equals("")) {
				product
						.setAssistCompanyFitCount(productValues[41].trim()
								.equals("") ? null : Integer
								.valueOf(productValues[41]));
			}
			// 基本单位组装数量 39
			if (!productValues[42].equals("null")
					&& !productValues[42].equals("")) {
				product.setBaseCompanyFitCount(productValues[42].trim().equals(
						"") ? null : Integer.valueOf(productValues[42]));
			}
			// 组装数量 40
			if (!productValues[43].equals("null")
					&& !productValues[43].equals("")) {
				product.setFitCount(productValues[43].trim().equals("") ? null
						: Integer.valueOf(productValues[43]));
			}
			// 质保金率 41
			if (!productValues[44].equals("null")
					&& !productValues[44].equals("")) {
				product
						.setQualityFeeRate(productValues[44].trim().equals("") ? null
								: Float.valueOf(productValues[44]));
			}
			// 服务费
			if (!productValues[45].equals("null")
					&& !productValues[45].equals("")) {
				product
						.setServicecharge(productValues[45].trim().equals("") ? null
								: Double.valueOf(productValues[45]));
			}
			// 列表价
			if (!productValues[46].equals("null")
					&& !productValues[46].equals("")) {
				product.setListprice(productValues[46].trim().equals("") ? null
						: Double.valueOf(productValues[46]));
				
				product.setUnitPrice(Double.valueOf(productValues[46]));// ERP中含税单价=WEB端列表价
				
			}
			// 结算价
			if (!productValues[47].equals("null")
					&& !productValues[47].equals("")) {
				product
						.setBalanceprice(productValues[47].trim().equals("") ? null
								: Double.valueOf(productValues[47]));
			}
			// 质保金
			if (!productValues[48].equals("null")
					&& !productValues[48].equals("")) {
				product
						.setQualityFee(productValues[48].trim().equals("") ? null
								: Float.valueOf(productValues[48]));
			}
			// 单位
			if (!productValues[49].equals("null")
					&& !productValues[49].equals("")) {
				product.setProductUnit(productValues[49]);
			}
			// 材质ID
			if (!productValues[50].equals("null")
					&& !productValues[50].equals("")) {
				product.setMaterial(productValues[50]);
			}
			// 价税合计(本位币)
			if (!productValues[51].equals("null")
					&& !productValues[51].equals("")) {
				product
						.setPriceTaxTotalRM(productValues[51].trim().equals("") ? null
								: Double.valueOf(productValues[51]));
			}
			// 折扣额(本位币)
			if (!productValues[52].equals("null")
					&& !productValues[52].equals("")) {
				product.setFbusinessdiscount(productValues[52].trim()
						.equals("") ? null : Double.valueOf(productValues[52]));
			}
			// 税额(本币)
			if (!productValues[53].equals("null")
					&& !productValues[53].equals("")) {
				product.setFtax(productValues[53].trim().equals("") ? null
						: Double.valueOf(productValues[53]));
			}
			// 金额(本币)
			if (!productValues[54].equals("null")
					&& !productValues[54].equals("")) {
				product
						.setFamountfor(productValues[54].trim().equals("") ? null
								: Double.valueOf(productValues[54]));
			}
			// 含税单价(本币)
			if (!productValues[55].equals("null")
					&& !productValues[55].equals("")) {
				product.setFtaxprice(productValues[55].trim().equals("") ? null
						: Double.valueOf(productValues[55]));
			}
			// 产品行关联PL产品
			if (!productValues[56].equals("null")
					&& !productValues[56].equals("")) {
				product.setpLProducts(productValues[56].trim().equals("") ? null
						: productValues[56] );
			}
			// 产品列表价本位币
			if (!productValues[57].equals("null")
					&& !productValues[57].equals("")) {
				 
				product.setFtaxprice(Double.valueOf(productValues[57]));//WEB列表价本位币 =ERP中含税单价本位币
			}

			// 行号
			product.setOrderTrNumber(i + 1);// 行号

			productList.add(product);
		}
		return productList;
	}*/
	@Override
	public Page<SysOrder> findHistoryList(Page<SysOrder> page,
			SysOrderQuery sysOrderQuery) {
		return sysOrderDao.findPage(page, "SysOrder.findList.history",
				sysOrderQuery);
	}

	private String joinOrderCode(List<String> checkedCodeList, String string) {
		StringBuffer sb = new StringBuffer();
		for (String temp : checkedCodeList) {
			sb.append("\'" + temp + "\'").append(",");
		}
		sb = sb.deleteCharAt(sb.length() - 1);
		return sb.toString();
	}

	/**
	 * 历史记录中查看订单详情
	 */
	@Override
	public SysOrder getByIdFromHistory(Long id) {
		return sysOrderDao.getById("SysOrder.findById.History", id);
	}

	/**
	 * SysOrder sysOrder, 系统订单 String products,订单关联产品 String collectPays 应收款管理表
	 */
	@Override
	public void saveTogather(SysOrder sysOrder, String products,
			String collectPays) throws ServiceException {
		List<SyncTable> syncTables = new ArrayList<SyncTable>();// 同步列表

		//sysOrder.setContractTime(formt.format(new Date()));
		sysOrder.setContractVersion("000");
		sysOrder.setSysOrderStatus(0);
		String exchangeRateSelect = sysOrder.getExchangeRate();
		if (null != exchangeRateSelect) {
			sysOrder.setExchangeRate(exchangeRateSelect.split("\\|")[2]);// 汇率文本
			sysOrder.setExchangeRateValue(exchangeRateSelect.split("\\|")[0]);// 计算本位币用
			sysOrder.setExchangeRateNumber(exchangeRateSelect.split("\\|")[1]);// 同步用
		}
		sysOrderDao.save(sysOrder);// 保存系统订单表
		sysOrderDao.save(sysOrder, "SysOrder.insert.history");// 保存系统订单历史表

		if (null != products && !products.equals("")) {
			List<Product> productList = parseProducts(products, sysOrder// 订单产品表通过订单编号做关联
					.getOrderCode(), sysOrder.getContractVersion());// K3订单关联合同列表

			syncTables.add(parseToInitID("t_RPContract"));// K3 t_RPContract合同表
			/**
			 * SysOrder sysOrderTemp, List<Product> products, String ddlType,
			 * Boolean isCopy
			 */
			/*List<Product> productListERP = parseProductsERP(products, // 订单产品表通过订单编号做关联
					 sysOrder// 订单产品表通过订单编号做关联
					.getOrderCode(), sysOrder.getContractVersion());// K3订单关联合同列表
*/			
			syncTables.add(parseToContract(sysOrder, productList,
					DDLType.INSERT, false));// 组装K3合同表需要的数据 及 操作类型为插入

			syncTables.add(parseToInitID("SEOrder"));// K3 SEOrder 订单表
			syncTables.add(parseToOrder(sysOrder, DDLType.INSERT, false));// 组装K3订单表需要的数据
			// 及
			// 操作类型为插入

			for (Product product : productList) {
				String pLProducts=product.getpLProducts();
				if(null!=pLProducts&&""!=pLProducts){
					product.setIspl(1);
				}else{
					product.setIspl(0);
				}
				Long  productId=productDao.save(product);// 保存web端产品表
				productDao.save(product, "Product.insert.history");// 保存web端产品历史表
				
				//同时保存产品关联的PL产品
				 
				try {
					if(null!=product.getpLProducts()&&""!=product.getpLProducts()){
						List<Productpl> productplList=OrgJsonUtil.ParseJsonMethod(product.getpLProducts());
						
						for (Productpl productpl : productplList) {
							productpl.setProductId(productId);
							productplDao.save(productpl);//依次保存产品关联的PL产品
							//同时保存产品关联的PL产品历史
							productplDao.save(productpl,"Productpl.insert.history");
						}
					}
					
					
					} catch (JSONException e) {
						// TODO Auto-generated catch block
						throw new ServiceException(e.getMessage()); 
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						throw new ServiceException(e.getMessage());
					}catch (DataAccessException e) {
						// TODO Auto-generated catch block
						throw new ServiceException(e.getMessage());
					}

				syncTables.add(parseToContractEntry(sysOrder, product,// 组装K3合同实体表需要的数据
						// 及
						// 操作类型为插入
						DDLType.INSERT));
				syncTables.add(parseToSeOrderEntry(sysOrder, product,// 组装K3订单实体表需要的数据
						// 及
						// 操作类型为插入
						DDLType.INSERT));
			}
		}
		if (null != collectPays && !collectPays.equals("")) {// web端应收款管理表
			List<CollectPay> collectPayList = parseCollectPays(collectPays,
					sysOrder.getOrderCode(), sysOrder.getContractVersion());
			for (CollectPay collectPay : collectPayList) {
				collectPayDao.save(collectPay);// web端收款管理类
				collectPayDao.save(collectPay, "CollectPay.insert.history");// web端
				// 收款管理类历史表

				syncTables.add(parseToRPContractScheme(sysOrder, collectPay,// 组装K3收款计划表需要的数据
						// 及
						// 操作类型为插入
						DDLType.INSERT));
			}
		}
		  // 同步数据之前加上判断订单编号和合同编号
		   SyncTable queryTable = new SyncTable();
		   queryTable.setTableName("SEOrder");
		   queryTable.setDdlType(DDLType.QUERY);
		   
		   JSONObject queryWherejo = new JSONObject();
		   queryWherejo.put("FBillNo", sysOrder.getOrderCode());
		   queryWherejo.put("FVersionNo", sysOrder.getContractVersion());
		   queryTable.setWheres(queryWherejo); 
		   Map<String, Object> map = syncService.queryForObject(queryTable, "FInterID");
		   System.out.println(map.get("data")); 
		   Long finterId = 0L;
		   if(null!=map.get("data")){ 
			   finterId = Long.valueOf(String.valueOf(map.get("data"))); 
		   }
		   if(0<finterId){//说明存在
			   throw new RuntimeException("订单编号为"+sysOrder.getContractCode()+"且版本号为"+sysOrder.getContractVersion()+"的订单在ERP中已经存在!" );
		   }
		 
		   // 合同编号
		   SyncTable queryTableContract = new SyncTable();
		   queryTableContract.setTableName("t_RPContract");
		   queryTableContract.setDdlType(DDLType.QUERY);
		   
		   JSONObject queryWherejoContract = new JSONObject();
		   queryWherejoContract.put("FContractNo", sysOrder.getContractCode());
		   queryWherejoContract.put("FVersionNo", sysOrder.getContractVersion());
		   queryTableContract.setWheres(queryWherejoContract); 
		   Map<String,Object> mapContract = syncService.queryForObject(queryTableContract,"FContractID"); 
		   System.out.println(mapContract.get("data")); 
		   Long finterIdContract = 0L; 
		   if(null!=mapContract.get("data")){
			   finterIdContract = Long.valueOf(String.valueOf(mapContract.get("data"))); 
		   }
		   if(0<finterIdContract){//说明存在 
			   throw new RuntimeException("合同编号为"+sysOrder.getContractCode()+"且版本号为"+sysOrder.getContractVersion()+"的合同在ERP中已经存在!" ); }
		  
		// 同时会同步K3
		  /*Map<String, Object> resultMap = syncService.sync(syncTables);//排产保存操作
		  if(!(Boolean)resultMap.get("result")){ throw new RuntimeException(
		  (String)resultMap.get("resultinfo") ); }*/
		  

	}

	/**
	 * 查找系统订单通过条件
	 * 
	 * @param order
	 * @return
	 */
	public List<SysOrder> findListQuery(SysOrderQuery sysorderQuery) {
		return (List<SysOrder>) sysOrderDao.findListQuery(sysorderQuery);
	}

	/**
	 * 查找系统订单的关联产品信息通过条件
	 * 
	 * @param order
	 * @return
	 */
	public List<Product> findProductQueryList(ProductQuery productQuery) {
		return (List<Product>) sysOrderDao.findProductQueryList(productQuery);
	}

	@Override
	public void update(SysOrder sysOrder) throws Exception {
		// TODO Auto-generated method stub
		sysOrderDao.update(sysOrder);
	}
	/**
	 * 1统计常州ERP中的销售人员数据
	 */
	@Transactional(readOnly = true)
	public void getSeorderDatasWithDif() throws ServiceException {
		// 获取客户
		List<Organization> organizationList = organizationService.findAllList();
		List<Bloc> blocList = blocService.findAllList();
		List<Admin> adminList = adminService.findAllList();
		List<Province> provinceList = provinceService.findAllList();
		List<Department> departmentList = departmentService.findAllList();

		// 同时保存带K3数据库一份
		IItemOptService service = new ItemOptService();
//		List<Emp> empList=service.getEmpInfo();
//		if(null!=empList&&0<empList.size()){
//        for (Emp emp : empList) {
			// 1从K3中查询指定业务员,指定日期的销售订单
			List<Seorder> seorderList = service
					.getChangZhouErpDatasWithDif(Long.valueOf(0+""), "", "");//71594L
			if (null != seorderList && 0 < seorderList.size()) {
				List<SysOrder> sysorderList=new ArrayList<SysOrder>();
				for (int i = 0; i < seorderList.size(); i++) {
					
				//for (Seorder seorder : seorderList) {
					// 1a更新WEB端销售订单
					SysOrder sysOrder = new SysOrder();
					// 订单编号 orderCode
					sysOrder.setOrderCode(seorderList.get(i).getFbillNo());// 订单编号
					// 合同编号 contractCode
					sysOrder.setContractCode(seorderList.get(i).getContractCode());// 合同编号
					// 合同名称 contractName
					sysOrder.setContractName(seorderList.get(i).getfContractName());// contractName
	
					// 合同时间 contractTime
					sysOrder.setContractTime(seorderList.get(i).getContractDate() + "");// 
					// 核算项目 checkProject
					sysOrder.setCheckProject(seorderList.get(i).getItemName());// 购货单位
					// 核算项目Id checkProjectId ?
					if (null != seorderList.get(i).getItemName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getItemName())) {
						for (Organization organization : organizationList) {
							if (organization.getFname().equalsIgnoreCase(
									seorderList.get(i).getItemName())) {
								sysOrder.setCheckProjectId(organization
										.getFinnerid());
								break;
							}
						}
					}
	
					// 合同文本 contractTxt N
					// 合同类型 contractType
					
					if(null!=seorderList.get(i).getfText4()&&"年度合同".equalsIgnoreCase(seorderList.get(i).getfText4())){
						sysOrder.setContractType("1");// 
					}
					if(null!=seorderList.get(i).getfText4()&&"合同正本".equalsIgnoreCase(seorderList.get(i).getfText4())){
						sysOrder.setContractType("2");// 
					}
					if(null!=seorderList.get(i).getfText4()&&"内部订单".equalsIgnoreCase(seorderList.get(i).getfText4())){
						sysOrder.setContractType("3");// 
					}
					
					
					// 模式 model
					sysOrder.setModel(seorderList.get(i).getYxbms());// 
					// 中标通知单 biddingNotice N
					// 币种 coinType
					sysOrder.setCoinType(seorderList.get(i).getCurrencyname());// 币别
					// 业务类型 bussinessType
					if(null!=seorderList.get(i).getYwlx()&&"基础业务".equalsIgnoreCase(seorderList.get(i).getYwlx())){
						sysOrder.setBussinessType("1");
					}else{
						sysOrder.setBussinessType("2");
					}
					
					// 合同评审单 contractReview N
					// 汇率 exchangeRate
					sysOrder.setExchangeRate(seorderList.get(i).getExchangeRatename());// 汇率
					// 体系客户 systemConsumer
					sysOrder.setSystemConsumer(seorderList.get(i).getTxkh());// 
					// 体系客户Id systemConsumerId ?
					if (null != seorderList.get(i).getTxkh()
							&& !"".equalsIgnoreCase(seorderList.get(i).getTxkh())) {
						for (Bloc bloc : blocList) {
							if (bloc.getBlocname().equalsIgnoreCase(
									seorderList.get(i).getTxkh())) {
								sysOrder.setSystemConsumerId(bloc.getBlocid());
								break;
							}
						}
					}
					// 最终用户 finalConsumer
					sysOrder.setFinalConsumer(seorderList.get(i).getFheadSelfS0153());// 
					// 最终用户Id finalConsumerId ?
					if (null != seorderList.get(i).getFheadSelfS0153()
							&& !"".equalsIgnoreCase(seorderList.get(i).getFheadSelfS0153())) {
						for (Organization organization : organizationList) {
							if (organization.getFname().equalsIgnoreCase(
									seorderList.get(i).getFheadSelfS0153())) {
								sysOrder.setFinalConsumerId(organization
										.getFinnerid());
								break;
							}
						}
					}
					// 合同版本 contractVersion
					sysOrder.setContractVersion(seorderList.get(i).getContractVersion());// 版本
					// 变更原因 changeReason
					sysOrder.setChangeReason(seorderList.get(i).getFchangeCauses());
					// 变更时间 changeTime
					if(null!=seorderList.get(i).getFchangeDate()){
						sysOrder.setChangeTime(seorderList.get(i).getFchangeDate() + "");
					}
					// 变更人ID changeUserId ?
					if (null != seorderList.get(i).getChangeUserName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getChangeUserName())) {
						for (Admin admin : adminList) {
							if (admin.getAdminName().equalsIgnoreCase(
									seorderList.get(i).getChangeUserName())) {
								sysOrder.setChangeUserId(admin.getAdminId());
								break;
							}
						}
					}
					// 变更人名称 changeUserName
					sysOrder.setChangeUserName(seorderList.get(i).getChangeUserName());
					// 业务员Id businessUserId ?
					if (null != seorderList.get(i).getEmpName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getEmpName())) {
						for (Admin admin : adminList) {
							if (admin.getAdminName().equalsIgnoreCase(
									seorderList.get(i).getEmpName())) {
								sysOrder.setBusinessUserId(admin.getAdminId());
								break;
							}
						}
					}
					// 业务员名称 businessUser
					sysOrder.setBusinessUser(seorderList.get(i).getEmpName() + "");
					// 打印次数 printCount N
					// 主管人名称 manager N
					// 主管人Id managerId N
					// 付款条件 payCondition N
					// 部门名称 department
					sysOrder.setDepartment(seorderList.get(i).getDepartmentName());// 制单部门
					// 部门ID departmentId ?
					if (null != seorderList.get(i).getDepartmentName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getDepartmentName())) {
						for (Department department : departmentList) {
							if (department.getTeamname().equalsIgnoreCase(
									seorderList.get(i).getDepartmentName())) {
								sysOrder.setDepartmentId(department.getTeamid());
								break;
							}
						}
					}
					// 审核人ID examineUserId ?
					if (null != seorderList.get(i).getCheckerName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getCheckerName())) {
						for (Admin admin : adminList) {
							if (admin.getAdminName().equalsIgnoreCase(
									seorderList.get(i).getCheckerName())) {
								sysOrder.setExamineUserId(admin.getAdminId());
								break;
							}
						}
					}
					// 审核人名称 examineUserName
					sysOrder.setExamineUserName(seorderList.get(i).getCheckerName() + "");
					// 保质时间 warrantyTime N
					// 省份 province
					sysOrder.setProvince(seorderList.get(i).getYxbsf());
					// 省份Id provinceId ?
					if (null != seorderList.get(i).getYxbsf()
							&& !"".equalsIgnoreCase(seorderList.get(i).getYxbsf())) {
						for (Province province : provinceList) {
							if (province.getProvincename().equalsIgnoreCase(
									seorderList.get(i).getYxbsf())) {
								sysOrder.setProvinceId(province.getProvinceid());
								break;
							}
						}
					}
					// 审核时间 examineTime
					sysOrder.setExamineTime(seorderList.get(i).getFcheckDate() + "");
					// 备注 remarks nvarchar(500)
					sysOrder.setRemarks(seorderList.get(i).getfText() + "");
					// 合同状态 sysOrderStatus
					sysOrder.setSysOrderStatus(100);
					// 客户合同号 customContractCode
					sysOrder.setCustomContractCode(seorderList.get(i).getfText5());
					// 销售方式 saleType
					sysOrder.setSaleType(seorderList.get(i).getSaleStylename());
					// 销售范围 saleArea
					sysOrder.setSaleArea(seorderList.get(i).getAreaName());
					// 可变范围 changeAreaType N
					// 是否有合同 FHeadSelfS0156
					String sfyht = seorderList.get(i).getSfyht();
					if (null != sfyht && "N".equalsIgnoreCase(sfyht)) {
						sysOrder.setFheadSelfS0156(31374l);
					}
					if (null != sfyht && "Y".equalsIgnoreCase(sfyht)) {
						sysOrder.setFheadSelfS0156(31373l);
					}
					// 经销奖励系数 disCoefficient N
					// 经销商 dealerName N
					// 是否已记账 isbill
					sysOrder.setIsbill(0);
					// 经销业务费系数 operatorrate N
					//save(sysOrder);
					// 2从K3中查询指定业务员,指定日期的销售订单实体
	
					// 3从K3中查询指定业务员,指定日期的合同订单
	
					// 4从K3中查询指定业务员,指定日期的合同订单实体
	
					// 5从K3中查询指定业务员,指定日期的应收款
					sysorderList.add(sysOrder);
					if(i%500==0||(i==seorderList.size()-1)){
						System.gc();
						try {
							Thread.sleep(1000);
								saveSysOrderList(sysorderList);
								sysorderList.clear();
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
//				saveSysOrderList(sysorderList);
				/*List<SysOrder> sysorderListData=new ArrayList<SysOrder>();
				for (int j = 0; j < sysorderList.size(); j++) {
					//for (int j2 = j; j2 < sysorderList.size(); j2++) {
						sysorderListData.add( sysorderList.get(j) );
						if(j%500==0||(j==sysorderList.size()-1)){
							System.gc();
							try {
							Thread.sleep(1000);
							saveSysOrderList(sysorderListData);
							sysorderListData.clear();	
							} catch (InterruptedException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
						
					//}
					
				}*/
			}
//        }
//		}
	}
	/**
	 * 1统计常州ERP中的销售人员数据
	 */
	@Transactional(readOnly = true)
	public void getSeorderDatas() throws ServiceException {
		// 获取客户
		List<Organization> organizationList = organizationService.findAllList();
		List<Bloc> blocList = blocService.findAllList();
		List<Admin> adminList = adminService.findAllList();
		List<Province> provinceList = provinceService.findAllList();
		List<Department> departmentList = departmentService.findAllList();

		// 同时保存带K3数据库一份
		IItemOptService service = new ItemOptService();
//		List<Emp> empList=service.getEmpInfo();
//		if(null!=empList&&0<empList.size()){
//        for (Emp emp : empList) {
			// 1从K3中查询指定业务员,指定日期的销售订单
			List<Seorder> seorderList = service
					.getChangZhouErpDatas(Long.valueOf(0+""), "", "");//71594L
			
//			List<Seorder> seorderList = service
//					.getChangZhouErpDatasWithDif(Long.valueOf(0+""), "", "");
//			
			if (null != seorderList && 0 < seorderList.size()) {
				List<SysOrder> sysorderList=new ArrayList<SysOrder>();
				for (int i = 0; i < seorderList.size(); i++) {
				//for (Seorder seorder : seorderList) {
					// 1a更新WEB端销售订单
					SysOrder sysOrder = new SysOrder();
					// 订单编号 orderCode
					sysOrder.setOrderCode(seorderList.get(i).getFbillNo());// 订单编号
					/**/// 合同编号 contractCode
					sysOrder.setContractCode(seorderList.get(i).getFbillNo());// 合同编号
					// 合同名称 contractName
					sysOrder.setContractName(seorderList.get(i).getfContractName());// contractName
	
					// 合同时间 contractTime
					sysOrder.setContractTime(seorderList.get(i).getContractDate() + "");// 
					// 核算项目 checkProject
					sysOrder.setCheckProject(seorderList.get(i).getItemName());// 购货单位
					// 核算项目Id checkProjectId ?
					if (null != seorderList.get(i).getItemName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getItemName())) {
						for (Organization organization : organizationList) {
							if (organization.getFname().equalsIgnoreCase(
									seorderList.get(i).getItemName())) {
								sysOrder.setCheckProjectId(organization
										.getFinnerid());
								break;
							}
						}
					}
	
					// 合同文本 contractTxt N
					// 合同类型 contractType
					
					if(null!=seorderList.get(i).getfText4()&&"年度合同".equalsIgnoreCase(seorderList.get(i).getfText4())){
						sysOrder.setContractType("1");// 
					}
					if(null!=seorderList.get(i).getfText4()&&"合同正本".equalsIgnoreCase(seorderList.get(i).getfText4())){
						sysOrder.setContractType("2");// 
					}
					if(null!=seorderList.get(i).getfText4()&&"内部订单".equalsIgnoreCase(seorderList.get(i).getfText4())){
						sysOrder.setContractType("3");// 
					}
					
					
					// 模式 model
					sysOrder.setModel(seorderList.get(i).getYxbms());// 
					// 中标通知单 biddingNotice N
					// 币种 coinType
					sysOrder.setCoinType(seorderList.get(i).getCurrencyname());// 币别
					// 业务类型 bussinessType
					if(null!=seorderList.get(i).getYwlx()&&"基础业务".equalsIgnoreCase(seorderList.get(i).getYwlx())){
						sysOrder.setBussinessType("1");
					}else{
						sysOrder.setBussinessType("2");
					}
					
					// 合同评审单 contractReview N
					// 汇率 exchangeRate
					sysOrder.setExchangeRate(seorderList.get(i).getExchangeRatename());// 汇率
					// 体系客户 systemConsumer
					sysOrder.setSystemConsumer(seorderList.get(i).getTxkh());// 
					// 体系客户Id systemConsumerId ?
					if (null != seorderList.get(i).getTxkh()
							&& !"".equalsIgnoreCase(seorderList.get(i).getTxkh())) {
						for (Bloc bloc : blocList) {
							if (bloc.getBlocname().equalsIgnoreCase(
									seorderList.get(i).getTxkh())) {
								sysOrder.setSystemConsumerId(bloc.getBlocid());
								break;
							}
						}
					}
					// 最终用户 finalConsumer
					sysOrder.setFinalConsumer(seorderList.get(i).getFheadSelfS0153());// 
					// 最终用户Id finalConsumerId ?
					if (null != seorderList.get(i).getFheadSelfS0153()
							&& !"".equalsIgnoreCase(seorderList.get(i).getFheadSelfS0153())) {
						for (Organization organization : organizationList) {
							if (organization.getFname().equalsIgnoreCase(
									seorderList.get(i).getFheadSelfS0153())) {
								sysOrder.setFinalConsumerId(organization
										.getFinnerid());
								break;
							}
						}
					}
					// 合同版本 contractVersion
					sysOrder.setContractVersion(seorderList.get(i).getContractVersion());// 版本
					// 变更原因 changeReason
					sysOrder.setChangeReason(seorderList.get(i).getFchangeCauses());
					// 变更时间 changeTime
					if(null!=seorderList.get(i).getFchangeDate()){
						sysOrder.setChangeTime(seorderList.get(i).getFchangeDate() + "");
					}
					// 变更人ID changeUserId ?
					if (null != seorderList.get(i).getChangeUserName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getChangeUserName())) {
						for (Admin admin : adminList) {
							if (admin.getAdminName().equalsIgnoreCase(
									seorderList.get(i).getChangeUserName())) {
								sysOrder.setChangeUserId(admin.getAdminId());
								break;
							}
						}
					}
					// 变更人名称 changeUserName
					sysOrder.setChangeUserName(seorderList.get(i).getChangeUserName());
					// 业务员Id businessUserId ?
					if (null != seorderList.get(i).getEmpName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getEmpName())) {
						for (Admin admin : adminList) {
							if (admin.getAdminName().equalsIgnoreCase(
									seorderList.get(i).getEmpName())) {
								sysOrder.setBusinessUserId(admin.getAdminId());
								break;
							}
						}
					}
					// 业务员名称 businessUser
					sysOrder.setBusinessUser(seorderList.get(i).getEmpName() + "");
					// 打印次数 printCount N
					// 主管人名称 manager N
					// 主管人Id managerId N
					// 付款条件 payCondition N
					// 部门名称 department
					sysOrder.setDepartment(seorderList.get(i).getDepartmentName());// 制单部门
					// 部门ID departmentId ?
					if (null != seorderList.get(i).getDepartmentName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getDepartmentName())) {
						for (Department department : departmentList) {
							if (department.getTeamname().equalsIgnoreCase(
									seorderList.get(i).getDepartmentName())) {
								sysOrder.setDepartmentId(department.getTeamid());
								break;
							}
						}
					}
					// 审核人ID examineUserId ?
					if (null != seorderList.get(i).getCheckerName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getCheckerName())) {
						for (Admin admin : adminList) {
							if (admin.getAdminName().equalsIgnoreCase(
									seorderList.get(i).getCheckerName())) {
								sysOrder.setExamineUserId(admin.getAdminId());
								break;
							}
						}
					}
					// 审核人名称 examineUserName
					sysOrder.setExamineUserName(seorderList.get(i).getCheckerName() + "");
					// 保质时间 warrantyTime N
					// 省份 province
					sysOrder.setProvince(seorderList.get(i).getYxbsf());
					// 省份Id provinceId ?
					if (null != seorderList.get(i).getYxbsf()
							&& !"".equalsIgnoreCase(seorderList.get(i).getYxbsf())) {
						for (Province province : provinceList) {
							if (province.getProvincename().equalsIgnoreCase(
									seorderList.get(i).getYxbsf())) {
								sysOrder.setProvinceId(province.getProvinceid());
								break;
							}
						}
					}
					// 审核时间 examineTime
					sysOrder.setExamineTime(seorderList.get(i).getFcheckDate() + "");
					// 备注 remarks nvarchar(500)
					sysOrder.setRemarks(seorderList.get(i).getfText() + "");
					// 合同状态 sysOrderStatus
					sysOrder.setSysOrderStatus(100);
					// 客户合同号 customContractCode
					sysOrder.setCustomContractCode(seorderList.get(i).getfText5());
					// 销售方式 saleType
					sysOrder.setSaleType(seorderList.get(i).getSaleStylename());
					// 销售范围 saleArea
					sysOrder.setSaleArea(seorderList.get(i).getAreaName());
					// 可变范围 changeAreaType N
					// 是否有合同 FHeadSelfS0156
					String sfyht = seorderList.get(i).getSfyht();
					if (null != sfyht && "N".equalsIgnoreCase(sfyht)) {
						sysOrder.setFheadSelfS0156(31374l);
					}
					if (null != sfyht && "Y".equalsIgnoreCase(sfyht)) {
						sysOrder.setFheadSelfS0156(31373l);
					}
					// 经销奖励系数 disCoefficient N
					// 经销商 dealerName N
					// 是否已记账 isbill
					sysOrder.setIsbill(0);
					// 经销业务费系数 operatorrate N
					//save(sysOrder);
					// 2从K3中查询指定业务员,指定日期的销售订单实体
	
					// 3从K3中查询指定业务员,指定日期的合同订单
	
					// 4从K3中查询指定业务员,指定日期的合同订单实体
	
					// 5从K3中查询指定业务员,指定日期的应收款
					sysorderList.add(sysOrder);
					if(i%500==0||(i==seorderList.size()-1)){
						System.gc();
						try {
							Thread.sleep(1000);
								saveSysOrderList(sysorderList);
								sysorderList.clear();
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
//				saveSysOrderList(sysorderList);
				/*List<SysOrder> sysorderListData=new ArrayList<SysOrder>();
				for (int j = 0; j < sysorderList.size(); j++) {
					//for (int j2 = j; j2 < sysorderList.size(); j2++) {
						sysorderListData.add( sysorderList.get(j) );
						if(j%500==0||(j==sysorderList.size()-1)){
							System.gc();
							try {
							Thread.sleep(1000);
							saveSysOrderList(sysorderListData);
							sysorderListData.clear();	
							} catch (InterruptedException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
						
					//}
					
				}*/
			}
//        }
//		}
	}
	/**
	 * 1统计常州ERP中的销售人员数据
	 */
	@Transactional(readOnly = true)
	public void getSeorderDatasWithNoOrderNum() throws ServiceException {
		// 获取客户
		List<Organization> organizationList = organizationService.findAllList();
		List<Bloc> blocList = blocService.findAllList();
		List<Admin> adminList = adminService.findAllList();
		List<Province> provinceList = provinceService.findAllList();
		List<Department> departmentList = departmentService.findAllList();

		// 同时保存带K3数据库一份
		IItemOptService service = new ItemOptService();
//		List<Emp> empList=service.getEmpInfo();
//		if(null!=empList&&0<empList.size()){
//        for (Emp emp : empList) {
			// 1从K3中查询指定业务员,指定日期的销售订单
//			List<Seorder> seorderList = service
//					.getChangZhouErpDatas(Long.valueOf(0+""), "", "");//71594L
			
			List<Seorder> seorderList = service
					.getChangZhouErpDatasWithNoOrderNum(Long.valueOf(0+""), "", "");
			
			if (null != seorderList && 0 < seorderList.size()) {
				List<SysOrder> sysorderList=new ArrayList<SysOrder>();
				for (int i = 0; i < seorderList.size(); i++) {
					//for (Seorder seorder : seorderList) {
					// 1a更新WEB端销售订单
					SysOrder sysOrder = new SysOrder();
					// 订单编号 orderCode
					sysOrder.setOrderCode(seorderList.get(i).getFbillNo()+"N");// 订单编号
					// 合同编号 contractCode
					sysOrder.setContractCode(seorderList.get(i).getFbillNo()+"N");// 合同编号
					// 合同名称 contractName
					sysOrder.setContractName(seorderList.get(i).getfContractName());// contractName
	
					// 合同时间 contractTime
					sysOrder.setContractTime(seorderList.get(i).getContractDate() + "");// 
					// 核算项目 checkProject
					sysOrder.setCheckProject(seorderList.get(i).getItemName());// 购货单位
					// 核算项目Id checkProjectId ?
					if (null != seorderList.get(i).getItemName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getItemName())) {
						for (Organization organization : organizationList) {
							if (organization.getFname().equalsIgnoreCase(
									seorderList.get(i).getItemName())) {
								sysOrder.setCheckProjectId(organization
										.getFinnerid());
								break;
							}
						}
					}
	
					// 合同文本 contractTxt N
					// 合同类型 contractType
					
					/*if(null!=seorder.getfText4()&&"年度合同".equalsIgnoreCase(seorder.getfText4())){
						sysOrder.setContractType("1");// 
					}
					if(null!=seorder.getfText4()&&"合同正本".equalsIgnoreCase(seorder.getfText4())){
						sysOrder.setContractType("2");// 
					}
					if(null!=seorder.getfText4()&&"内部订单".equalsIgnoreCase(seorder.getfText4())){
						sysOrder.setContractType("3");// 
					}*/
					
					
					// 模式 model
					//sysOrder.setModel(seorder.getYxbms());// 
					// 中标通知单 biddingNotice N
					// 币种 coinType
					sysOrder.setCoinType(seorderList.get(i).getCurrencyname());// 币别
					// 业务类型 bussinessType
					/*if(null!=seorder.getYwlx()&&"基础业务".equalsIgnoreCase(seorder.getYwlx())){
						sysOrder.setBussinessType("1");
					}else{
						sysOrder.setBussinessType("2");
					}*/
					
					// 合同评审单 contractReview N
					// 汇率 exchangeRate
					sysOrder.setExchangeRate(seorderList.get(i).getExchangeRatename());// 汇率
					// 体系客户 systemConsumer
					//sysOrder.setSystemConsumer(seorder.getTxkh());// 
					// 体系客户Id systemConsumerId ?
					/*if (null != seorder.getTxkh()
							&& !"".equalsIgnoreCase(seorder.getTxkh())) {
						for (Bloc bloc : blocList) {
							if (bloc.getBlocname().equalsIgnoreCase(
									seorder.getTxkh())) {
								sysOrder.setSystemConsumerId(bloc.getBlocid());
								break;
							}
						}
					}*/
					// 最终用户 finalConsumer
					//sysOrder.setFinalConsumer(seorder.getFheadSelfS0153());// 
					// 最终用户Id finalConsumerId ?
					/*if (null != seorder.getFheadSelfS0153()
							&& !"".equalsIgnoreCase(seorder.getFheadSelfS0153())) {
						for (Organization organization : organizationList) {
							if (organization.getFname().equalsIgnoreCase(
									seorder.getFheadSelfS0153())) {
								sysOrder.setFinalConsumerId(organization
										.getFinnerid());
								break;
							}
						}
					}*/
					// 合同版本 contractVersion
					sysOrder.setContractVersion(seorderList.get(i).getContractVersion());// 版本
					// 变更原因 changeReason
					sysOrder.setChangeReason(seorderList.get(i).getFchangeCauses());
					// 变更时间 changeTime
					if(null!=seorderList.get(i).getFchangeDate()){
						sysOrder.setChangeTime(seorderList.get(i).getFchangeDate() + "");
					}
					// 变更人ID changeUserId ?
					if (null != seorderList.get(i).getChangeUserName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getChangeUserName())) {
						for (Admin admin : adminList) {
							if (admin.getAdminName().equalsIgnoreCase(
									seorderList.get(i).getChangeUserName())) {
								sysOrder.setChangeUserId(admin.getAdminId());
								break;
							}
						}
					}
					// 变更人名称 changeUserName
					sysOrder.setChangeUserName(seorderList.get(i).getChangeUserName());
					// 业务员Id businessUserId ?
					if (null != seorderList.get(i).getEmpName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getEmpName())) {
						for (Admin admin : adminList) {
							if (admin.getAdminName().equalsIgnoreCase(
									seorderList.get(i).getEmpName())) {
								sysOrder.setBusinessUserId(admin.getAdminId());
								break;
							}
						}
					}
					// 业务员名称 businessUser
					sysOrder.setBusinessUser(seorderList.get(i).getEmpName() + "");
					// 打印次数 printCount N
					// 主管人名称 manager N
					// 主管人Id managerId N
					// 付款条件 payCondition N
					// 部门名称 department
					sysOrder.setDepartment(seorderList.get(i).getDepartmentName());// 制单部门
					// 部门ID departmentId ?
					if (null != seorderList.get(i).getDepartmentName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getDepartmentName())) {
						for (Department department : departmentList) {
							if (department.getTeamname().equalsIgnoreCase(
									seorderList.get(i).getDepartmentName())) {
								sysOrder.setDepartmentId(department.getTeamid());
								break;
							}
						}
					}
					// 审核人ID examineUserId ?
					if (null != seorderList.get(i).getCheckerName()
							&& !"".equalsIgnoreCase(seorderList.get(i).getCheckerName())) {
						for (Admin admin : adminList) {
							if (admin.getAdminName().equalsIgnoreCase(
									seorderList.get(i).getCheckerName())) {
								sysOrder.setExamineUserId(admin.getAdminId());
								break;
							}
						}
					}
					// 审核人名称 examineUserName
					sysOrder.setExamineUserName(seorderList.get(i).getCheckerName() + "");
					// 保质时间 warrantyTime N
					// 省份 province
					//sysOrder.setProvince(seorder.getYxbsf());
					// 省份Id provinceId ?
					/*if (null != seorder.getYxbsf()
							&& !"".equalsIgnoreCase(seorder.getYxbsf())) {
						for (Province province : provinceList) {
							if (province.getProvincename().equalsIgnoreCase(
									seorder.getYxbsf())) {
								sysOrder.setProvinceId(province.getProvinceid());
								break;
							}
						}
					}*/
					// 审核时间 examineTime
					if(null!=seorderList.get(i).getFcheckDate()){
						sysOrder.setExamineTime(seorderList.get(i).getFcheckDate() + "");
					}
					// 备注 remarks nvarchar(500)
					sysOrder.setRemarks(seorderList.get(i).getfText() + "");
					// 合同状态 sysOrderStatus
					sysOrder.setSysOrderStatus(100);
					// 客户合同号 customContractCode
					sysOrder.setCustomContractCode(seorderList.get(i).getfText5());
					// 销售方式 saleType
					//sysOrder.setSaleType(seorder.getSaleStylename());
					// 销售范围 saleArea
					//sysOrder.setSaleArea(seorder.getAreaName());
					// 可变范围 changeAreaType N
					// 是否有合同 FHeadSelfS0156
					/*String sfyht = seorder.getSfyht();
					if (null != sfyht && "N".equalsIgnoreCase(sfyht)) {
						sysOrder.setFheadSelfS0156(31374l);
					}
					if (null != sfyht && "Y".equalsIgnoreCase(sfyht)) {
						sysOrder.setFheadSelfS0156(31373l);
					}*/
					// 经销奖励系数 disCoefficient N
					// 经销商 dealerName N
					// 是否已记账 isbill
					sysOrder.setIsbill(0);
					// 经销业务费系数 operatorrate N
					//save(sysOrder);
					// 2从K3中查询指定业务员,指定日期的销售订单实体
	
					// 3从K3中查询指定业务员,指定日期的合同订单
	
					// 4从K3中查询指定业务员,指定日期的合同订单实体
	
					// 5从K3中查询指定业务员,指定日期的应收款
					sysorderList.add(sysOrder);
					if(i%500==0||(i==seorderList.size()-1)){
						System.gc();
						try {
						Thread.sleep(1000);
						saveSysOrderList(sysorderList);
						sysorderList.clear();		
						} catch (InterruptedException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
//				saveSysOrderList(sysorderList);
				/*List<SysOrder> sysorderListData=new ArrayList<SysOrder>();
				for (int j = 0; j < sysorderList.size(); j++) {
					//for (int j2 = j; j2 < sysorderList.size(); j2++) {
						sysorderListData.add( sysorderList.get(j) );
						if(j%500==0||(j==sysorderList.size()-1)){
							System.gc();
							try {
							Thread.sleep(1000);
							saveSysOrderList(sysorderListData);
							sysorderListData.clear();	
							} catch (InterruptedException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
						
					//}
					
				}*/
				
			}
//        }
//		}
	}
	/**
	 * 2统计常州ERP中的销售人员数据
	 */
	public void getContractEntryInfo( ) throws ServiceException
	{
		
		// 同时保存带K3数据库一份
		IItemOptService service = new ItemOptService();
//		List<Emp> empList=service.getEmpInfo();
//		if(null!=empList&&0<empList.size()){
//        for (Emp emp : empList) {
		 //1从K3中查询指定业务员的销售订单及合同实体
		List<SeorderEntry> seorderEntryList=service
			.getContractEntryInfo(Long.valueOf(0+""), "","");//71594L
		
//		List<SeorderEntry> seorderEntryList=service
//				.getContractEntryInfoWithDif(Long.valueOf(0+""), "","");
//		
		if(null!=seorderEntryList&&0<seorderEntryList.size()){
			List<Product>  productList=new ArrayList<Product>();
			SeorderEntry seorderEntry;
			
			for (int i = 0; i < seorderEntryList.size(); i++) {
				
				seorderEntry=(SeorderEntry)seorderEntryList.get(i);
				//1a更新WEB端销售订单
				Product product=new Product();
				//产品名称	productName 
				product.setProductName(seorderEntry.getItemname());
				//订单编号	orderCode 
				product.setOrderCode(seorderEntry.getfContractNo());
				//产品规格	specifications 
				product.setSpecifications(seorderEntry.getFModel());
				//产品数量	productCount 
				product.setProductCount(Float.valueOf(seorderEntry.getFqty()+""));
				//产品分类	productType 
				product.setProductType( seorderEntry.getItemType() );
				//销售单价	unitPrice 
				product.setUnitPrice( seorderEntry.getFtaxPrice() );
				//折扣	discount 
				product.setDiscount( Float.valueOf(seorderEntry.getFBusinessDiscount()+""));
				//总金额(不含税)	totalFee 
				product.setTotalFee( Float.valueOf(seorderEntry.getFamount()+""));
				//交货时间	deliveryTime 
				product.setDeliveryTime(seorderEntry.getFdate()+"");
				//版本号	productVersion 
				product.setProductVersion(seorderEntry.getfVersionNo());
				//基本单位名称	baseUnitName N
				
				//基本单位数量	baseUnitCount N
				//单位	productUnit 
				product.setProductUnit(seorderEntry.getUnitname());
				//产品代码	productCode 
				product.setProductCode(seorderEntry.getFNumber() );
				//辅助数量	productAssistCount N
				//单价(不含税)	unitRemoveTax
				product.setUnitRemoveTax(Float.valueOf(seorderEntry.getFprice() +""));
				//换算率	convertRate N
				//税率	taxRate 
				product.setTaxRate(Float.valueOf(seorderEntry.getFcess() +""));
				//折扣率	discountRate 
				product.setDiscountRate(Float.valueOf(seorderEntry.getFBusinessDiscountRate() +""));
				//实际含税单价	factUnitPrice 
				product.setFactUnitPrice(Float.valueOf(seorderEntry.getFpriceDiscount() +""));
				//销项税额	saleTax 
				//计算销项税额并显示= (含税总金额-不含税总金额)*(1-折扣率)
				Double unitRemoveTotalFeeResult = MathUtils.multiply(seorderEntry.getFqty() ,
						seorderEntry.getFprice()).doubleValue();
				Double  subtractTotalFeeResult = MathUtils.subtract(seorderEntry.getFallAmount() ,
						unitRemoveTotalFeeResult).doubleValue();
				
				Double  FBusinessDiscountRateResult = MathUtils.subtract(1 ,
						seorderEntry.getFBusinessDiscountRate()).doubleValue();
				
				Double saleTaxResult = MathUtils.multiply( subtractTotalFeeResult,
						FBusinessDiscountRateResult).doubleValue();//
				product.setSaleTax(saleTaxResult);
				//价税合计	priceTaxTotal
				//价税合计= 数量*实际含税单价
				Double multiResult = MathUtils.multiply(seorderEntry.getFqty(),
						seorderEntry.getFpriceDiscount()).doubleValue();//
				product.setPriceTaxTotal( multiResult );
				//价税合计(本位币)	priceTaxTotalRM 
				Double priceTaxTotalRMmultiResult = MathUtils.multiply(multiResult,
						seorderEntry.getFExchangeRate()).doubleValue();//
				product.setPriceTaxTotalRM( priceTaxTotalRMmultiResult );
				
				//制令号	makeNumberCode
				product.setMakeNumberCode(seorderEntry.getZlh());//执行标准错放到指令号里面了
				//任务单号	taskCodeN
				
				//关联数量	referCount N
				//辅助单位关联数量	assistUnitReferCount N
				//辅助单位出库数量	assistUnitOutHouseCount N
				//出库数量	outHouseCount N
				//客户BOM	customBOM N
				//成本对象	costObj N
				//是否冲减	addOrDel N
				//锁库标志	lockHouseMark N
				//建议交货日期	adviceDeliveryTime
				product.setAdviceDeliveryTime(seorderEntry.getFadviceConsignDate()+"");
				//源单单号	sourceOrderCode N
				//源单类型	sourceOrderType N
				//源单内码	sourceOrderInnerCode N
				//源单分录	sourceOrderSplit N
				//合同编码	contactCode N
				//合同内码	contactInnerCode N
				//合同分录	contactSplit N
				//开票数量	billCount N
				//客户订单号	customOrderCode N
				//辅助单位开票数量	assistCompanyBillCount N
				//辅助单位组装数量	assistCompanyFitCount N
				//订单行号	orderTrNumber
				product.setOrderTrNumber(seorderEntry.getFentryId());
				//基本单位组装数量	baseCompanyFitCount N
				//组装数量	fitCount N
				//辅助属性类别	assistAttributeType N
				//MRP计算标记	markForMRP N
				//MRP是否计算标记	markIsForMRP N
				//收款关联金额	collectPayReferFee N
				//质保金率(%)	qualityFeeRate N
				//质保金	qualityFee N
				//材质	material
				product.setMaterial(seorderEntry.getCzId()+"");
				//对外销售名称	outSaleName N
				//项目名称	proProjectName N
				//辅助属性	assistAttribute N
				//执行标准	excuteStandard N
				//辅助单位	assistUnit N
				//备注	remarks N
				//formatno	formatnoN
				 
				//服务费	servicecharge N
				//列表价	listprice N
				//结算价	balanceprice N
				//销售金额	salefee 
				product.setSalefee(seorderEntry.getFallAmount());
				//k3折扣率	fdiscountrate N
				//计量单位名	measureunitname N
				//材质名	materialname 
				product.setMaterialname(seorderEntry.getCzname());
				//结算金额	balancefee N
				//折扣额(本位币)	fbusinessdiscount 
				Double fbusinessdiscountmultiResult = MathUtils.multiply(seorderEntry.getFExchangeRate(),
						seorderEntry.getFBusinessDiscount() ).doubleValue();//
				product.setFbusinessdiscount(fbusinessdiscountmultiResult);
				//税额(本币)	 ftax
				Double ftaxmultiResult = MathUtils.multiply(saleTaxResult,
						seorderEntry.getFExchangeRate()).doubleValue();//
				product.setFtax(ftaxmultiResult);
				//含税单价(本币)	ftaxprice 
				Double ftaxpricemultiResult = MathUtils.multiply(seorderEntry.getFtaxPrice(),
						seorderEntry.getFExchangeRate()).doubleValue();//
				product.setFtaxprice(ftaxpricemultiResult);
				//金额(本币)	famountfor  = 总金额（含税）*汇率
				Double famountformultiResult = MathUtils.multiply(seorderEntry.getFExchangeRate(),
						seorderEntry.getFamount()).doubleValue();//
				product.setFamountfor(famountformultiResult);
				//是否PL产品	ispl N
				
				//productService.save(product);
				productList.add(product);
				/**/if(i%200==0||(i==seorderEntryList.size()-1)){
					System.gc();
					try {
						Thread.sleep(1000);
						try {
							productService.saveBatch(productList);
							productList.clear();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							System.out.println("---------------------------------");
							throw new ServiceException();
						}
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						System.out.println("===============================");
						e.printStackTrace();
					}
				}
			}
			/*List<Product> productListData=new ArrayList<Product>();
			for (int j = 0; j < productList.size(); j++) {
				//for (int j2 = j; j2 < sysorderList.size(); j2++) {
					productListData.add( productList.get(j) );
					if(j%200==0||(j==productList.size()-1)){
						System.gc();
						try {
						Thread.sleep(1000);
						productService.saveBatch(productList);
						productList.clear();	
						} catch (InterruptedException | SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					
				//}
				
			}*/
			//for (SeorderEntry seorderEntry : seorderEntryList) {}
		}
//        }
//		}
	}
	/**
	 * 2统计常州ERP中的销售人员数据
	 */
	public void getContractEntryInfoWithDif( ) throws ServiceException
	{
		
		// 同时保存带K3数据库一份
		IItemOptService service = new ItemOptService();
//		List<Emp> empList=service.getEmpInfo();
//		if(null!=empList&&0<empList.size()){
//        for (Emp emp : empList) {
		 //1从K3中查询指定业务员的销售订单及合同实体
//		List<SeorderEntry> seorderEntryList=service
//			.getContractEntryInfo(Long.valueOf(0+""), "","");//71594L
		
		List<SeorderEntry> seorderEntryList=service
				.getContractEntryInfoWithDif(Long.valueOf(0+""), "","");
		
		if(null!=seorderEntryList&&0<seorderEntryList.size()){
			List<Product>  productList=new ArrayList<Product>();
			for (int i = 0; i < seorderEntryList.size(); i++) {
				SeorderEntry seorderEntry=(SeorderEntry)seorderEntryList.get(i);
				//1a更新WEB端销售订单
				Product product=new Product(); 
				
				//产品名称	productName 
				product.setProductName(seorderEntry.getItemname());
				//订单编号	orderCode 
				product.setOrderCode(seorderEntry.getForderBillNo());
				//产品规格	specifications 
				product.setSpecifications(seorderEntry.getFModel());
				//产品数量	productCount 
				product.setProductCount(Float.valueOf(seorderEntry.getFqty()+""));
				//产品分类	productType 
				product.setProductType( seorderEntry.getItemType() );
				//销售单价	unitPrice 
				product.setUnitPrice( seorderEntry.getFtaxPrice() );
				//折扣	discount 
				product.setDiscount( Float.valueOf(seorderEntry.getFBusinessDiscount()+""));
				//总金额（不含税）	totalFee 
				product.setTotalFee( Float.valueOf(seorderEntry.getFamount()+""));
				//交货时间	deliveryTime 
				product.setDeliveryTime(seorderEntry.getFdate()+"");
				//版本号	productVersion 
				product.setProductVersion(seorderEntry.getfVersionNo());
				//基本单位名称	baseUnitName N
				
				//基本单位数量	baseUnitCount N
				//单位	productUnit 
				product.setProductUnit(seorderEntry.getUnitname());
				//产品代码	productCode 
				product.setProductCode(seorderEntry.getFNumber() );
				//辅助数量	productAssistCount N
				//单价(不含税)	unitRemoveTax
				product.setUnitRemoveTax(Float.valueOf(seorderEntry.getFprice() +""));
				//换算率	convertRate N
				//税率	taxRate 
				product.setTaxRate(Float.valueOf(seorderEntry.getFcess() +""));
				//折扣率	discountRate 
				product.setDiscountRate(Float.valueOf(seorderEntry.getFBusinessDiscountRate() +""));
				//实际含税单价	factUnitPrice 
				product.setFactUnitPrice(Float.valueOf(seorderEntry.getFpriceDiscount() +""));
				//销项税额	saleTax 
				//计算销项税额并显示= (含税总金额-不含税总金额)*(1-折扣率)
				Double unitRemoveTotalFeeResult = MathUtils.multiply(seorderEntry.getFqty() ,
						seorderEntry.getFprice()).doubleValue();
				Double  subtractTotalFeeResult = MathUtils.subtract(seorderEntry.getFallAmount() ,
						unitRemoveTotalFeeResult).doubleValue();
				
				Double  FBusinessDiscountRateResult = MathUtils.subtract(1 ,
						seorderEntry.getFBusinessDiscountRate()).doubleValue();
				
				Double saleTaxResult = MathUtils.multiply( subtractTotalFeeResult,
						FBusinessDiscountRateResult).doubleValue();//
				product.setSaleTax(saleTaxResult);
				//价税合计	priceTaxTotal
				//价税合计= 数量*实际含税单价
				Double multiResult = MathUtils.multiply(seorderEntry.getFqty(),
						seorderEntry.getFpriceDiscount()).doubleValue();//
				product.setPriceTaxTotal( multiResult );
				//价税合计(本位币)	priceTaxTotalRM 
				Double priceTaxTotalRMmultiResult = MathUtils.multiply(multiResult,
						seorderEntry.getFExchangeRate()).doubleValue();//
				product.setPriceTaxTotalRM( priceTaxTotalRMmultiResult );
				
				//制令号	makeNumberCode
				product.setMakeNumberCode(seorderEntry.getZlh());//执行标准错放到指令号里面了
				//任务单号	taskCodeN
				
				//关联数量	referCount N
				//辅助单位关联数量	assistUnitReferCount N
				//辅助单位出库数量	assistUnitOutHouseCount N
				//出库数量	outHouseCount N
				//客户BOM	customBOM N
				//成本对象	costObj N
				//是否冲减	addOrDel N
				//锁库标志	lockHouseMark N
				//建议交货日期	adviceDeliveryTime
				product.setAdviceDeliveryTime(seorderEntry.getFadviceConsignDate()+"");
				//源单单号	sourceOrderCode N
				//源单类型	sourceOrderType N
				//源单内码	sourceOrderInnerCode N
				//源单分录	sourceOrderSplit N
				//合同编码	contactCode N
				//合同内码	contactInnerCode N
				//合同分录	contactSplit N
				//开票数量	billCount N
				//客户订单号	customOrderCode N
				//辅助单位开票数量	assistCompanyBillCount N
				//辅助单位组装数量	assistCompanyFitCount N
				//订单行号	orderTrNumber
				product.setOrderTrNumber(seorderEntry.getFentryId());
				//基本单位组装数量	baseCompanyFitCount N
				//组装数量	fitCount N
				//辅助属性类别	assistAttributeType N
				//MRP计算标记	markForMRP N
				//MRP是否计算标记	markIsForMRP N
				//收款关联金额	collectPayReferFee N
				//质保金率(%)	qualityFeeRate N
				//质保金	qualityFee N
				//材质	material
				product.setMaterial(seorderEntry.getCzId()+"");
				//对外销售名称	outSaleName N
				//项目名称	proProjectName N
				//辅助属性	assistAttribute N
				//执行标准	excuteStandard N
				//辅助单位	assistUnit N
				//备注	remarks N
				//formatno	formatnoN
				 
				//服务费	servicecharge N
				//列表价	listprice N
				//结算价	balanceprice N
				//销售金额	salefee 
				product.setSalefee(seorderEntry.getFallAmount());
				//k3折扣率	fdiscountrate N
				//计量单位名	measureunitname N
				//材质名	materialname 
				product.setMaterialname(seorderEntry.getCzname());
				//结算金额	balancefee N
				//折扣额(本位币)	fbusinessdiscount 
				Double fbusinessdiscountmultiResult = MathUtils.multiply(seorderEntry.getFExchangeRate(),
						seorderEntry.getFBusinessDiscount() ).doubleValue();//
				product.setFbusinessdiscount(fbusinessdiscountmultiResult);
				//税额(本币)	 ftax
				Double ftaxmultiResult = MathUtils.multiply(saleTaxResult,
						seorderEntry.getFExchangeRate()).doubleValue();//
				product.setFtax(ftaxmultiResult);
				//含税单价(本币)	ftaxprice 
				Double ftaxpricemultiResult = MathUtils.multiply(seorderEntry.getFtaxPrice(),
						seorderEntry.getFExchangeRate()).doubleValue();//
				product.setFtaxprice(ftaxpricemultiResult);
				//金额(本币)	famountfor
				Double famountformultiResult = MathUtils.multiply(seorderEntry.getFExchangeRate(),
						seorderEntry.getFamount()).doubleValue();//
				product.setFamountfor(famountformultiResult);
				//是否PL产品	ispl N
				
				productList.add(product);
				if(i%500==0||(i==seorderEntryList.size()-1)){
					System.gc();
					try {
						Thread.sleep(1000);
						try {
							productService.saveBatch(productList);
							productList.clear();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							throw new ServiceException();
						}
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
			/*try {
				productService.saveBatch(productList);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				throw new ServiceException();
			}*/
			/*List<Product> productListData=new ArrayList<Product>();
			for (int j = 0; j < productList.size(); j++) {
				//for (int j2 = j; j2 < sysorderList.size(); j2++) {
					productListData.add( productList.get(j) );
					if(j%500==0||(j==productList.size()-1)){
						System.gc();
						try {
						Thread.sleep(1000);
						productService.saveBatch(productList);
						productList.clear();	
						} catch (InterruptedException | SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					
				//}
				
			}*/
			//for (SeorderEntry seorderEntry : seorderEntryList) {}
		}
//        }
//		}
	}
	/**
	 * 2统计常州ERP中的 合同号有,订单号没有的
	 */
	public void getContractEntryInfoWithNoOrderNum( ) throws ServiceException
	{
		
		// 同时保存带K3数据库一份
		IItemOptService service = new ItemOptService();
//		List<Emp> empList=service.getEmpInfo();
//		if(null!=empList&&0<empList.size()){
//        for (Emp emp : empList) {
		 //1从K3中查询指定业务员的销售订单及合同实体
//		List<SeorderEntry> seorderEntryList=service
//			.getContractEntryInfo(Long.valueOf(0+""), "","");//71594L
		
		List<SeorderEntry> seorderEntryList=service
				.getContractEntryInfoWithNoOrderNum(Long.valueOf(0+""), "","");
		
		if(null!=seorderEntryList&&0<seorderEntryList.size()){
			List<Product>  productList=new ArrayList<Product>();
			for (int i = 0; i < seorderEntryList.size(); i++) {
				SeorderEntry seorderEntry=(SeorderEntry)seorderEntryList.get(i);
				//1a更新WEB端销售订单
				Product product=new Product(); 
				
				//产品名称	productName 
				product.setProductName(seorderEntry.getItemname());
				//订单编号	orderCode 
				product.setOrderCode(seorderEntry.getfContractNo()+"N");
				//产品规格	specifications 
				product.setSpecifications(seorderEntry.getFModel());
				//产品数量	productCount 
				product.setProductCount(Float.valueOf(seorderEntry.getFqty()+""));
				//产品分类	productType 
				//product.setProductType( seorderEntry.getItemType() );
				//销售单价	unitPrice 
				product.setUnitPrice( seorderEntry.getFtaxPrice() );
				//折扣	discount 
				product.setDiscount( Float.valueOf(seorderEntry.getFBusinessDiscount()+""));
				
				Double allAmountResult = MathUtils.multiply(seorderEntry.getFqty() ,
						seorderEntry.getFtaxPrice()).doubleValue();
				//总金额（不含税金额）	totalFee 
				product.setTotalFee( Float.valueOf(seorderEntry.getFamount()+""));
				//交货时间	deliveryTime 
				//product.setDeliveryTime(seorderEntry.getFdate()+"");
				//版本号	productVersion 
				product.setProductVersion(seorderEntry.getfVersionNo());
				//基本单位名称	baseUnitName N
				
				//基本单位数量	baseUnitCount N
				//单位	productUnit 
				product.setProductUnit(seorderEntry.getUnitname());
				//产品代码	productCode 
				product.setProductCode(seorderEntry.getFNumber() );
				//辅助数量	productAssistCount N
				//单价(不含税)	unitRemoveTax
				product.setUnitRemoveTax(Float.valueOf(seorderEntry.getFprice() +""));
				//换算率	convertRate N
				//税率	taxRate 
				product.setTaxRate(Float.valueOf("17"));
				//折扣率	discountRate 
				product.setDiscountRate(Float.valueOf(seorderEntry.getFBusinessDiscountRate() +""));
				//实际含税单价	factUnitPrice 
				product.setFactUnitPrice(Float.valueOf(seorderEntry.getFpriceDiscount() +""));
				//销项税额	saleTax 
				//计算销项税额并显示= (含税总金额-不含税总金额)*(1-折扣率)
				Double unitRemoveTotalFeeResult = MathUtils.multiply(seorderEntry.getFqty() ,
						seorderEntry.getFprice()).doubleValue();
				Double  subtractTotalFeeResult = MathUtils.subtract(allAmountResult ,
						unitRemoveTotalFeeResult).doubleValue();
				
				Double  FBusinessDiscountRateResult = MathUtils.subtract(1 ,
						seorderEntry.getFBusinessDiscountRate()).doubleValue();
				
				Double saleTaxResult = MathUtils.multiply( subtractTotalFeeResult,
						FBusinessDiscountRateResult).doubleValue();//
				product.setSaleTax(saleTaxResult);
				//价税合计	priceTaxTotal
				//价税合计= 数量*实际含税单价
				Double multiResult = MathUtils.multiply(seorderEntry.getFqty(),
						seorderEntry.getFpriceDiscount()).doubleValue();//
				product.setPriceTaxTotal( multiResult );
				//价税合计(本位币)	priceTaxTotalRM 
				Double priceTaxTotalRMmultiResult = MathUtils.multiply(multiResult,
						seorderEntry.getFExchangeRate()).doubleValue();//
				product.setPriceTaxTotalRM( priceTaxTotalRMmultiResult );
				
				//制令号	makeNumberCode
				//product.setMakeNumberCode(seorderEntry.getZlh());//执行标准错放到指令号里面了
				//任务单号	taskCodeN
				
				//关联数量	referCount N
				//辅助单位关联数量	assistUnitReferCount N
				//辅助单位出库数量	assistUnitOutHouseCount N
				//出库数量	outHouseCount N
				//客户BOM	customBOM N
				//成本对象	costObj N
				//是否冲减	addOrDel N
				//锁库标志	lockHouseMark N
				//建议交货日期	adviceDeliveryTime
				//product.setAdviceDeliveryTime(seorderEntry.getFadviceConsignDate()+"");
				//源单单号	sourceOrderCode N
				//源单类型	sourceOrderType N
				//源单内码	sourceOrderInnerCode N
				//源单分录	sourceOrderSplit N
				//合同编码	contactCode N
				//合同内码	contactInnerCode N
				//合同分录	contactSplit N
				//开票数量	billCount N
				//客户订单号	customOrderCode N
				//辅助单位开票数量	assistCompanyBillCount N
				//辅助单位组装数量	assistCompanyFitCount N
				//订单行号	orderTrNumber
				//product.setOrderTrNumber(seorderEntry.getFentryId());
				//基本单位组装数量	baseCompanyFitCount N
				//组装数量	fitCount N
				//辅助属性类别	assistAttributeType N
				//MRP计算标记	markForMRP N
				//MRP是否计算标记	markIsForMRP N
				//收款关联金额	collectPayReferFee N
				//质保金率(%)	qualityFeeRate N
				//质保金	qualityFee N
				//材质	material
				//product.setMaterial(seorderEntry.getCzId()+"");
				//对外销售名称	outSaleName N
				//项目名称	proProjectName N
				//辅助属性	assistAttribute N
				//执行标准	excuteStandard N
				//辅助单位	assistUnit N
				//备注	remarks N
				//formatno	formatnoN
				 
				//服务费	servicecharge N
				//列表价	listprice N
				//结算价	balanceprice N
				//销售金额	salefee 
				product.setSalefee(allAmountResult);
				//k3折扣率	fdiscountrate N
				//计量单位名	measureunitname N
				//材质名	materialname 
				//product.setMaterialname(seorderEntry.getCzname());
				//结算金额	balancefee N
				//折扣额(本位币)	fbusinessdiscount 
				Double fbusinessdiscountmultiResult = MathUtils.multiply(seorderEntry.getFExchangeRate(),
						seorderEntry.getFBusinessDiscount() ).doubleValue();//
				product.setFbusinessdiscount(fbusinessdiscountmultiResult);
				//税额(本币)	 ftax
				Double ftaxmultiResult = MathUtils.multiply(saleTaxResult,
						seorderEntry.getFExchangeRate()).doubleValue();//
				product.setFtax(ftaxmultiResult);
				//含税单价(本币)	ftaxprice 
				Double ftaxpricemultiResult = MathUtils.multiply(seorderEntry.getFtaxPrice(),
						seorderEntry.getFExchangeRate()).doubleValue();//
				product.setFtaxprice(ftaxpricemultiResult);
				//金额(本币)	famountfor
				Double famountformultiResult = MathUtils.multiply(seorderEntry.getFExchangeRate(),
						seorderEntry.getFamount()).doubleValue();//
				product.setFamountfor(famountformultiResult);
				//是否PL产品	ispl N
				
				productList.add(product);
				if(i%500==0||(i==seorderEntryList.size()-1)){
					System.gc();
					try {
						Thread.sleep(1000);
						try {
							productService.saveBatch(productList);
							productList.clear();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							throw new ServiceException();
						}
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
			/*List<Product> productListData=new ArrayList<Product>();
			for (int j = 0; j < productList.size(); j++) {
				//for (int j2 = j; j2 < sysorderList.size(); j2++) {
					productListData.add( productList.get(j) );
					if(j%500==0||(j==productList.size()-1)){
						System.gc();
						try {
						Thread.sleep(1000);
						productService.saveBatch(productList);
						productList.clear();	
						} catch (InterruptedException | SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					
				//}
				
			}*/
			/*try {
				productService.saveBatch(productList);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				throw new ServiceException();
			}*/
			
			//for (SeorderEntry seorderEntry : seorderEntryList) {}
		}
//        }
//		}
	}
	/**
	 * 3统计常州ERP中的销售人员销售订单的关联合同的应收款信息
	 */
	public void getContractSchemeInfoWithNoOrderNum( ) throws ServiceException
	{
		
		// 同时保存带K3数据库一份
		IItemOptService service = new ItemOptService();	 //1从K3中查询指定业务员的销售订单及合同实体
//		List<Emp> empList=service.getEmpInfo();
//		if(null!=empList&&0<empList.size()){
//        for (Emp emp : empList) {
		/*List<TRpcontractScheme> contractSchemeList=service
			.getRPContractSchemeInfo(Long.valueOf(emp.getFItemID()+""), "","");//71594L
*/		
//		List<TRpcontractScheme> contractSchemeList=service
//		.getRPContractSchemeInfo(Long.valueOf(0+""), "","");//71594L
		
		
		List<TRpcontractScheme> contractSchemeList=service
				.getRPContractSchemeInfoWithNoOrderNum(Long.valueOf(0+""), "","");
		
		if(null!=contractSchemeList&&0<contractSchemeList.size()){
			List<CollectPay>  collectPayList=new ArrayList<CollectPay>();
			for (int i = 0; i < contractSchemeList.size(); i++) {
				//for (TRpcontractScheme tRpcontractScheme : contractSchemeList) {
				CollectPay collectPay=new CollectPay();
				collectPay.setOrderCode(contractSchemeList.get(i).getFbillno()+"N");
				collectPay.setPlanCollectTime(contractSchemeList.get(i).getFreceiveDate()+"");
				collectPay.setShouldCollectTime(contractSchemeList.get(i).getFreceiveDate()+"");
				
				collectPay.setShouldCollectFee(contractSchemeList.get(i).getFamount());
				collectPay.setShouldCollectFeeRm(contractSchemeList.get(i).getFamountFor());
				collectPay.setCollectPayVersion(contractSchemeList.get(i).getFVersionNo());
				
				collectPay.setCollectPayType(contractSchemeList.get(i).getFtext1());
				collectPay.setGuaranteeLetterType(contractSchemeList.get(i).getFtext2());
				
				if(null!=contractSchemeList.get(i).getFdate1()){
					collectPay.setGuaranteeLetterStart(contractSchemeList.get(i).getFdate1()+"");
				}
				if(null!=contractSchemeList.get(i).getFdate2()){
				collectPay.setGuaranteeLetterEnd(contractSchemeList.get(i).getFdate2()+"");
				}
				
				collectPayList.add(collectPay);
				if(i%500==0||(i==contractSchemeList.size()-1)){
					System.gc();
					try {
						Thread.sleep(1000);
						try {
							collectPayService.saveBatch(collectPayList);
							collectPayList.clear();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							throw new ServiceException();
						}
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			}
			}
			/*List<CollectPay> collectPayListData=new ArrayList<CollectPay>();
			for (int j = 0; j < collectPayList.size(); j++) {
				//for (int j2 = j; j2 < sysorderList.size(); j2++) {
				collectPayListData.add( collectPayList.get(j) );
					if(j%500==0||(j==collectPayList.size()-1)){
						System.gc();
						try {
						Thread.sleep(1000);
						collectPayService.saveBatch(collectPayList);
						collectPayList.clear();
						} catch (InterruptedException | SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				//}
			}*/
			/*try {
				collectPayService.saveBatch(collectPayList);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				throw new ServiceException();
			}*/
		}
        //}
		//}
	}
	/**
	 * 3统计常州ERP中的销售人员销售订单的关联合同的应收款信息
	 */
	public void getContractSchemeInfoWithDif( ) throws ServiceException
	{
		
		// 同时保存带K3数据库一份
		IItemOptService service = new ItemOptService();	 //1从K3中查询指定业务员的销售订单及合同实体
//		List<Emp> empList=service.getEmpInfo();
//		if(null!=empList&&0<empList.size()){
//        for (Emp emp : empList) {
		/*List<TRpcontractScheme> contractSchemeList=service
			.getRPContractSchemeInfo(Long.valueOf(emp.getFItemID()+""), "","");//71594L
*/		
//		List<TRpcontractScheme> contractSchemeList=service
//		.getRPContractSchemeInfo(Long.valueOf(0+""), "","");//71594L
		
		
		List<TRpcontractScheme> contractSchemeList=service
				.getRPContractSchemeInfoWithDif(Long.valueOf(0+""), "","");
		
		if(null!=contractSchemeList&&0<contractSchemeList.size()){
			List<CollectPay>  collectPayList=new ArrayList<CollectPay>();
			
			//for (TRpcontractScheme tRpcontractScheme : contractSchemeList) {
			for (int i = 0; i < contractSchemeList.size(); i++) {
				CollectPay collectPay=new CollectPay();
				collectPay.setOrderCode(contractSchemeList.get(i).getFbillno());
				collectPay.setPlanCollectTime(contractSchemeList.get(i).getFreceiveDate()+"");
				collectPay.setShouldCollectTime(contractSchemeList.get(i).getFreceiveDate()+"");
				
				collectPay.setShouldCollectFee(contractSchemeList.get(i).getFamount());
				collectPay.setShouldCollectFeeRm(contractSchemeList.get(i).getFamountFor());
				collectPay.setCollectPayVersion(contractSchemeList.get(i).getFVersionNo());
				
				collectPay.setCollectPayType(contractSchemeList.get(i).getFtext1());
				collectPay.setGuaranteeLetterType(contractSchemeList.get(i).getFtext2());
				
				if(null!=contractSchemeList.get(i).getFdate1()){
					collectPay.setGuaranteeLetterStart(contractSchemeList.get(i).getFdate1()+"");
				}
				if(null!=contractSchemeList.get(i).getFdate2()){
				collectPay.setGuaranteeLetterEnd(contractSchemeList.get(i).getFdate2()+"");
				}
				
				collectPayList.add(collectPay);
				if(i%500==0||(i==contractSchemeList.size()-1)){
					System.gc();
					try {
						Thread.sleep(1000);
						try {
							collectPayService.saveBatch(collectPayList);
							collectPayList.clear();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							throw new ServiceException();
						}
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			}
				/*List<CollectPay> collectPayListData=new ArrayList<CollectPay>();
				for (int j = 0; j < collectPayList.size(); j++) {
					//for (int j2 = j; j2 < sysorderList.size(); j2++) {
					collectPayListData.add( collectPayList.get(j) );
						if(j%500==0||(j==collectPayList.size()-1)){
							System.gc();
							try {
							Thread.sleep(1000);
							collectPayService.saveBatch(collectPayList);
							collectPayList.clear();
							} catch (InterruptedException | SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
					//}
				}*/
			/*try {
				collectPayService.saveBatch(collectPayList);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				throw new ServiceException();
			}*/
		}
		}
        //}
		//}
	}
	/**
	 * 3统计常州ERP中的销售人员销售订单的关联合同的应收款信息
	 */
	public void getContractSchemeInfo( ) throws ServiceException
	{
		
		// 同时保存带K3数据库一份
		IItemOptService service = new ItemOptService();	 //1从K3中查询指定业务员的销售订单及合同实体
//		List<Emp> empList=service.getEmpInfo();
//		if(null!=empList&&0<empList.size()){
//        for (Emp emp : empList) {
		/*List<TRpcontractScheme> contractSchemeList=service
			.getRPContractSchemeInfo(Long.valueOf(emp.getFItemID()+""), "","");//71594L
*/		
		List<TRpcontractScheme> contractSchemeList=service
		.getRPContractSchemeInfo(Long.valueOf(0+""), "","");//71594L
		
		
//		List<TRpcontractScheme> contractSchemeList=service
//				.getRPContractSchemeInfoWithDif(Long.valueOf(0+""), "","");
		
		if(null!=contractSchemeList&&0<contractSchemeList.size()){
			List<CollectPay> collectPayList=new ArrayList<CollectPay>();
			for (int i = 0; i < contractSchemeList.size(); i++) {
			//for (TRpcontractScheme tRpcontractScheme : contractSchemeList) {
				CollectPay collectPay=new CollectPay();
				collectPay.setOrderCode(contractSchemeList.get(i).getFbillno());
				collectPay.setPlanCollectTime(contractSchemeList.get(i).getFreceiveDate()+"");
				collectPay.setShouldCollectTime(contractSchemeList.get(i).getFreceiveDate()+"");
				
				collectPay.setShouldCollectFee(contractSchemeList.get(i).getFamount());
				collectPay.setShouldCollectFeeRm(contractSchemeList.get(i).getFamountFor());
				collectPay.setCollectPayVersion(contractSchemeList.get(i).getFVersionNo());
				
				collectPay.setCollectPayType(contractSchemeList.get(i).getFtext1());
				collectPay.setGuaranteeLetterType(contractSchemeList.get(i).getFtext2());
				
				if(null!=contractSchemeList.get(i).getFdate1()){
					collectPay.setGuaranteeLetterStart(contractSchemeList.get(i).getFdate1()+"");
				}
				if(null!=contractSchemeList.get(i).getFdate2()){
				collectPay.setGuaranteeLetterEnd(contractSchemeList.get(i).getFdate2()+"");
				}
				//collectPayService.save(collectPay);
				collectPayList.add(collectPay);
				if(i%500==0||(i==contractSchemeList.size()-1)){
					System.gc();
					try {
						Thread.sleep(1000);
						try {
							collectPayService.saveBatch(collectPayList);
							collectPayList.clear();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							throw new ServiceException();
						}
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			}
				/*List<CollectPay> collectPayListData=new ArrayList<CollectPay>();
				for (int j = 0; j < collectPayList.size(); j++) {
					//for (int j2 = j; j2 < sysorderList.size(); j2++) {
					collectPayListData.add( collectPayList.get(j) );
						if(j%500==0||(j==collectPayList.size()-1)){
							System.gc();
							try {
							Thread.sleep(1000);
							collectPayService.saveBatch(collectPayList);
							collectPayList.clear();
							} catch (InterruptedException | SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
					//}
				}*/
			/*try {
				collectPayService.saveBatch(collectPayList);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				throw new ServiceException();
			}*/
		}
		}
        //}
		//}
	}
	@Override
	public void exeprocessExamine(SysOrderQuery sysOrderQuery,
			SysOrder sysOrder, ProcessExetask processExetask) throws ServiceException  {
		// TODO Auto-generated method stub
		//流程部分
		//2流程更新
				Boolean examResult=false;
				Map<String,Object> map = processExetaskService.exeProcess(processExetask,0);//不需要分发节点
				if(!(Boolean)map.get("flag")){//流程没有异常
					throw new ServiceException((String)map.get("msg"));
				}else if((Boolean)map.get("rebackTag")){//被驳回
					sysOrder.setSysOrderStatus( (Integer)map.get("step") );
					sysOrder.setFstatusDesc((String)map.get("stepName"));
					changeMessage(sysOrder,processExetask.getTaskCode(),map);//向系统消息添加数据
				}else if((Boolean)map.get("flag")){//是正常的往下执行的流程
					sysOrder.setSysOrderStatus((Integer)map.get("step"));
					String desc = (String)map.get("stepName")+" 执行人:"+(String)map.get("handlers");//获取下一步的名称和执行人
					changeMessage(sysOrder,processExetask.getTaskCode(),map);//向系统消息添加数据
					sysOrder.setFstatusDesc(desc);
					//修改表头中对应的标签的信息
					if((Boolean)map.get("endTag")){//审批流程结束,修改库存
						//返回流程结束标志
						examResult=true;
					}
				}else{
					throw new ServiceException((String)map.get("msg"));
				}
				//设定审核时间
				 
				sysOrder.setExamineTime(formt.format(new Date()));
				 
				sysOrder.setExamineUserId(Long.valueOf(SpringSecurityUtils.getCurrentUserId()));
				sysOrderDao.update(sysOrder);
				AdminSession admin = (AdminSession) SecurityContextHolder
						.getContext().getAuthentication().getPrincipal();
				sysOrder = getById(sysOrderQuery.getSysOrderId());
				if(!examResult){//流程未结束
					//throw new ServiceException("审核失败,请重试!");
				}
				else{		
		        //业务部分
					
			/*Long nowAdminDutyId = admin.getAdmin().getDutyid();
			Duty duty = dutyService.getById(nowAdminDutyId);*/
			// 根据职位id 查找职位名
			// 提交操作由订单管理员操作
			// 审核操作有财务审核员操作
			SimpleDateFormat formt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			int sysOrderStatus = sysOrderQuery.getSysOrderStatus();
			if (sysOrderStatus == 1) {// 提交系统订单
				if (null == sysOrder.getContractCode()
						|| "".equals(sysOrder.getContractCode())) {
					logger.error("系统订单的合同编号不能为空!");
					// Struts2Utils.renderJson("改变系统订单的状态只能是订单管理员或财务审核员！");
					/*
					 * resultInfo[0] = "-1"; resultInfo[1] = "系统订单的合同编号不能为空!";
					 * return JSON;
					 */
					throw new ServiceException("操作失败，原因：系统订单的合同编号不能为空!");
				}
			}
			//审核操作核算数据
			/**/if (sysOrderStatus == 2){
				//调用核算接口
				//从数据库找到当前订单关联产品的PL产品
				/*ProductQuery productQuery=new ProductQuery();
				productQuery.setOrderCode(sysOrder.getOrderCode());
				StringBuffer sb=new StringBuffer("");
				List<Product> productList=productService.findList(productQuery);
				setProductPlInfo(sb, productList);
				TREReturn returnInfo= performanceService.processBlance(sysOrder.getOrderCode(),
						sysOrder.getContractTime(),sysOrder.getBusinessUserId(),productList);
				if ("-1".equalsIgnoreCase(returnInfo.getnCode() )) {
					throw new ServiceException("操作失败，原因：" + returnInfo.getStrInfo());
				}*/
			}
			try {
				if (sysOrderStatus == 2
						|| sysOrderStatus == 3) {// 审核员审核或驳回操作
					// 同时保存审核意见
					ApproveMsg approveMsgentity = new ApproveMsg();
					approveMsgentity.setApprover(admin.getAdmin().getAdminName());
					approveMsgentity.setBillId(sysOrderQuery.getSysOrderId());
			
					approveMsgentity.setBillType(2);// 2系统订单
					if ("2".equals(sysOrderQuery.getSysOrderStatus() + "")) {
						approveMsgentity.setOptType(1);// 审核
					}
					if ("3".equals(sysOrderQuery.getSysOrderStatus() + "")) {
						approveMsgentity.setOptType(2);// 驳回
					}
					approveMsgentity.setApproverTime(DateUtil.GetDate2(DateUtil
							.GetDateTime(), "yyyy-MM-dd HH:mm:ss"));
					if (null != sysOrderQuery.getApproveCotent()) {
						approveMsgentity.setApproveCotent(sysOrderQuery
								.getApproveCotent());
					}
					approveMsgService.saveOrUpdate(approveMsgentity);
				}
				
			
			
			//审核操作
			sysOrder.setExamineTime(formt.format(new Date()));
			//记录审核人WEB端和ERP中都需要存入
			sysOrder.setExamineUserName(admin.getAdmin().getAdminName());
			sysOrder.setExamineUserId(admin.getAdmin().getAdminId());
			
			sysOrder.setSysOrderStatus(sysOrderQuery.getSysOrderStatus());
			
			TREReturn returnInfoExam=updateOpt(sysOrder);
			
			
				if ("-1".equalsIgnoreCase(returnInfoExam.getnCode() )) {
					throw new ServiceException("操作失败，原因：" + returnInfoExam.getStrInfo());
				}
				} catch (RuntimeException e) {
					throw new ServiceException("操作失败，原因："+e.getMessage() );
				}
			
			}
			if(sysOrder.getSysOrderId()!=null){
				operationLogDao.save(ConfigTerrence.MODEL_SYSORDER, ConfigTerrence.OPT_EXAMINE, "主键为："+sysOrder.getSysOrderId()+"且订单编号为："+sysOrder.getOrderCode()+"的系统订单审核成功，审核人为："+admin.getAdmin().getAdminName());
			}
			
	}
	//更新和保存系统消息
	public void changeMessage(SysOrder entity,String mark,Map<String,Object> map){
		SysOrder da = sysOrderDao.getById(entity.getSysOrderId());
		if(mark.equals("TO_SYSORDER_TASK")){
			saveOrupdateMessage(da,"TO_SYSORDER_TASK",map,"系统订单待审核",1);
		}
	}
	public void saveOrupdateMessage(SysOrder da,String mark,Map<String,Object> map,String mesname,Integer mestype){
		//1先将原来的消息更新为status=2
		MessageQuery query = new MessageQuery();
		query.setFbillid(da.getSysOrderId());
		query.setProcessname(mark);
		query.setSortColumns("id");
		List<Message> lists = messageDao.findList(query);
		if(lists!=null&&lists.size()>0){
			Message mes = lists.get(lists.size()-1);
			mes.setStatus(2);
			mes.setExecdate(DateUtils.formtDateTime(new Date(), "yyyy-MM-dd HH:mm:ss"));//执行日期
			this.messageDao.update(mes);
		}
		//2如果有当前执行人则插入数据
		if(map!=null&&map.get("handlerIds")!=null){
			List<Long> handlerIds = new ArrayList<Long>();
			handlerIds = (List<Long>) map.get("handlerIds");
			String empids="";
			if(handlerIds!=null&&handlerIds.size()>0){
				for(int i=0;i<handlerIds.size();i++){
					if(i==handlerIds.size()-1){
						empids +=handlerIds.get(i);
					}else{
						empids +=handlerIds.get(i)+",";
					}
				}
			}
			if(empids!=null&&!empids.equals("")){
				Message message = new Message();
				message.setName(mesname);//消息名称
				message.setContent("订单编号："+da.getOrderCode()+";合同编号："+da.getContractCode()+";合同时间："+da.getContractTimeString());//消息内容
				message.setType(mestype);//单据类型
				message.setFbillno(da.getOrderCode());//单据编号
				message.setFbillid(da.getSysOrderId());//单据主键
				message.setUrl("order/sysorder-list.htm");//链接地址
				message.setStatus(1);//消息状态(1未处理2已处理)
				message.setCreatedate(DateUtils.formtDateTime(new Date(), "yyyy-MM-dd HH:mm:ss"));//创建日期
				message.setEmpids(empids);//执行人
				message.setProcessname(mark);//流程名称
				this.messageDao.save(message);
			}
		}
	}

	@Override
	public List<SysOrder> findCheckedList(SysOrderQuery sysOrderQuery)
			throws ServiceException {
		// TODO Auto-generated method stub
		return this.sysOrderDao.findCheckedList(sysOrderQuery);
	}
}
