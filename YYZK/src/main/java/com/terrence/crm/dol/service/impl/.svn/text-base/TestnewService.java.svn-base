package com.terrence.crm.dol.service.impl;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.apache.commons.lang.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.Testnew;
import com.terrence.crm.dol.dao.ITestnewDao;
import com.terrence.crm.dol.query.TestnewQuery;
import com.terrence.crm.dol.service.ITestnewService;
@Service
@Transactional
public class TestnewService implements ITestnewService {
	@Autowired
	@Qualifier("testnewDao")
	private ITestnewDao testnewDao;
	@Override
	public Testnew getById(Long id) throws ServiceException {
		return testnewDao.getById(id);
	}
	@Override
	public void saveOrUpdate(Testnew entity) throws ServiceException {
		testnewDao.saveOrUpdate(entity);
	}
	@Override
	public Long save(Testnew entity) throws ServiceException {
		return testnewDao.save(entity);
	}
	@Override
	public Integer update(Testnew entity) throws ServiceException {
		return testnewDao.update(entity);
	}
	@Override
	public Integer deleteById(Long id) throws ServiceException {
		return testnewDao.deleteById(id);
	}
	@Override
	public Integer deleteByMultipleId(List<Long> idList) throws ServiceException {
		String delIds = StringUtils.join(idList, ",");
		Integer returnValue = testnewDao.deleteByMultipleId(delIds);
		return returnValue;
	}
	@Transactional(readOnly=true)
	public Page<Testnew> findPage(Page<Testnew> page, TestnewQuery query) throws ServiceException{
		return testnewDao.findPage(page, query);
	}
	@Transactional(readOnly=true)
	public Page<Testnew> findPage(Page<Testnew> page,String statement, TestnewQuery query) throws ServiceException{
		return testnewDao.findPage(page,statement, query);
	}
	@Transactional(readOnly=true)
	public List<Testnew> findList(TestnewQuery query) throws ServiceException{
		return testnewDao.findList(query);
	}
	@Transactional(readOnly=true)
	public List<Testnew> findList(TestnewQuery query,Integer pageSize) throws ServiceException{
		return testnewDao.findList(query,pageSize);
	}
	@Transactional(readOnly=true)
	public List<Testnew> findList(TestnewQuery query,String statement,Integer pageSize) throws ServiceException{
		return testnewDao.findList(query,statement,pageSize);
	}
	@Transactional(readOnly=true)
	public List<Testnew> findAllList() throws ServiceException{
		return testnewDao.findAllList();
	}
}
