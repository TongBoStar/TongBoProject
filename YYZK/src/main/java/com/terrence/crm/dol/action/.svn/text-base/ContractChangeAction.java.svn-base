package com.terrence.crm.dol.action;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import org.apache.log4j.Logger;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.base.utils.Struts2Utils;
import com.terrence.crm.dol.bean.ContractChange;
import com.terrence.crm.dol.query.ContractChangeQuery;
import com.terrence.crm.dol.service.IContractChangeService;

/**
 * 合同变更单控制类
 * @author wangtongbo 
 * E-mail:tongbo.wang@terrence.com.cn
 * @version 创建时间：2014-5-26 上午9:32:31
 */
@Scope("prototype")
@Namespace("/contractChange")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "contractChange." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class ContractChangeAction extends CrudActionSupport<ContractChange>  implements ApplicationContextAware {
	private static final Logger log = Logger.getLogger(ContractChangeAction.class);
	/**
	 * 
	 */
	private static final long serialVersionUID = 91391478824792731L;
	
	@Autowired
	private IContractChangeService contractChangeService;
	
	private ContractChange contractChange;
	private ContractChangeQuery contractChangeQuery;
	private Page<ContractChange> page;
	private ApplicationContext ctx;
	private Long id;
	private List<java.lang.Long> checkedIdList;
	private List<ContractChange> contractChangeList;
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	@Override
	public ContractChange getModel() {
		return contractChange;
	}
	@Override
	public void setApplicationContext(ApplicationContext ctx)
			throws BeansException {
		this.ctx = ctx;
	}
	@Override
	public String list() throws Exception {
		log.debug("获取系统订单列表");
		if (!page.isOrderBySetted()) {
			page.setOrderBy("sysOrderId");
			page.setOrder(Page.DESC);
		}

		if(contractChangeQuery == null) {
			contractChangeQuery = new ContractChangeQuery();
		}
		
		try {
			page = contractChangeService.findPage(page, contractChangeQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	public String listToJson() throws Exception {
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	@Override
	public String input() throws Exception {
		//获取该订单
		contractChange = contractChangeService.getById(id);
		Struts2Utils.renderJson(contractChange);
		return null;
	}
	
	@Override
	public String save() throws Exception {
		try {
			String method = getRequest().getMethod();  
			if (!"post".equalsIgnoreCase(method)) {  
				logger.error("非法提交");
				Struts2Utils.renderJson("非法提交！");
				return null;
			}
			if(null!=contractChange.getContractChangeId()){
				contractChangeService.update(contractChange);
			}else {
				contractChangeService.save(contractChange);
			}
			/*Struts2Utils.renderJson(SUCCESS);*/
			resultInfo[0]="0";
			resultInfo[1]="保存成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			resultInfo[0]="1";
			resultInfo[1]=e.getMessage();
			/*Struts2Utils.renderJson(e.getMessage());*/
		} catch (Exception e) {
			e.printStackTrace();
			resultInfo[0]="1";
			resultInfo[1]=e.getMessage();
			/*Struts2Utils.renderJson("保存管理员信息失败！");*/
		}
		return JSON;
	}
	public String examineContractChange(){
		try {
			String method = getRequest().getMethod();  
			if (!"post".equalsIgnoreCase(method)) {  
				logger.error("非法提交");
				Struts2Utils.renderJson("非法提交！");
				return null;
			} 
			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			contractChange.setExamineTime(format.format(new Date()));
			contractChangeService.update(contractChange);
			Struts2Utils.renderJson(SUCCESS);
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			Struts2Utils.renderJson(e.getMessage());
		} catch (Exception e) {
			logger.error(e.getMessage());
			Struts2Utils.renderJson("审核失败！");
		}
		return null;
	}
	@Override
	public String saveToJson() throws Exception {
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}
	@Override
	public String delete() throws Exception {
		String method = getRequest().getMethod();  
		if (!"post".equalsIgnoreCase(method)) {  
			logger.error("非法提交");
			Struts2Utils.renderJson("非法提交！");
			return null;
		} 
		if(null!=checkedIdList){
			contractChangeService.deleteByMultipleId(checkedIdList);
		}
		Struts2Utils.renderJson("success");
		return null;
	}
	@Override
	public String deleteToJson() throws Exception {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public String show() throws Exception {
		try {
			contractChange = contractChangeService.getById(id);
			resultInfo[0] = "0";
			resultInfo[1] = "1";
		} catch (Exception e) {
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		}
		
		return SHOW;
	}
	@Override
	public String showToJson() throws Exception {
		try {
			show();
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}
	@Override
	protected void prepareModel() throws Exception {
		if (id != null ) {
			contractChange = contractChangeService.getById(id);
		} else {
			contractChange = new ContractChange();
		}
	}
	/**-------------------------------------------------------------------------------------------------------------------*/
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	public ContractChange getContractChange() {
		return contractChange;
	}
	public void setContractChange(ContractChange contractChange) {
		this.contractChange = contractChange;
	}
	public ContractChangeQuery getContractChangeQuery() {
		return contractChangeQuery;
	}
	public void setContractChangeQuery(ContractChangeQuery contractChangeQuery) {
		this.contractChangeQuery = contractChangeQuery;
	}
	public Page<ContractChange> getPage() {
		return page;
	}
	public void setPage(Page<ContractChange> page) {
		this.page = page;
	}
	public List<ContractChange> getContractChangeList() {
		return contractChangeList;
	}
	public void setContractChangeList(List<ContractChange> contractChangeList) {
		this.contractChangeList = contractChangeList;
	}
	public String[] getResultInfo() {
		return resultInfo;
	}
	public void setResultInfo(String[] resultInfo) {
		this.resultInfo = resultInfo;
	}
}
