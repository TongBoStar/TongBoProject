package com.terrence.crm.dol.service;
import java.util.List;

import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.Poorder;
import com.terrence.crm.dol.bean.ProcessExetask;
import com.terrence.crm.dol.query.PoorderQuery;



/**
 * 采购订单服务访问接口
 * 
 * @version 1.0
 */
public interface IPoorderService
{
	public Poorder getById(java.lang.Long id) throws ServiceException;
	
	public void saveOrUpdate(Poorder entity) throws ServiceException;
	
	public java.lang.Long save(Poorder entity) throws ServiceException;
	
	public Integer update(Poorder entity) throws ServiceException;
	
	public Integer deleteById(java.lang.Long id) throws ServiceException;
	
	public Integer deleteByMultipleId(List<java.lang.Long> idList) throws ServiceException;
	
	public boolean isUnique(String uniquePropertyNames, Object newValue, Object oldValue) throws ServiceException;
	
	public Page<Poorder> findPage(Page<Poorder> page, PoorderQuery query) throws ServiceException;
	
	public List<Poorder> findList(PoorderQuery query) throws ServiceException;
	
	public List<Poorder> findList(PoorderQuery query,Integer pageSize) throws ServiceException;
	
	public List<Poorder> findAllList() throws ServiceException;

	public List<Poorder> findcreatPoorder(String statmentname);

	public Poorder findPoorder(PoorderQuery poorderQuery) throws ServiceException;

	public Poorder findtasksPoorder(PoorderQuery poorderQuery) throws ServiceException;

	public void updateUNAudit(List<Long> checkedIdList, Poorder poorder) throws ServiceException;

	public void updateforfclosed(List<Long> checkedIdList, Poorder poorder)  throws ServiceException;

	public void updateforUNfclosed(List<Long> checkedIdList, Poorder poorder) throws ServiceException;


	public List<Poorder> findtongbuerp()  throws ServiceException;
	
	public Integer saveCheckGtask(List<Long> checkedIdList)throws ServiceException;

	public void updatePoorderUNAudit(List<Long> checkedIdList, Poorder poorder) throws ServiceException;

	public Poorder findPoorderRejected(PoorderQuery poorderQuery)  throws ServiceException;

	public void updatePoorderRejected(List<Long> checkedIdList, Poorder entity)  throws ServiceException;

	public void updateK3fibillno(Poorder entity) throws ServiceException;

	public void updateSubmit(List<Long> checkedIdList)  throws ServiceException;

	public void exeProcess(Poorder entity, ProcessExetask processExetask);

}