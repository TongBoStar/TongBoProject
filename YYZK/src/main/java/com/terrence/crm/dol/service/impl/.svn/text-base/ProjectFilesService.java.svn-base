package com.terrence.crm.dol.service.impl;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.dao.DataAccessException;
import org.springframework.transaction.annotation.Transactional;

import com.terrence.crm.dol.base.BaseService;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.ProjectFiles;
import com.terrence.crm.dol.query.ProjectFilesQuery;
import com.terrence.crm.dol.dao.IProjectFilesDao;
import com.terrence.crm.dol.service.IProjectFilesService;
import com.terrence.crm.dol.utils.ConfigTerrence;
import com.terrence.crm.dol.utils.DateUtil;
import com.terrence.crm.dol.utils.PropertiesUtil;
import com.terrence.crm.dol.utils.SpringSecurityUtils;

@Service
@Transactional
public class ProjectFilesService extends BaseService implements IProjectFilesService {
	protected static Logger logger = LoggerFactory.getLogger(ProjectFilesService.class);
	private SimpleDateFormat formt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	@Autowired
	@Qualifier("projectFilesDao")
	private IProjectFilesDao projectFilesDao;
	
	public String getIbatisSqlMapNamespace() {
		return "ProjectFiles";
	}
	@Transactional(readOnly=true)
	public ProjectFiles getById(java.lang.Long id) throws ServiceException
	{
		return projectFilesDao.getById(id);
	}
	
	public void saveOrUpdate(ProjectFiles entity) throws ServiceException
	{
		entity.setUploaderid(SpringSecurityUtils.getCurrentUserId());
		entity.setCreateTime(formt.format(new Date()));
		projectFilesDao.saveOrUpdate(entity);
		if(entity.getId()==null){
			Long addid = save(entity);
			operationLogDao.save(ConfigTerrence.MODEL_PROJECTFILE, ConfigTerrence.OPT_ADD, "id为："+addid+"的项目文件添加成功");
		}else{
			operationLogDao.save(ConfigTerrence.MODEL_PROJECTFILE, ConfigTerrence.OPT_ADD, "id为："+entity.getId()+"的项目文件修改成功");
		}
	}
	
	public java.lang.Long save(ProjectFiles entity) throws ServiceException
	{
		Long adId = projectFilesDao.save(entity);
		
		return adId;
	}
	
	public Integer update(ProjectFiles entity) throws ServiceException
	{
		Integer returnValue =  projectFilesDao.update(entity);
		
		return returnValue;
	}
	
	public Integer deleteById(java.lang.Long id) throws ServiceException
	{
		Integer returnValue = projectFilesDao.deleteById(id);		
		return returnValue;
	}
	
	public Integer deleteByMultipleId(List<java.lang.Long> idList) throws ServiceException
	{
		String delIds = StringUtils.join(idList, ",");
		Integer returnValue = projectFilesDao.deleteByMultipleId(delIds);
		
		return returnValue;
	}
	
	public boolean isUnique(String uniquePropertyNames, Object newValue, Object oldValue) throws ServiceException
	{
		ProjectFilesQuery query = new ProjectFilesQuery();
		try {
			return projectFilesDao.isUnique(query, uniquePropertyNames, newValue, oldValue);
		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		}
	}
	@Transactional(readOnly=true)
	public Page<ProjectFiles> findPage(Page<ProjectFiles> page, ProjectFilesQuery query) throws ServiceException
	{
		return projectFilesDao.findPage(page, query);
	}
	@Transactional(readOnly=true)
	public Page<ProjectFiles> findPage(Page<ProjectFiles> page,String statement, ProjectFilesQuery query) throws ServiceException
	{
		return projectFilesDao.findPage(page,statement, query);
	}
	@Transactional(readOnly=true)
	public List<ProjectFiles> findList(ProjectFilesQuery query) throws ServiceException
	{
		return projectFilesDao.findList(query);
	}
	@Transactional(readOnly=true)
	public List<ProjectFiles> findList(ProjectFilesQuery query,Integer pageSize) throws ServiceException
	{
		return projectFilesDao.findList(query,pageSize);
	}
	
	@Transactional(readOnly=true)
	public List<ProjectFiles> findList(ProjectFilesQuery query,String statement,Integer pageSize) throws ServiceException
	{
		return projectFilesDao.findList(query,statement,pageSize);
	}
	@Transactional(readOnly=true)
	public List<ProjectFiles> findAllList() throws ServiceException
	{
		return projectFilesDao.findAllList();
	}
	@Override
	public void downLoadFiles(HttpServletResponse response, String filePath) {
		String path = filePath;
		File file = new File(path);
		if(file.exists()){
			InputStream is = null;
			try {
				is = new BufferedInputStream(new FileInputStream(file));
				byte[] buff = new byte[is.available()];
				is.read(buff);
				is.close();
	            BufferedOutputStream toClient = new BufferedOutputStream(response.getOutputStream());
	            toClient.write(buff);
	            toClient.flush();
	            toClient.close();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}