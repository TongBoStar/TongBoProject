/*
 * 
 */
package com.terrence.crm.dol.action;


import java.util.Calendar;
import java.util.List;

import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.apache.velocity.runtime.parser.node.MathUtils;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;
import org.springframework.security.core.context.SecurityContextHolder;

import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.Admin;
import com.terrence.crm.dol.bean.Area;
import com.terrence.crm.dol.bean.Duty;
import com.terrence.crm.dol.bean.Product;
import com.terrence.crm.dol.bean.Summary;
import com.terrence.crm.dol.bean.SysOrder;
import com.terrence.crm.dol.bean.security.AdminSession;
import com.terrence.crm.dol.query.AdminQuery;
import com.terrence.crm.dol.query.DutyQuery;
import com.terrence.crm.dol.query.ProductQuery;
import com.terrence.crm.dol.query.SummaryQuery;
import com.terrence.crm.dol.query.SysOrderQuery;
import com.terrence.crm.dol.service.IAdminService;
import com.terrence.crm.dol.service.IAreaService;
import com.terrence.crm.dol.service.IDutyService;
import com.terrence.crm.dol.service.ISummaryService;
import com.terrence.crm.dol.service.ISysOrderService;
import com.terrence.crm.dol.utils.ConstantInfo;
import com.terrence.crm.dol.utils.DateUtil;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/summary")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "summary." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class SummaryAction extends CrudActionSupport<Summary>  implements ApplicationContextAware{
	
	@Autowired
	@Qualifier("areaService")
	private IAreaService areaService;
	
	@Autowired
	@Qualifier("dutyService")
	private IDutyService dutyService;
	
	@Autowired
	@Qualifier("sysOrderService")
	private ISysOrderService sysOrderService;
	
	@Autowired
	@Qualifier("adminService")
	private IAdminService adminService;
	
	@Autowired
	@Qualifier("summaryService")
	private ISummaryService summaryService;
	
	private List<Area> areaList;
	
	private Summary entity;

	private SummaryQuery summaryQuery;
	
	
	private java.lang.Long summaryId;
	
	/** 分页器 */
	private Page<Summary> page = new Page<Summary>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<Summary> summaryList;

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (summaryId != null ) {
			entity = summaryService.getById(summaryId);
		} else {
			entity = new Summary();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try {
			summaryService.deleteByMultipleId(checkedIdList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}
	
	public String listToQuery()throws Exception
	{
		if(summaryQuery == null) {
			summaryQuery = new SummaryQuery();
		}
		
		try {
			summaryList = summaryService.findList(summaryQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/**
	 * 查询汇总数据信息
	 * @return
	 * @throws Exception
	 */
	public String listSummaryInfo() throws Exception {
		areaList=areaService.findAllList();
		if(null==summaryQuery){
			summaryQuery  =new SummaryQuery();
		}
		summaryList=summaryService.listSummaryInfo(summaryQuery);
		SummaryQuery sQLastCreatedate=new SummaryQuery();
	    sQLastCreatedate.setSortColumns("createdate");
	    List<Summary>  summaryList =summaryService.findLastCreatedate(sQLastCreatedate);
	    if(null!=summaryList){
	    	resultInfo[1] = summaryList.get(0).getCreatedateString();	
	    }
	    //查询最新的汇总时间
	    resultInfo[0] = "0";
		return JSON;
	}
	public String listSummary() throws Exception {
		areaList=areaService.findAllList();
		if(null==summaryQuery){
			summaryQuery  =new SummaryQuery();
		}
	    //0查询出所有的销售
		DutyQuery dutyquery=new DutyQuery();
		dutyquery.setDutykeys("\'"+ConstantInfo.DUTY_XSGCS+"\'"+
				","+"\'"+ConstantInfo.DUTY_XSZLGCS+"\'"+
				","+"\'"+ConstantInfo.DUTY_JXS+"\'"+
				","+"\'"+ConstantInfo.DUTY_QYXSJL+"\'");//职务是销售工程师,销售助理工程师,经销商,区域经理
		
		List<Duty> dutyList = dutyService.findList(dutyquery);//查询出职位
		
		if(null!=dutyList&&0<dutyList.size()){
			StringBuffer sb = new StringBuffer();
			for (Duty duty : dutyList) {
				sb.append("\'" + duty.getDutyid() + "\'").append(",");
			}
			sb = sb.deleteCharAt(sb.length() - 1);
			summaryQuery.setAdminDutyIds( sb.toString() );//要汇总的 销售职务的人员
		}else{
			logger.error("系统中还没有相关销售人员的职务请先指定!");
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败:"+"系统中还没有相关销售人员的职务请先指定!";
			return JSON;
		}
		String yearmonth=summaryQuery.getFyear();
		if(null!=yearmonth&&6==yearmonth.length()){//年月
			summaryQuery.setFyear(yearmonth.substring(0, 4));
		    summaryQuery.setFmonth(yearmonth.substring(5, 6));
		}else if(null!=yearmonth&&4==yearmonth.length()){//年
			summaryQuery.setFyear(yearmonth.substring(0, 4));
		}
		else{
			logger.error("汇总时间格式不正确!");
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败:"+"汇总时间格式不正确!";
			return JSON;
		}
	    summaryList=summaryService.findProductQueryList(summaryQuery );
	    SummaryQuery sQLastCreatedate=new SummaryQuery();
	    sQLastCreatedate.setSortColumns("createdate");
	    List<Summary>  summaryList =summaryService.findLastCreatedate(sQLastCreatedate);
	    if(null!=summaryList){
	    	resultInfo[1] = summaryList.get(0).getCreatedateString();	
	    }
	    //查询最新的汇总时间
	    resultInfo[0] = "0";
		
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("summaryId");
			page.setOrder(Page.DESC);
		}
		if(summaryQuery == null) {
			summaryQuery = new SummaryQuery();
		}
		
		try {
			page = summaryService.findPage(page, summaryQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/**
	 * 汇总数据信息
	 */
	public String summaryInfo() throws Exception {
		try {
			String yearmonth=summaryQuery.getFyear();
			if(null!=yearmonth&&6==yearmonth.length()){//年月
				summaryQuery.setFyear(yearmonth.substring(0, 4));
			    summaryQuery.setFmonth(yearmonth.substring(5, 6));
			}
			else{
				logger.error("汇总时间格式不正确!");
				resultInfo[0] = "-1";
				resultInfo[1] = "操作失败:"+"汇总时间格式不正确!";
				return JSON;
			}
			summaryService.summaryInfo( summaryQuery);
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败"+e.getMessage();
			return JSON;
		} catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败"+e.getMessage();
			return JSON;
		}
		return JSON;
		
	}
	/**
	 * 汇总数据
	 */
	public String summary() throws Exception {
		String yearmonth=summaryQuery.getFyear();
		if(null!=yearmonth&&6==yearmonth.length()){//年月
			summaryQuery.setFyear(yearmonth.substring(0, 4));
		    summaryQuery.setFmonth(yearmonth.substring(5, 6));
		}
		/*else if(null!=yearmonth&&4==yearmonth.length()){//年
			summaryQuery.setFyear(yearmonth.substring(0, 4));
		}*/
		else{
			logger.error("汇总时间格式不正确!");
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败:"+"汇总时间格式不正确!";
			return JSON;
		}
		
		AdminSession adminSession = (AdminSession) SecurityContextHolder
			.getContext().getAuthentication().getPrincipal();
		List<Area>  areaInfoList=areaService.findAllList();
		try {
			//0查询出所有的销售
			DutyQuery dutyquery=new DutyQuery();
			dutyquery.setDutykeys("\'"+ConstantInfo.DUTY_XSGCS+"\'"+
					","+"\'"+ConstantInfo.DUTY_XSZLGCS+"\'"+
					","+"\'"+ConstantInfo.DUTY_JXS+"\'"+
					","+"\'"+ConstantInfo.DUTY_QYXSJL+"\'");//职务是销售工程师,销售助理工程师,经销商,区域经理
			
			List<Duty> dutyList = dutyService.findList(dutyquery);//查询出职位
			
			AdminQuery adminQuery=new AdminQuery();
			if(null!=dutyList&&0<dutyList.size()){
				StringBuffer sb = new StringBuffer();
				for (Duty duty : dutyList) {
					sb.append("\'" + duty.getDutyid() + "\'").append(",");
				}
				sb = sb.deleteCharAt(sb.length() - 1);
				adminQuery.setDutyids(sb.toString());
			}else{
				logger.error("系统中还没有相关销售人员的职务请先指定!");
				resultInfo[0] = "-1";
				resultInfo[1] = "操作失败:"+"系统中还没有相关销售人员的职务请先指定!";
				return JSON;
			}
			List<Admin> adminList = adminService.findList(adminQuery);//查询出要统计的职务的人员
			if(null!=adminList&&0<adminList.size()){
				
			}else{
				logger.error("系统中还没有销售工程师请先指定!");
				resultInfo[0] = "-1";
				resultInfo[1] = "操作失败:"+"系统中还没有销售工程师请先指定!";
				return JSON;
			}
			//1 查询某个销售人员的某个月份的订单
			/**
			 * SELECT sysOrderStatus,*
				  FROM [TerrenceCRM].[dbo].[t_sysorder] 
				  where sysOrderStatus=2 AND businessUserId=23 AND issummary=0
				  and ( contractTime >='2015-05-01 00:00:00.000' 
				  and contractTime <'2015-06-01 00:00:00.000' )
				  ---冯伟强2015,5月份已经生效的系统订单
			 */
			String nowFullYear=summaryQuery.getFyear()+"";//得到年
			String nowFullMonth=summaryQuery.getFmonth()+"";//得到月
			String nextFullMonth=  (Integer.valueOf(summaryQuery.getFmonth())+1)%12  +"";//得到下一月
			
			for (Admin admin : adminList) {//遍历所有的销售人员
				
			SysOrderQuery  sysorderQuery=new SysOrderQuery();
			sysorderQuery.setSysOrderStatus(2);//已生效
			sysorderQuery.setBusinessUserId(admin.getAdminId());//业务员
			sysorderQuery.setIssummary(0);//未汇总
			
			/*Calendar a=Calendar.getInstance();
			String nowFullYear=a.get(Calendar.YEAR)+"";//得到年
			String nowFullMonth=(a.get(Calendar.MONTH)+1)%12+"";//得到月
			String nextFullMonth=(a.get(Calendar.MONTH)+2)%12+"";//得到下一月
            */			
			sysorderQuery.setContractTimeBegin(nowFullYear+"-"+nowFullMonth+"-01 00:00:00.000");
		    /*if("12".equals(a.get(Calendar.MONTH)+"")){
		    	nowFullYear=(a.get(Calendar.YEAR)+1)+"";//得到年
		    }*/
		    if("12".equals(nowFullMonth+"")){
		    	nowFullYear=( ( Integer.valueOf(nowFullYear)+1)   )+"";//得到年
		    	nextFullMonth="1";
		    }
			sysorderQuery.setContractTimeEnd(nowFullYear+"-"+nextFullMonth+"-01 00:00:00.000");
			
			List<SysOrder> sysOrderList=sysOrderService.findListQuery(sysorderQuery );//查询某个销售人员的某个月份的订单,包含省份
			
			/*//系统订单是基础业务的
			SysOrderQuery  baseBusinessSysOrderQuery=new SysOrderQuery();
			baseBusinessSysOrderQuery.setSysOrderStatus(2);//已生效
			baseBusinessSysOrderQuery.setBusinessUserId(admin.getAdminId());//业务员
			baseBusinessSysOrderQuery.setIssummary(0);//未汇总
			baseBusinessSysOrderQuery.setBussinessType("1");
			
			baseBusinessSysOrderQuery.setContractTimeBegin(nowFullYear+"-"+nowFullMonth+"-01 00:00:00.000");
			baseBusinessSysOrderQuery.setContractTimeBegin(nowFullYear+"-"+nextFullMonth+"-01 00:00:00.000");
			List<SysOrder> baseBusinessSysOrderList=sysOrderService.findListQuery(baseBusinessSysOrderQuery );*/
			
			//2在产品表中按照销售人员的某个月份的订单中的产品
			/**
			 * SELECT  *
				  FROM [TerrenceCRM].[dbo].[t_product]  
				  WHERE 
				  t_product.orderCode IN ('2015-0194-ddgly', '2015-0066-ddgly','2015-0064-ddgly')
				  ---冯伟强2015,5月份已经生效的系统订单中的产品
			 */
			
			ProductQuery  productQuery=new ProductQuery();
			
			if(null!=sysOrderList&&0<sysOrderList.size()){
				StringBuffer sb = new StringBuffer();
				for (SysOrder sysOrder : sysOrderList) {
					//sb.append("\'" + sysOrder.getOrderCode() + "\'").append(",");
					
					productQuery.setOrderCodes("\'"+sysOrder.getOrderCode()+"\'" );
					List<Product> productList=sysOrderService.findProductQueryList(productQuery );
					//3从结果集中统计出 产品  A B C D E 类的总合计,服务费总计,系统订单类型是基础项目的合计,系统订单类型是大项目的合计
					Number classAtotal=0;
					Number classBtotal=0;
					Number classCtotal=0;
					Number classDtotal=0;
					Number classEtotal=0;
					Number servicechargeTotal=0;//服务费总计
					Number bigProjectBusinessTotal=0;//2大项目业务类型
					
					Number baseBusinessTotal=0;//1基础业务总计
						
					if(null!=productList&&0<productList.size()){
						for (Product product : productList) {
							if("A".equals(product.getProductType())){
								classAtotal = getTypeTotal(classAtotal, product);
							}
							if("B".equals(product.getProductType())){
								classBtotal = getTypeTotal(classBtotal, product);
								
							}
							if("C".equals(product.getProductType())){
								classCtotal = getTypeTotal(classCtotal, product);
							}
							if("D".equals(product.getProductType())){
								classDtotal = getTypeTotal(classDtotal, product);
							}
							if("E".equals(product.getProductType())){
								classEtotal = getTypeTotal(classEtotal, product);
							}
							//服务费
							Double servicecharge=product.getServicecharge();
							
							Double addResult = MathUtils.add(servicechargeTotal,
									servicecharge).doubleValue();//计算所有相加
							servicechargeTotal= addResult;
							//2大项目业务类型
							if("2".equals(sysOrder.getBussinessType())){// 1基础项目业务类型 ,2大项目业务类型
								Float productCount=product.getProductCount();
								Double unitPrice=product.getUnitPrice();
								
								Double multiResult = MathUtils.multiply(unitPrice,
										productCount).doubleValue();//符合要求的单价乘以数量
								Double addResultBigProjectBusinessTotal = MathUtils.add(bigProjectBusinessTotal,
										multiResult).doubleValue();//计算所有相加
								bigProjectBusinessTotal= addResultBigProjectBusinessTotal;
							}
							//1大项目业务类型
							if("1".equals(sysOrder.getBussinessType())){// 1基础项目业务类型 ,2大项目业务类型
								Float productCount=product.getProductCount();
								Double unitPrice=product.getUnitPrice();
								
								Double multiResult = MathUtils.multiply(unitPrice,
										productCount).doubleValue();//符合要求的单价乘以数量
								Double addResultBaseBusinessTotal = MathUtils.add(baseBusinessTotal,
										multiResult).doubleValue();//计算所有相加
								baseBusinessTotal= addResultBaseBusinessTotal;
							}
							//5往汇总表里面插入数据
							/**
							 * insert into t_summary ...
							 */
							Summary entitySummary=new Summary();
							entitySummary.setFyear(nowFullYear+"");
							entitySummary.setFmonth(nowFullMonth+"");
							
							//entitySummary.setAreaname(admin.getEmparea());//所属区域名
							if(null!=areaInfoList&&null!=admin.getAreaid()){
							for (Area area : areaInfoList) {
								if((area.getAreaid()+"").equals(admin.getAreaid()+"")){
									entitySummary.setAreaname(area.getAreaname());//所属区域名
									break;
								}
							}
							}
							entitySummary.setAreaid(admin.getAreaid()); 
							
							entitySummary.setProvincename(sysOrder.getProvince());
							entitySummary.setProvinceid(sysOrder.getProvinceId());
							
							entitySummary.setSalesrep(admin.getAdminId());
							
							entitySummary.setClassa(classAtotal.doubleValue());
							entitySummary.setClassb(classBtotal.doubleValue());
							entitySummary.setClassc(classCtotal.doubleValue());
							entitySummary.setClassd(classDtotal.doubleValue());
							entitySummary.setClasse(classEtotal.doubleValue());
							
							entitySummary.setFee(servicechargeTotal.doubleValue());
							entitySummary.setBitem(baseBusinessTotal.doubleValue());
							entitySummary.setBigitem(bigProjectBusinessTotal.doubleValue());
							
							entitySummary.setCreatedate(
									DateUtil.GetDate2(
											DateUtil.GetDateTime(), "yyyy-MM-dd HH:mm:ss"));
							
							entitySummary.setAdminid(adminSession.getAdmin().getAdminId());
							
							summaryService.saveOrUpdate(entitySummary);
							
							//6更新统计的系统订单编辑为已经做过统计
							/**
							 * update t_sysorder issummary=1  where orderCode IN ('2015-0194-ddgly', '2015-0066-ddgly','2015-0064-ddgly')
							 */
							
							SysOrder  sysOrderEntity=new SysOrder();
							sysOrderEntity.setSysOrderId(sysOrder.getSysOrderId());
							sysOrderEntity.setIssummary(1);
							
							sysOrderService.updateSysOrder(sysOrderEntity);
							
							/*//系统订单总的费用
							Float productCount=product.getProductCount();
							Double unitPrice=product.getUnitPrice();
							
							Double multiResult = MathUtils.multiply(unitPrice,
									productCount).doubleValue();//符合要求的单价乘以数量
							Double addResultSysOrderTotal = MathUtils.add(sysOrderTotal,
									multiResult).doubleValue();//计算所有相加
							sysOrderTotal= addResultSysOrderTotal;*/
						}
					}else{
						continue;
					}
				}
				//sb = sb.deleteCharAt(sb.length() - 1);
				
				
			}else{
				//continue;
			}
			//
			
			/*//基础业务类型
			ProductQuery  baseBusinessProductQuery=new ProductQuery();
			
			if(null!=baseBusinessSysOrderList&&0<baseBusinessSysOrderList.size()){
				StringBuffer sb = new StringBuffer();
				for (SysOrder sysOrder : baseBusinessSysOrderList) {
					sb.append("\'" + sysOrder.getOrderCode() + "\'").append(",");
				}
				sb = sb.deleteCharAt(sb.length() - 1);
				baseBusinessProductQuery.setOrderCodes(sb.toString());
				
			}else{
				//continue;
			}*/
			/*Number baseBusinessTotal=0;//基础业务总计
			List<Product> baseBusinessProductList=sysOrderService.findProductQueryList(baseBusinessProductQuery );
			if(null!=baseBusinessProductList&&0<baseBusinessProductList.size()){
				for (Product product : baseBusinessProductList) {
					//系统订单总的费用
					Float productCount=product.getProductCount();
					Double unitPrice=product.getUnitPrice();
					Double multiResult = MathUtils.multiply(unitPrice,
							productCount).doubleValue();//符合要求的单价乘以数量
					Double addResultBaseBusinessTotal = MathUtils.add(baseBusinessTotal,
							multiResult).doubleValue();//计算所有相加
					baseBusinessTotal= addResultBaseBusinessTotal;
				}
			}
			
			Number sysOrderTotal=0;//系统订单费用总计
*/			
			
			
//			Number bigProjectBusinessTotal=MathUtils.subtract(sysOrderTotal, baseBusinessTotal);//大项目业务总计
			//5往汇总表里面插入数据
			/**
			 * insert into t_summary ...
			 */
			/*Summary entitySummary=new Summary();
			entitySummary.setFyear(a.get(Calendar.YEAR)+"");
			entitySummary.setFmonth(a.get(Calendar.MONTH)%12+"");
			entitySummary.setAreaname(admin.getAreaname());
			
			entitySummary.setProvincename(admin.getProvincename());
			entitySummary.setSalesrep(admin.getAdminId());*/
			
			
			//6更新统计的系统订单编辑为已经做过统计
			/**
			 * update t_sysorder issummary=1  where orderCode IN ('2015-0194-ddgly', '2015-0066-ddgly','2015-0064-ddgly')
			 */
			
			}
			
			
			//summaryService.saveOrUpdate(entity);
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败:"+e.getMessage();
			return JSON;
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败:"+e.getMessage();
			return JSON;
		}
		return JSON;
	}

	private Number getTypeTotal(Number classAtotal, Product product) {
		Float productCount=product.getProductCount();
		Double unitPrice=product.getUnitPrice();
		
		Double multiResult = MathUtils.multiply(unitPrice,
				productCount).doubleValue();//符合要求的单价乘以数量
		Double addResult = MathUtils.add(classAtotal,
				multiResult).doubleValue();//计算所有相加
		classAtotal= addResult;
		return classAtotal;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			summaryService.saveOrUpdate(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = summaryService.getById(summaryId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {
		
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}

	
	// -------------------自定义方法

	
	
	public String listAll() throws Exception {
		try{
			summaryList = summaryService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	// -------------------自定义方法
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public Summary getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public SummaryQuery getSummaryQuery() {
		return summaryQuery;
	}

	
	public void setSummaryQuery(SummaryQuery summaryQuery) {
		this.summaryQuery = summaryQuery;
	}

	public void setSummaryId(java.lang.Long summaryId) {
		this.summaryId = summaryId;
	}
	
	
	public java.lang.Long getSummaryId() {
		return this.summaryId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<Summary> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<Summary> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<Summary> getSummaryList() {
		return summaryList;
	}

	public List<Area> getAreaList() {
		return areaList;
	}

	public void setAreaList(List<Area> areaList) {
		this.areaList = areaList;
	}
	
	
}
