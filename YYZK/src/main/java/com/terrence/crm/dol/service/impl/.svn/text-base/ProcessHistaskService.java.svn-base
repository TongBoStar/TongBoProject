package com.terrence.crm.dol.service.impl;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.apache.commons.lang.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.ProcessHistask;
import com.terrence.crm.dol.dao.IProcessHistaskDao;
import com.terrence.crm.dol.query.ProcessHistaskQuery;
import com.terrence.crm.dol.service.IProcessHistaskService;
@Service
@Transactional
public class ProcessHistaskService implements IProcessHistaskService {
	@Autowired
	@Qualifier("processHistaskDao")
	private IProcessHistaskDao processHistaskDao;
	@Override
	public ProcessHistask getById(Long id) throws ServiceException {
		return processHistaskDao.getById(id);
	}
	@Override
	public void saveOrUpdate(ProcessHistask entity) throws ServiceException {
		processHistaskDao.saveOrUpdate(entity);
	}
	@Override
	public Long save(ProcessHistask entity) throws ServiceException {
		return processHistaskDao.save(entity);
	}
	@Override
	public Integer update(ProcessHistask entity) throws ServiceException {
		return processHistaskDao.update(entity);
	}
	@Override
	public Integer deleteById(Long id) throws ServiceException {
		return processHistaskDao.deleteById(id);
	}
	@Override
	public Integer deleteByMultipleId(List<Long> idList) throws ServiceException {
		String delIds = StringUtils.join(idList, ",");
		Integer returnValue = processHistaskDao.deleteByMultipleId(delIds);
		return returnValue;
	}
	@Transactional(readOnly=true)
	public Page<ProcessHistask> findPage(Page<ProcessHistask> page, ProcessHistaskQuery query) throws ServiceException{
		return processHistaskDao.findPage(page, query);
	}
	@Transactional(readOnly=true)
	public Page<ProcessHistask> findPage(Page<ProcessHistask> page,String statement, ProcessHistaskQuery query) throws ServiceException{
		return processHistaskDao.findPage(page,statement, query);
	}
	@Transactional(readOnly=true)
	public List<ProcessHistask> findList(ProcessHistaskQuery query) throws ServiceException{
		return processHistaskDao.findList(query);
	}
	@Transactional(readOnly=true)
	public List<ProcessHistask> findList(ProcessHistaskQuery query,Integer pageSize) throws ServiceException{
		return processHistaskDao.findList(query,pageSize);
	}
	@Transactional(readOnly=true)
	public List<ProcessHistask> findList(ProcessHistaskQuery query,String statement,Integer pageSize) throws ServiceException{
		return processHistaskDao.findList(query,statement,pageSize);
	}
	@Transactional(readOnly=true)
	public List<ProcessHistask> findAllList() throws ServiceException{
		return processHistaskDao.findAllList();
	}
}
