package com.terrence.crm.dol.service.impl;

import java.lang.reflect.InvocationTargetException;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.dao.DataAccessException;
import org.springframework.transaction.annotation.Transactional;

import com.terrence.crm.dol.base.BaseService;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.Device;
import com.terrence.crm.dol.dao.IDeviceDao;
import com.terrence.crm.dol.query.DeviceQuery;
import com.terrence.crm.dol.service.IDeviceService;

@Service
@Transactional
public class DeviceService extends BaseService implements IDeviceService {
	protected static Logger logger = LoggerFactory.getLogger(DeviceService.class);
	@Autowired
	@Qualifier("deviceDao")
	private IDeviceDao deviceDao;
	
	public String getIbatisSqlMapNamespace() {
		return "Device";
	}
	@Transactional(readOnly=true)
	public Device getById(java.lang.Long id) throws ServiceException
	{
		return deviceDao.getById(id);
	}
	
	public void saveOrUpdate(Device entity) throws ServiceException
	{
		deviceDao.saveOrUpdate(entity);
	}
	
	public java.lang.Long save(Device entity) throws ServiceException
	{
		Long adId = deviceDao.save(entity);
		
		return adId;
	}
	
	public Integer update(Device entity) throws ServiceException
	{
		Integer returnValue =  deviceDao.update(entity);
		
		return returnValue;
	}
	
	public Integer deleteById(java.lang.Long id) throws ServiceException
	{
		Integer returnValue = deviceDao.deleteById(id);		
		return returnValue;
	}
	
	public Integer deleteByMultipleId(List<java.lang.Long> idList) throws ServiceException
	{
		String delIds = StringUtils.join(idList, ",");
		Integer returnValue = deviceDao.deleteByMultipleId(delIds);
		
		return returnValue;
	}
	
	public boolean isUnique(String uniquePropertyNames, Object newValue, Object oldValue) throws ServiceException
	{
		DeviceQuery query = new DeviceQuery();
		try {
			return deviceDao.isUnique(query, uniquePropertyNames, newValue, oldValue);
		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		}
	}
	@Transactional(readOnly=true)
	public Page<Device> findPage(Page<Device> page, DeviceQuery query) throws ServiceException
	{
		return deviceDao.findPage(page, query);
	}
	@Transactional(readOnly=true)
	public List<Device> findList(DeviceQuery query) throws ServiceException
	{
		return deviceDao.findList(query);
	}
	@Transactional(readOnly=true)
	public List<Device> findAllList() throws ServiceException
	{
		return deviceDao.findAllList();
	}
	@Override
	public Device getByItemProcessId(Long itemprocessid) throws ServiceException {
		
		return deviceDao.getByItemProcessId(itemprocessid);
	}
	@Override
	public List<Device> findListIncludeTime(DeviceQuery deviceQuery) {

		return deviceDao.findListIncludeTime(deviceQuery);
		
	}
	@Override
	public List<Device> findDeviceList(DeviceQuery deviceQuery)
			throws ServiceException {
		return deviceDao.findDeviceList(deviceQuery);
	}
	@Override
	public Page<Device> findPage(Page<Device> page, String string,
			DeviceQuery deviceQuery) throws ServiceException {
		return  deviceDao.findPage(page,string, deviceQuery);
	}
	@Override
	public Device findEntityById(DeviceQuery deviceQuery)
			throws ServiceException {
		return deviceDao.findEntityById(deviceQuery);
	}
	@Override
	public void saveUpdateBook(Device entity) throws ServiceException {
		if(entity.getDeviceid()==null){
			deviceDao.save(entity, "Device.insert.into.new.entity");
		}else{
			deviceDao.update(entity);
		}
	}
	@Override
	public List<Device> findNewmonitor(DeviceQuery deviceQuery)
			throws ServiceException {

		return deviceDao.findList("Device.findNewmonitor", deviceQuery);
		
	}
	
}