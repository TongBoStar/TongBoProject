/*
 * 
 */
package com.terrence.crm.dol.action;

import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import java.util.List;
import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.base.utils.Struts2Utils;
import com.terrence.crm.dol.service.ICheckSelectedFieldService;
import com.terrence.crm.dol.bean.CheckSelectedField;
import com.terrence.crm.dol.query.CheckSelectedFieldQuery;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/checkselectedField")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "checkselectedField."
		+ CrudActionSupport.ACTIONSUFFIX
		+ "?page.pageRequest=${page.pageRequest}", type = "redirect") })
public class CheckselectedFieldAction extends CrudActionSupport<CheckSelectedField> implements
		ApplicationContextAware {

	@Autowired
	@Qualifier("checkSelectedFieldService")
	private ICheckSelectedFieldService checkSelectedFieldService;
	
	private CheckSelectedField entity;

	private CheckSelectedFieldQuery checkSelectedFieldQuery;

	private java.lang.Long checkSelectedFieldId;

	/** 分页器 */
	private Page<CheckSelectedField> page = new Page<CheckSelectedField>();

	/** Json操作信息 */
	private String[] resultInfo = new String[3];

	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;

	private ApplicationContext ctx;

	private List<CheckSelectedField> checkSelectedFieldList;
	private String params;
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (checkSelectedFieldId != null) {
			entity = checkSelectedFieldService.getById(checkSelectedFieldId);
		} else {
			entity = new CheckSelectedField();
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {

		try {
			checkSelectedFieldService.deleteById(checkSelectedFieldId);

			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";

			addActionMessage("删除成功");
		} catch (ServiceException e) {
			logger.error(e.getMessage());

			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());

			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";

			addActionMessage("删除失败");
		}
		return RELOAD;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {

		try {
			delete();

		} catch (Exception e) {
			logger.error(e.getMessage());

			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}

	public String listToQuery() throws Exception {
		if (checkSelectedFieldQuery == null) {
			checkSelectedFieldQuery = new CheckSelectedFieldQuery();
		}

		try {
			checkSelectedFieldList = checkSelectedFieldService.findList(checkSelectedFieldQuery);

			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (ServiceException e) {
			logger.error(e.getMessage());

			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());

			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("fid");
			page.setOrder(Page.DESC);
		}
		if (checkSelectedFieldQuery == null) {
			checkSelectedFieldQuery = new CheckSelectedFieldQuery();
		}

		try {
			page = checkSelectedFieldService.findPage(page, checkSelectedFieldQuery);

			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (ServiceException e) {
			logger.error(e.getMessage());

			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());

			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
    /**
     * 查询用户的标签信息
     * @return
     * @throws Exception
     */
	public String listQuery() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("cfid");
			page.setOrder(Page.DESC);
		}
		if (checkSelectedFieldQuery == null) {
			checkSelectedFieldQuery = new CheckSelectedFieldQuery();
		}

		try {
			
			checkSelectedFieldList = checkSelectedFieldService.findList(checkSelectedFieldQuery);
			
			//page = CheckFieldService.findPage(page, CheckFieldQuery);
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (ServiceException e) {
			logger.error(e.getMessage());

			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());

			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	public String listSelectedField(){
		List<String> list = checkSelectedFieldService.findListBymkey("CheckSelectedField.findListBymfkey", checkSelectedFieldQuery);
		Struts2Utils.renderJson(list);
		return JSON;
	}
	public String listToJson() throws Exception {

		try {
			list();
		} catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	public String listToJsonQuery() throws Exception {

		try {
			listQuery();
		} catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {

		try {
			checkSelectedFieldService.saveOrUpdate(entity,params);

			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";

			addActionMessage("操作成功");
		} catch (ServiceException e) {
			logger.error(e.getMessage());

			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());

			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败," + e.getMessage();

			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {

		try {
			save();

		} catch (Exception e) {
			logger.error(e.getMessage());

			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {

		try {
			entity = checkSelectedFieldService.getById(checkSelectedFieldId);

			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch (ServiceException e) {
			logger.error(e.getMessage());

			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());

			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	public void prepareUpdateToJson() throws Exception {
		prepareModel();
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String updateToJson() throws Exception {
		try {
			checkSelectedFieldService.update(entity);
			resultInfo[0] = "0";
			resultInfo[1] = "更新成功!";
		} catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "更新失败!";
		}
		return JSON;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {

		try {
			show();
		} catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}
	// -------------------自定义方法

	public String listAll() throws Exception {
		try {
			checkSelectedFieldList = checkSelectedFieldService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch (ServiceException e) {
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}

		return JSON;
	}

	// -------------------自定义方法
	/*
	 * (non-Javadoc)
	 * 
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public CheckSelectedField getModel() {
		return entity;
	}
	/**
	 * 获得分页器
	 * 
	 * @return the page
	 */
	public Page<CheckSelectedField> getPage() {
		return page;
	}

	public CheckSelectedField getEntity() {
		return entity;
	}

	public void setEntity(CheckSelectedField entity) {
		this.entity = entity;
	}

	public CheckSelectedFieldQuery getCheckSelectedFieldQuery() {
		return checkSelectedFieldQuery;
	}

	public void setCheckSelectedFieldQuery(CheckSelectedFieldQuery checkSelectedFieldQuery) {
		this.checkSelectedFieldQuery = checkSelectedFieldQuery;
	}

	public java.lang.Long getCheckSelectedFieldId() {
		return checkSelectedFieldId;
	}

	public void setCheckSelectedFieldId(java.lang.Long checkSelectedFieldId) {
		this.checkSelectedFieldId = checkSelectedFieldId;
	}

	public void setResultInfo(String[] resultInfo) {
		this.resultInfo = resultInfo;
	}

	/**
	 * 设置分页器
	 * 
	 * @param page
	 *            the new page
	 */
	public void setPage(Page<CheckSelectedField> page) {
		this.page = page;
	}

	/**
	 * 获得Json操作信息
	 * 
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 * 
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 * 
	 * @param checkedIdList
	 *            编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}

	public void setApplicationContext(ApplicationContext ctx)
			throws BeansException {
		this.ctx = ctx;
	}

	public List<CheckSelectedField> getCheckSelectedFieldList() {
		return checkSelectedFieldList;
	}

	public String getParams() {
		return params;
	}

	public void setParams(String params) {
		this.params = params;
	}

}
