package com.terrence.crm.dol.service.impl;

import java.lang.reflect.InvocationTargetException;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.dao.DataAccessException;
import org.springframework.transaction.annotation.Transactional;

import com.terrence.crm.dol.base.BaseService;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.TplTrailGlobal;
import com.terrence.crm.dol.query.TplTrailGlobalQuery;
import com.terrence.crm.dol.dao.ITplTrailGlobalDao;
import com.terrence.crm.dol.service.ITplTrailGlobalService;

@Service
@Transactional
public class TplTrailGlobalService extends BaseService implements ITplTrailGlobalService {
	protected static Logger logger = LoggerFactory.getLogger(TplTrailGlobalService.class);
	@Autowired
	@Qualifier("tplTrailGlobalDao")
	private ITplTrailGlobalDao tplTrailGlobalDao;
	
	public String getIbatisSqlMapNamespace() {
		return "TplTrailGlobal";
	}
	@Transactional(readOnly=true)
	public TplTrailGlobal getById(java.lang.Long id) throws ServiceException
	{
		return tplTrailGlobalDao.getById(id);
	}
	
	public void saveOrUpdate(TplTrailGlobal entity) throws ServiceException
	{
		TplTrailGlobalQuery tplTrailGlobalQuery = new TplTrailGlobalQuery();
		tplTrailGlobalQuery.setColid(entity.getColid());
		tplTrailGlobalQuery.setTplid(entity.getTplid());
		tplTrailGlobalQuery.setTrialid(entity.getTrialid());
		TplTrailGlobal tplTrailGlobal = tplTrailGlobalDao.getByEntity("TplTrailGlobal.Entity", tplTrailGlobalQuery);
		if(tplTrailGlobal!=null){
			throw new ServiceException("此字段已经绑定此模板此设备！", "-1");
		}
		tplTrailGlobalDao.saveOrUpdate(entity);
	}
	
	public java.lang.Long save(TplTrailGlobal entity) throws ServiceException
	{
		Long adId = tplTrailGlobalDao.save(entity);
		
		return adId;
	}
	
	public Integer update(TplTrailGlobal entity) throws ServiceException
	{
		Integer returnValue =  tplTrailGlobalDao.update(entity);
		
		return returnValue;
	}
	
	public Integer deleteById(java.lang.Long id) throws ServiceException
	{
		Integer returnValue = tplTrailGlobalDao.deleteById(id);		
		return returnValue;
	}
	
	public Integer deleteByMultipleId(List<java.lang.Long> idList) throws ServiceException
	{
		String delIds = StringUtils.join(idList, ",");
		Integer returnValue = tplTrailGlobalDao.deleteByMultipleId(delIds);
		
		return returnValue;
	}
	
	public boolean isUnique(String uniquePropertyNames, Object newValue, Object oldValue) throws ServiceException
	{
		TplTrailGlobalQuery query = new TplTrailGlobalQuery();
		try {
			return tplTrailGlobalDao.isUnique(query, uniquePropertyNames, newValue, oldValue);
		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		}
	}
	@Transactional(readOnly=true)
	public Page<TplTrailGlobal> findPage(Page<TplTrailGlobal> page, TplTrailGlobalQuery query) throws ServiceException
	{
		return tplTrailGlobalDao.findPage(page, query);
	}
	@Transactional(readOnly=true)
	public Page<TplTrailGlobal> findPage(Page<TplTrailGlobal> page,String statement, TplTrailGlobalQuery query) throws ServiceException
	{
		return tplTrailGlobalDao.findPage(page,statement, query);
	}
	@Transactional(readOnly=true)
	public List<TplTrailGlobal> findList(TplTrailGlobalQuery query) throws ServiceException
	{
		return tplTrailGlobalDao.findList(query);
	}
	@Transactional(readOnly=true)
	public List<TplTrailGlobal> findList(TplTrailGlobalQuery query,Integer pageSize) throws ServiceException
	{
		return tplTrailGlobalDao.findList(query,pageSize);
	}
	
	@Transactional(readOnly=true)
	public List<TplTrailGlobal> findList(TplTrailGlobalQuery query,String statement,Integer pageSize) throws ServiceException
	{
		return tplTrailGlobalDao.findList(query,statement,pageSize);
	}
	@Transactional(readOnly=true)
	public List<TplTrailGlobal> findAllList() throws ServiceException
	{
		return tplTrailGlobalDao.findAllList();
	}

}