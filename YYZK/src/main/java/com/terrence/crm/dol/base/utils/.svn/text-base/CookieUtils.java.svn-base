/**
 * 
 */
package com.terrence.crm.dol.base.utils;

import java.io.IOException;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.math.NumberUtils;
import org.codehaus.jackson.map.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.terrence.crm.dol.bean.User;
import com.terrence.crm.dol.utils.StringCodeUtils;

/**
 * @author thinkpad
 *
 */
public class CookieUtils {
	protected static Logger logger = LoggerFactory.getLogger(CookieUtils.class);
	/**
	 * 用户的cookie的key 
	 */
	public static String COOKIE_NAME_U = "COOKIE_NAME_U";
	/**
	 * 校验码cookie的key 
	 */
	public static String COOKIE_NAME_C = "COOKIE_NAME_C";
	/**
	 * 购物车
	 */
	public static String COOKIE_NAME_CART = "COOKIE_NAME_CART";
	
	private static String COOKIE_VALUE_SPLIT = "|";
	
	private static  int expiry = 60*60*24;
	
	private static ObjectMapper mapper = new ObjectMapper();
	
	public static void writeUserCookie(HttpServletResponse response,User user){
		StringBuffer value = new StringBuffer();
		value.append(BaseCodeUtils.SYSTEM_ID);
		value.append(COOKIE_VALUE_SPLIT);
		value.append(user.getUserId());
		value.append(COOKIE_VALUE_SPLIT);
		value.append(user.getUserName());
		value.append(COOKIE_VALUE_SPLIT);
		value.append(System.currentTimeMillis());
		Cookie cookie = new Cookie(COOKIE_NAME_U,StringCodeUtils.encode(value.toString()));
		//cookie.setMaxAge(expiry);
		cookie.setPath("/");
		response.addCookie(cookie);
	}
	
	public static User readUserCookie(HttpServletRequest request){
		User user = null;
		Cookie[] cookies = request.getCookies();
		
		if(cookies!=null){
			for(int i=0;i<cookies.length;i++){
				String name = cookies[i].getName();
				String value = cookies[i].getValue();
				if(name!=null&&name.trim().equals(COOKIE_NAME_U)&&value!=null&&!value.trim().equals("")){
					value = StringCodeUtils.decode(value);
					String[] str = value.split("\\|");
					if(str!=null&&str.length==4){
						Long userId = NumberUtils.toLong(str[1]);
						String userName = str[2];
						user = new User();
						user.setUserId(userId);
						user.setUserName(userName);
					}
					break;
				}
			}
		}
		return user;
		
	}
	
	/**
	 * 清除用户cookie
	 * @param request
	 * @param response
	 * @throws IOException
	 */
	public static void clearUserCookies(HttpServletRequest request,HttpServletResponse response) throws IOException{
		Cookie[] cookies = request.getCookies();
		if(cookies!=null){
			for(int i=0;i<cookies.length;i++){
				if(cookies[i].getName().equals(COOKIE_NAME_U)){
					cookies[i].setValue("");
					cookies[i].setMaxAge(0);
					response.addCookie(cookies[i]);
				}
			}
		}
		
	}
	
	/**
	 * 写校验码到cookie
	 * @param response
	 * @param strRandom
	 */
	public static void writeCheckCodeCookie(HttpServletResponse response,String strRandom){
		StringBuffer value = new StringBuffer();
		value.append(BaseCodeUtils.SYSTEM_ID);
		value.append(COOKIE_VALUE_SPLIT);
		value.append(strRandom);
		value.append(COOKIE_VALUE_SPLIT);
		value.append(System.currentTimeMillis());
		Cookie cookie = new Cookie(COOKIE_NAME_C,StringCodeUtils.encode(value.toString()));
		//cookie.setMaxAge(expiry);
		cookie.setPath("/");
		response.addCookie(cookie);
	}
	/**
	 *  从cookie中读校验码
	 * @param request
	 * @return
	 */
	public static String  readCheckCodeCookie(HttpServletRequest request){
		Cookie[] cookies = request.getCookies();
		String checkCode = "";
		if(cookies!=null){
			for(int i=0;i<cookies.length;i++){
				String name = cookies[i].getName();
				String value = cookies[i].getValue();
				if(name!=null&&name.trim().equals(COOKIE_NAME_C)&&value!=null&&!value.trim().equals("")){
					value = StringCodeUtils.decode(value);
					String[] str = value.split("\\|");
					if(str!=null&&str.length==3){
						checkCode = str[1];
					}
					break;
				}
			}
		}
		return checkCode;
	}
	
	/**
	 * 清除cookie中的校验码
	 * @param request
	 * @param response
	 * @throws IOException
	 */
	public static void clearCheckCodeCookies(HttpServletRequest request,HttpServletResponse response) throws IOException{
		Cookie[] cookies = request.getCookies();
		if(cookies!=null){
			for(int i=0;i<cookies.length;i++){
				if(cookies[i].getName().equals(COOKIE_NAME_C)){
					cookies[i].setValue("");
					cookies[i].setMaxAge(0);
					response.addCookie(cookies[i]);
				}
			}
		}
	}
	
	
	
	/**
	 * 清除cookie中的校验码
	 * @param request
	 * @param response
	 * @throws IOException
	 */
	public static void clearCartCookies(HttpServletRequest request,HttpServletResponse response) throws IOException{
		Cookie[] cookies = request.getCookies();
		if(cookies!=null){
			for(int i=0;i<cookies.length;i++){
				if(cookies[i].getName().equals(COOKIE_NAME_CART)){
					cookies[i].setValue("");
					cookies[i].setMaxAge(0);
					response.addCookie(cookies[i]);
				}
			}
		}
	}
	
}
