package com.terrence.crm.dol.service.impl;

import java.lang.reflect.InvocationTargetException;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.dao.DataAccessException;
import org.springframework.transaction.annotation.Transactional;

import com.terrence.crm.dol.base.BaseService;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.Sortcodesec;
import com.terrence.crm.dol.query.SortcodesecQuery;
import com.terrence.crm.dol.dao.ISortcodesecDao;
import com.terrence.crm.dol.service.ISortcodesecService;

@Service
@Transactional
public class SortcodesecService extends BaseService implements ISortcodesecService {
	protected static Logger logger = LoggerFactory.getLogger(SortcodesecService.class);
	@Autowired
	@Qualifier("sortcodesecDao")
	private ISortcodesecDao sortcodesecDao;
	
	public String getIbatisSqlMapNamespace() {
		return "Sortcodesec";
	}
	@Transactional(readOnly=true)
	public Sortcodesec getById(java.lang.Long id) throws ServiceException
	{
		return sortcodesecDao.getById(id);
	}
	
	public void saveOrUpdate(Sortcodesec entity) throws ServiceException
	{
		sortcodesecDao.saveOrUpdate(entity);
	}
	
	public java.lang.Long save(Sortcodesec entity) throws ServiceException
	{
		Long adId = sortcodesecDao.save(entity);
		
		return adId;
	}
	
	public Integer update(Sortcodesec entity) throws ServiceException
	{
		Integer returnValue =  sortcodesecDao.update(entity);
		
		return returnValue;
	}
	
	public Integer deleteById(java.lang.Long id) throws ServiceException
	{
		Integer returnValue = sortcodesecDao.deleteById(id);		
		return returnValue;
	}
	
	public Integer deleteByMultipleId(List<java.lang.Long> idList) throws ServiceException
	{
		String delIds = StringUtils.join(idList, ",");
		Integer returnValue = sortcodesecDao.deleteByMultipleId(delIds);
		
		return returnValue;
	}
	
	public boolean isUnique(String uniquePropertyNames, Object newValue, Object oldValue) throws ServiceException
	{
		SortcodesecQuery query = new SortcodesecQuery();
		try {
			return sortcodesecDao.isUnique(query, uniquePropertyNames, newValue, oldValue);
		} catch (DataAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new ServiceException(e.getMessage());
		}
	}
	@Transactional(readOnly=true)
	public Page<Sortcodesec> findPage(Page<Sortcodesec> page, SortcodesecQuery query) throws ServiceException
	{
		return sortcodesecDao.findPage(page, query);
	}
	@Transactional(readOnly=true)
	public Page<Sortcodesec> findPage(Page<Sortcodesec> page,String statement, SortcodesecQuery query) throws ServiceException
	{
		return sortcodesecDao.findPage(page,statement, query);
	}
	@Transactional(readOnly=true)
	public List<Sortcodesec> findList(SortcodesecQuery query) throws ServiceException
	{
		return sortcodesecDao.findList(query);
	}
	@Transactional(readOnly=true)
	public List<Sortcodesec> findList(SortcodesecQuery query,Integer pageSize) throws ServiceException
	{
		return sortcodesecDao.findList(query,pageSize);
	}
	
	@Transactional(readOnly=true)
	public List<Sortcodesec> findList(SortcodesecQuery query,String statement,Integer pageSize) throws ServiceException
	{
		return sortcodesecDao.findList(query,statement,pageSize);
	}
	@Transactional(readOnly=true)
	public List<Sortcodesec> findAllList() throws ServiceException
	{
		return sortcodesecDao.findAllList();
	}
	@Override
	public Sortcodesec findName(SortcodesecQuery sortcodesecQuery)
			throws ServiceException {
		return sortcodesecDao.findName(sortcodesecQuery);
	}
	
	@Override
	public List<Sortcodesec> findSecInfoList(SortcodesecQuery sortcodesecQuery)
			throws ServiceException {
		return sortcodesecDao.findSecInfoList(sortcodesecQuery);
	}
	
	@Override
	public List<Sortcodesec> findSecList() throws ServiceException {
		return sortcodesecDao.findSecList();
	}
	@Override
	public List<Sortcodesec> findList(SortcodesecQuery query, String statement)
			throws ServiceException {
		return sortcodesecDao.findList(statement, query);
	}
	

	
	@Override
	public List<Sortcodesec> findlistStatus() throws ServiceException {
		return sortcodesecDao.findlistStatus();
	}
	@Override
	public List<Sortcodesec> findlistsupplierlevl() throws ServiceException {
		return sortcodesecDao.findlistsupplierlevl();
	}
	@Override
	public List<Sortcodesec> findlistsuppliergovernment()
			throws ServiceException {
		return sortcodesecDao.findlistsuppliergovernment();
	}
	@Override
	public List<Sortcodesec> findlistsupplierDOC() throws ServiceException {
		return sortcodesecDao.findlistsupplierDOC();
	}
	@Override
	public Sortcodesec findSEC() {
		return sortcodesecDao.findSEC();
	}
}