/*
 * 
 */
package com.terrence.crm.dol.action;


import java.util.ArrayList;
import java.util.List;

import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.Hilt;
import com.terrence.crm.dol.bean.MeasureCategory;
import com.terrence.crm.dol.query.HiltQuery;
import com.terrence.crm.dol.query.MeasureCategoryQuery;
import com.terrence.crm.dol.service.IHiltService;
import com.terrence.crm.dol.utils.CacheService;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/hilt")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "hilt." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class HiltAction extends CrudActionSupport<Hilt>  implements ApplicationContextAware{
	
	private String HILTKEY="hilt";
	@Autowired
	@Qualifier("hiltService")
	private IHiltService hiltService;
	
	
	private Hilt entity;

	private HiltQuery hiltQuery;
	
	
	private java.lang.Long hiltId;
	
	/** 分页器 */
	private Page<Hilt> page = new Page<Hilt>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<Hilt> hiltList;
	private String tree="";

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (hiltId != null ) {
			entity = hiltService.getById(hiltId);
		} else {
			entity = new Hilt();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try 
		{
			if(hiltService.deleteByMultipleId(checkedIdList)==1)
			{
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			updateTreeCache();
			addActionMessage("删除成功");
			}
			else
			{
				resultInfo[0] = "-1";
				resultInfo[1] = "不能删除包含子数据的节点";
			}
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}
	
	public String listToQuery()throws Exception
	{
		if(hiltQuery == null) {
			hiltQuery = new HiltQuery();
		}
		
		try {
			hiltList = hiltService.findList(hiltQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("hiltId");
			page.setOrder(Page.DESC);
		}
		if(hiltQuery == null) {
			hiltQuery = new HiltQuery();
		}
		
		try {
			page = hiltService.findPage(page, hiltQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			//System.out.println("==进入saveOrUpdata方法：==========entity:"+entity.toString());
			if(entity.getParentcode()==null)
			{
				entity.setHiltcode(entity.getShiltcode());
				entity.setParentcode("");
			}
			else
			{ 
				if(entity.getParentcode().equals("ROOT"))
				{
					entity.setHiltcode(entity.getShiltcode());
				}
				else
				{
					entity.setHiltcode(entity.getParentcode()+"."+entity.getShiltcode());
				}
			}
			
				if(check()==0){//检查重复
					hiltService.saveOrUpdate(entity);
					updateTreeCache();
					
					resultInfo[0] = "0";
					resultInfo[1] = "操作成功";
					
					addActionMessage("操作成功");
				}
			
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	public int check(){
		HiltQuery hiltQuery=new HiltQuery();
		hiltQuery.setHiltcode(entity.getHiltcode());
		if(hiltService.findList(hiltQuery).size()>0&&entity.getHiltid()==null){
			resultInfo[0] = "-1";
			resultInfo[1] = "此代码已存在!请重新编写!";
			return -1;
		}else if(hiltService.findList(hiltQuery).size()>0){
			List<Hilt> hlist = hiltService.findList(hiltQuery);
			long check=0;
			for(Hilt h:hlist){
				if(h.getHiltid().longValue()!=entity.getHiltid().longValue()){
					check++;
				}
			}
			if(check>0){
				resultInfo[0] = "-1";
				resultInfo[1] = "此代码已存在!请重新编写!";
				return -1;
			}else{
				return 0;
				}
		}else{
			return 0;
		}
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = hiltService.getById(hiltId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {
		
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}

	
	// -------------------自定义方法

	
	
	public String listAll() throws Exception {
		try{
			hiltList = hiltService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	// -------------------自定义方法
	public String listToTree()throws Exception
	{
		if(hiltQuery == null) {
			hiltQuery = new HiltQuery();
		}
		try
		{
			hiltQuery.setHiltid(1l);
			if(CacheService.getInstance().get(HILTKEY)==null)
			{
				List<Hilt> list=hiltService.findList(hiltQuery);
				//hiltList=new ArrayList<Hilt>();
				for(Hilt hilt:list)
				{
					tree+="<li><a href=\"javascript:;\" onclick=\"sethilt("+hilt.getHiltid()+",'"+hilt.getHiltname()+"','"+hilt.getHiltcode()+"');\">"+hilt.getHiltcode()+"("+hilt.getHiltname()+")</a>"+loop(hilt)+"</li>";
				}
				CacheService.getInstance().add(HILTKEY, tree);
			}else{
				tree=(String)CacheService.getInstance().get(HILTKEY);
			}
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	public String updateTreeCache()throws Exception
	{

		if(hiltQuery == null) {
			hiltQuery = new HiltQuery();
		}
		try
		{
			hiltQuery.setHiltid(1l);
				List<Hilt> list=hiltService.findList(hiltQuery);
				//hiltList=new ArrayList<Hilt>();
				for(Hilt hilt:list)
				{
					tree+="<li><a href=\"javascript:;\" onclick=\"sethilt("+hilt.getHiltid()+",'"+hilt.getHiltname()+"','"+hilt.getHiltcode()+"');\">"+hilt.getHiltcode()+"("+hilt.getHiltname()+")</a>"+loop(hilt)+"</li>";
				}
				CacheService.getInstance().replace(HILTKEY, tree);
			
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	
	}
	public String loop(Hilt hilts)
	{
		HiltQuery hiltQuery=null;
		hiltQuery=new HiltQuery();
		hiltQuery.setParentcode(hilts.getHiltcode());
		List<Hilt> list=hiltService.findList(hiltQuery);
		StringBuffer sbuf=new StringBuffer();
		if(list.size()>0)
		{
			sbuf.append("<ul id=\"ul"+hilts.getHiltid()+"\">");
			for(Hilt hilt:list)
			{
				sbuf.append("<li id=\"li"+hilt.getHiltid()+"\"><a href=\"javascript:sethilt("+hilt.getHiltid()+",'"+hilt.getHiltname()+"','"+hilt.getHiltcode()+"');\" >"+hilt.getHiltcode()+"("+hilt.getHiltname()+")</a>"+loop(hilt)+"</li>");
			}
			sbuf.append("</ul>");
		}
		return sbuf.toString();
	}
	//----------------------
	
	
	
	// -------------------自定义方法
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public Hilt getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public HiltQuery getHiltQuery() {
		return hiltQuery;
	}

	
	public void setHiltQuery(HiltQuery hiltQuery) {
		this.hiltQuery = hiltQuery;
	}

	public void setHiltId(java.lang.Long hiltId) {
		this.hiltId = hiltId;
	}
	
	
	public java.lang.Long getHiltId() {
		return this.hiltId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<Hilt> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<Hilt> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<Hilt> getHiltList() {
		return hiltList;
	}
	public String getTree() {
		return tree;
	}

	public void setTree(String tree) {
		this.tree = tree;
	}
	
	
}
