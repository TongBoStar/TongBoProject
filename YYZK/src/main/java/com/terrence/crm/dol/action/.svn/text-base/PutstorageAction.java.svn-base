/*
 * 
 */
package com.terrence.crm.dol.action;


import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.apache.struts2.components.ActionMessage;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import java.util.List;
import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.ProcessExetask;
import com.terrence.crm.dol.bean.Putstorage;
import com.terrence.crm.dol.query.PutstorageQuery;
import com.terrence.crm.dol.service.IPutstorageService;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/putstorage")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "putstorage." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class PutstorageAction extends CrudActionSupport<Putstorage>  implements ApplicationContextAware{
	
	
	@Autowired
	@Qualifier("putstorageService")
	private IPutstorageService putstorageService;
	
	private ProcessExetask processExetask;
	private Putstorage entity;

	private PutstorageQuery putstorageQuery;
	
	
	private java.lang.Long putstorageId;
	
	/** 分页器 */
	private Page<Putstorage> page = new Page<Putstorage>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	
	private ApplicationContext ctx;
	
	private List<Putstorage> putstorageList;

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (putstorageId != null ) {
			entity = putstorageService.getById(putstorageId);
		} else {
			entity = new Putstorage();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try {
			putstorageService.deleteByMultipleId(checkedIdList);
			
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			
			addActionMessage("删除成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}
	
	public String listToQuery()throws Exception
	{
		if(putstorageQuery == null) {
			putstorageQuery = new PutstorageQuery();
		}
		
		try {
			putstorageList = putstorageService.findList(putstorageQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("putstorageId");
			page.setOrder(Page.DESC);
		}
		if(putstorageQuery == null) {
			putstorageQuery = new PutstorageQuery();
		}
		
		try {
			page = putstorageService.findPage(page, putstorageQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
	
	public String listToJson() throws Exception {
		
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			putstorageService.saveOrUpdate(entity);
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = putstorageService.getById(putstorageId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {
		
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}

	
	// -------------------自定义方法

	
	
	public String listAll() throws Exception {
		try{
			putstorageList = putstorageService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
	
	
	
	
	public void prepareUpdatestatusAll() throws Exception {
		prepareModel();
	}
	@Action("/putstora/updatestatusAll")
	public String updatestatusAll() throws Exception {//审核
			
			try {
				/*if(null==entity){
					entity=new Putstorage();*/
					if(null!=putstorageId){
						entity.setFinterid(putstorageId);
						processExetask.setSourceId(putstorageId);
						putstorageService.updatestatusAll(entity,processExetask);
					}else if(null!=checkedIdList&&checkedIdList.size()>0){
						putstorageService.updatestatusAll(checkedIdList,processExetask);
					}else{
						throw new ServiceException("参数有错误，请联系管理员!");
					}
				/*}*/
				/*Boolean examResult=putstorageService
						.exeProcess(entity,processExetask);*/
				//resultInfo[2] = ""+examResult;
				/*Putstorage pstor = new Putstorage();
					putstorageService.updatestatusAll(checkedIdList,pstor);*/
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功";
			} catch(ServiceException e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = e.getMessage();
			} catch(Exception e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";	
				resultInfo[1] = "操作失败";
			}
			return JSON;
		}
	
	
	public void prepareUpdatestatusUNaudit() throws Exception {
		prepareModel();
	}
	@Action("/putstora/updatestatusUNaudit")
	public String updatestatusUNaudit() throws Exception {//反审核
			
			try {
				putstorageService.updatestatusUNaudit(checkedIdList);
				
				resultInfo[0] = "0";
				resultInfo[1] = "操作成功！";
			} catch(ServiceException e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = e.getMessage();
			} catch(Exception e) {
				logger.error(e.getMessage());
				
				resultInfo[0] = "-1";
				resultInfo[1] = e.getMessage();
			}
			return JSON;
		}	
	
	public void prepareSaveOtherAdd() throws Exception {
		prepareModel();
	}
	@Action("/putstora/saveOtherAdd")
	public String saveOtherAdd() throws Exception {
		
		try {
			putstorageService.saveOtherAdd(entity);

			resultInfo[0] = "0";
			resultInfo[1] = "操作成功!!";
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败!!("+e.getMessage()+")";
		}
		return JSON;
	}
	/**
	 * 启动流程
	 * @return
	 */
	public String exeProcess(){
		 if(null==entity){
			entity=new Putstorage();
			if(null!=putstorageId){
				entity.setFinterid(putstorageId);
			}
		} 
		Boolean examResult=putstorageService
				.exeProcess(entity,processExetask);
		resultInfo[0] = "0";
		resultInfo[1] = "下推成功";
		resultInfo[2] = ""+examResult;
		return JSON;
	}
	
	public void prepareSaveOtherAddp() throws Exception {
		prepareModel();
	}
	@Action("/putstora/saveOtherAddp")
	public String saveOtherAddp() throws Exception {
		
		try {
			putstorageService.saveOtherAddp(entity);

			resultInfo[0] = "0";
			resultInfo[1] = "操作成功!!";
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败!!("+e.getMessage()+")";
		}
		return JSON;
	}
	
	// -------------------自定义方法
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public Putstorage getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public PutstorageQuery getPutstorageQuery() {
		return putstorageQuery;
	}

	
	public void setPutstorageQuery(PutstorageQuery putstorageQuery) {
		this.putstorageQuery = putstorageQuery;
	}

	public void setPutstorageId(java.lang.Long putstorageId) {
		this.putstorageId = putstorageId;
	}
	
	
	public java.lang.Long getPutstorageId() {
		return this.putstorageId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<Putstorage> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<Putstorage> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<Putstorage> getPutstorageList() {
		return putstorageList;
	}

	public ProcessExetask getProcessExetask() {
		return processExetask;
	}

	public void setProcessExetask(ProcessExetask processExetask) {
		this.processExetask = processExetask;
	}

	
	
}
