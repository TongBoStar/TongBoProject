/*
 * 
 */
package com.terrence.crm.dol.action;


import java.util.ArrayList;
import java.util.List;

import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.bean.Tools;
import com.terrence.crm.dol.query.ToolsQuery;
import com.terrence.crm.dol.service.IToolsService;
import com.terrence.crm.dol.utils.CacheService;

/**
 * 
 * 
 * @version 1.0
 */
@Scope("prototype")
@Namespace("/tools")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "tools." + CrudActionSupport.ACTIONSUFFIX + "?page.pageRequest=${page.pageRequest}", type = "redirect")})
public class ToolsAction extends CrudActionSupport<Tools>  implements ApplicationContextAware{
	
	private String TOOLSKEY="tools";
	@Autowired
	@Qualifier("toolsService")
	private IToolsService toolsService;
	
	private Tools entity;

	private ToolsQuery toolsQuery;
	
	private java.lang.Long toolsId;
	
	/** 分页器 */
	private Page<Tools> page = new Page<Tools>();
	
	/** Json操作信息 */
	private String[] resultInfo = new String[2];
	
	/** 所选择的编号列表 */
	private List<java.lang.Long> checkedIdList;
	
	
	private ApplicationContext ctx;
	
	private List<Tools> toolsList;
	private String tree="";
	

	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (toolsId != null ) {
			entity = toolsService.getById(toolsId);
		} else {
			entity = new Tools();
		}
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		
		try 
		{
			if(toolsService.deleteByMultipleId(checkedIdList)==1)
			{
			resultInfo[0] = "0";
			resultInfo[1] = "删除成功";
			updateTreeCache();
			addActionMessage("删除成功");
			}
			else
			{
				resultInfo[0] = "-1";
				resultInfo[1] = "不能删除包含子数据的节点";
			}
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			
			addActionMessage("删除失败");
		}
		return RELOAD;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		
		try {
			delete();
			
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}
	public String listToQuery()throws Exception
	{
		if(toolsQuery == null) {
			toolsQuery = new ToolsQuery();
		}
		try {
			toolsList=toolsService.findList(toolsQuery);
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (Exception e) {
			e.printStackTrace();
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		if (!page.isOrderBySetted()) {
			page.setOrderBy("toolsId");
			page.setOrder(Page.DESC);
		}
		if(toolsQuery == null) {
			toolsQuery = new ToolsQuery();
		}
		
		try {
			page = toolsService.findPage(page, toolsQuery);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}
			
	@Action("/process/listToTools")
	public String listToJson() throws Exception {
		try {
			list();			
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	public String listTable()throws Exception
	{
		if(toolsQuery == null) {
			toolsQuery = new ToolsQuery();
		}
		try
		{
			toolsQuery.setToolsid(1l);
			List<Tools> list=toolsService.findList(toolsQuery);
			toolsList=new ArrayList<Tools>();
			for(Tools tools:list)
			{
				//toolsList.add(tools);
				loopTable(tools);
			}
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	public void loopTable(Tools tool)
	{
		ToolsQuery toolsQuery = new ToolsQuery();
		toolsQuery.setParentid(tool.getToolsid());
		List<Tools> list=toolsService.findList(toolsQuery);
		for(Tools tools:list)
		{
			toolsList.add(tools);
			loopTable(tools);
		}
	}
	public String listToTree()throws Exception
	{
		if(toolsQuery == null) {
			toolsQuery = new ToolsQuery();
		}
		try
		{
			toolsQuery.setToolsid(1l);
			if(CacheService.getInstance().get(TOOLSKEY)==null)
			{
				List<Tools> list=toolsService.findList(toolsQuery);
				toolsList=new ArrayList<Tools>();
				for(Tools tools:list)
				{
					tree+="<li><a href=\"javascript:;\" onclick=\"setcode("+tools.getToolsid()+","+tools.getLevels()+",'"+tools.getLtoolscode()+"','"+tools.getToolsname()+"');\">"+tools.getLtoolscode()+"("+tools.getToolsname()+")</a>"+loop(tools)+"</li>";
				}
				CacheService.getInstance().add(TOOLSKEY, tree);
			}else{
				tree=(String)CacheService.getInstance().get(TOOLSKEY);
			}
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	
	public String updateTreeCache()throws Exception
	{
		if(toolsQuery == null) {
			toolsQuery = new ToolsQuery();
		}
		try
		{
			toolsQuery.setToolsid(1l);
				List<Tools> list=toolsService.findList(toolsQuery);
				toolsList=new ArrayList<Tools>();
				for(Tools tools:list)
				{
					tree+="<li><a href=\"javascript:;\" onclick=\"setcode("+tools.getToolsid()+","+tools.getLevels()+",'"+tools.getLtoolscode()+"','"+tools.getToolsname()+"');\">"+tools.getLtoolscode()+"("+tools.getToolsname()+")</a>"+loop(tools)+"</li>";
				}
				CacheService.getInstance().replace(TOOLSKEY, tree);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		} catch (Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	public String loop(Tools tools)
	{
		ToolsQuery toolsQuery=null;
		toolsQuery=new ToolsQuery();
		toolsQuery.setParentid(tools.getToolsid());
		List<Tools> list=toolsService.findList(toolsQuery);
		StringBuffer sbuf=new StringBuffer();
		if(list.size()>0)
		{
			sbuf.append("<ul id=\"ul"+tools.getToolsid()+"\">");
			for(Tools tool:list)
			{
				sbuf.append("<li id=\"li"+tool.getToolsid()+"\"><a href=\"javascript:setcode("+tool.getToolsid()+","+tool.getLevels()+",'"+tool.getLtoolscode()+"','"+tool.getToolsname()+"');\" >"+tool.getLtoolscode()+"("+tool.getToolsname()+")</a>"+loop(tool)+"</li>");
			}
			sbuf.append("</ul>");
		}
		return sbuf.toString();
	}
	
	@Action("/process/listToBlade")
	
	public String listToBlade()throws Exception
	{
		if(toolsQuery == null) {
			toolsQuery = new ToolsQuery();
		}
		toolsList=toolsService.findToolsBladeList(toolsQuery);
		
		return JSON;
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			//System.out.println("==进入saveOrUpdata方法：==========entity:"+entity.toString());
			//System.out.println("==进入saveOrUpdata方法：==========entity:"+entity.toString());
			
			if(entity.getParentcode()==null||entity.getParentcode().equals(""))
			{
				entity.setLtoolscode(entity.getToolscode());
				entity.setParentcode("");
			}
			else
			{ 
				if(!entity.getParentcode().equals(""))
				{
					entity.setLtoolscode(entity.getParentcode()+"."+entity.getToolscode());
				}
				else
				{
					entity.setLtoolscode(entity.getToolscode());
				}
			}
			//--判代码重复---------------------------------
				if(check()==0){
					entity.setLevels(entity.getLevels()+1);
					toolsService.saveOrUpdate(entity);
					updateTreeCache();
					resultInfo[0] = "0";
					resultInfo[1] = "操作成功";
					
					addActionMessage("操作成功");
				
				}
			//--	
			
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}
	public int check(){
		ToolsQuery toolsQuery=new ToolsQuery();
		toolsQuery.setLtoolscode(entity.getLtoolscode());
		if(toolsService.findList(toolsQuery).size()>0&&entity.getToolsid()==null){
			resultInfo[0] = "-1";
			resultInfo[1] = "此代码已存在!请重新编写!";
			return -1;
		}else if(toolsService.findList(toolsQuery).size()>0){
			
			List<Tools> tlist = toolsService.findList(toolsQuery);
			long check=0;
			for(Tools t:tlist){
				if(t.getToolsid().longValue()!=entity.getToolsid().longValue()){
					check++;
				}
			}
			if(check>0){
				resultInfo[0] = "-1";
				resultInfo[1] = "此代码已存在!请重新编写!";
				return -1;
			}else{
				return 0;
			}
						
		}else{
		return 0;
		}
		
	}
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		
		try {
			save();
				
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}
//======================================================	
	public void prepareSaveToAlone() throws Exception {
		prepareModel();
	}
//======================================================
	public String saveToAlone() throws Exception {
		try {
			entity.setBladeids(toolsQuery.getBladeids());
			Long id = toolsService.save(entity);	
			
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
		}
		return JSON;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = toolsService.getById(toolsId);
			
			resultInfo[0] = "0";
			resultInfo[1] = "查询成功";
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}
	
	/* (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	@Action("/process/showToJson")
	public String showToJson() throws Exception {
		try {
			show();
		} catch(Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}

	
	// -------------------自定义方法
	public String deleteAloneTools()throws Exception{
		//System.out.println("======进入单条tools的删除方法==============");
	try{
		toolsService.deleteById(toolsId);
		
		resultInfo[0] = "0";
		resultInfo[1] = "删除成功";
	} catch(ServiceException e) {
		logger.error(e.getMessage());
		resultInfo[0] = "-1";
		resultInfo[1] = e.getMessage();
	} catch(Exception e) {
		logger.error(e.getMessage());
		resultInfo[0] = "-1";
		resultInfo[1] = "删除失败！请先去掉绑定的刀片关系后再删除！";
	}
		return JSON;
	}
	
	
//================================================	
	public String listAll() throws Exception {
		
		try{
			toolsList = toolsService.findAllList();
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
		} catch(ServiceException e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e){
			logger.warn("param error ", e);
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}	
		
		return JSON;
	}
//-------------------自定义方法
//----------修改方法-----
	
	
	
	
	
	
//============================================================================	
//============================================================================	
	
	/* (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public Tools getModel() {
		return entity;
	}

	/**
	 * 
	 *
	 * @return the lottery query
	 */
	public ToolsQuery getToolsQuery() {
		return toolsQuery;
	}

	
	public void setToolsQuery(ToolsQuery toolsQuery) {
		this.toolsQuery = toolsQuery;
	}

	public void setToolsId(java.lang.Long toolsId) {
		this.toolsId = toolsId;
	}
	
	
	public java.lang.Long getToolsId() {
		return this.toolsId;
	}

	/**
	 * 获得分页器
	 *
	 * @return the page
	 */
	public Page<Tools> getPage() {
		return page;
	}

	/**
	 * 设置分页器
	 *
	 * @param page the new page
	 */
	public void setPage(Page<Tools> page) {
		this.page = page;
	}
	
	/**
	 * 获得Json操作信息
	 *
	 * @return the result info
	 */
	public String[] getResultInfo() {
		return resultInfo;
	}

	/**
	 * 获得所选择的编号列表
	 *
	 * @return 编号列表
	 */
	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	/**
	 * 设置编号列表
	 *
	 * @param checkedIdList 编号列表
	 */
	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}
	

	public void setApplicationContext(ApplicationContext ctx)
		throws BeansException {
	this.ctx = ctx;
	}

	public List<Tools> getToolsList() {
		return toolsList;
	}

	public String getTree() {
		return tree;
	}

	public void setTree(String tree) {
		this.tree = tree;
	}
	
	
}
