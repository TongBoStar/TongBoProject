package com.terrence.core.dol.action;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Scope;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import com.terrence.core.dol.bean.Menu;
import com.terrence.core.dol.bean.Role;
import com.terrence.core.dol.query.MenuQuery;
import com.terrence.core.dol.query.RoleQuery;
import com.terrence.core.dol.service.IMenuOperateService;
import com.terrence.core.dol.service.IMenuService;
import com.terrence.core.dol.service.IRolePowerService;
import com.terrence.core.dol.service.IRoleService;
import com.terrence.crm.dol.base.CrudActionSupport;
import com.terrence.crm.dol.base.core.Page;
import com.terrence.crm.dol.base.exception.ServiceException;
import com.terrence.crm.dol.service.IProjectBomService;
import com.terrence.crm.dol.service.IProjectInfoService;
import com.terrence.crm.dol.utils.DateUtils;
import com.terrence.crm.dol.bean.ProjectBom;
import com.terrence.crm.dol.bean.ProjectInfo;
import com.terrence.crm.dol.query.ProjectBomQuery;
import com.terrence.crm.dol.query.ProjectInfoQuery;

@Scope("prototype")
@Namespace("/roleAdd")
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "roleAdd."+ CrudActionSupport.ACTIONSUFFIX
		+ "?page.pageRequest=${page.pageRequest}", type = "redirect") })
public class RoleAddAction extends CrudActionSupport<Role> implements ApplicationContextAware {

	@Autowired
	@Qualifier("roleService")
	private IRoleService roleService;
	
	private Role entity;
	
	private RoleQuery roleQuery;
	
	private java.lang.Long roleId;
	
	private String[] resultInfo = new String[2];
	
	private List<java.lang.Long> checkedIdList;

	private ApplicationContext ctx;
	private List<Role> roleList = new ArrayList<Role>();
	
	private java.lang.Long rolePid;
	/*
	 * (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#prepareModel()
	 */
	@Override
	protected void prepareModel() throws Exception {
		if (roleId != null) {
			entity = roleService.getById(roleId);
		} else {
			entity = new Role();
		}
	}

	/*
	 * (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#delete()
	 */
	@Override
	public String delete() throws Exception {
		try {
			//menuService.deleteByMultipleId(checkedIdList);
			if(roleId!=null){
				RoleQuery query = new RoleQuery();
				query.setpId(roleId);
				List<Role> lists = roleService.findList(query);
				if(lists!=null&&lists.size()>0){
					resultInfo[0] = "-1";
					resultInfo[1] = "此角色下有子角色，不能被删除！";
				}else{
					roleService.deleteById(roleId);
					resultInfo[0] = "0";
					resultInfo[1] = "删除成功";
				}
				
			}
		} catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
			addActionMessage("删除失败");
		}
		return RELOAD;
	}

	/*
	 * (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#deleteToJson()
	 */
	public String deleteToJson() throws Exception {
		try {
			delete();
		} catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "删除失败";
		}
		return JSON;
	}

	/*
	 * (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#input()
	 */
	@Override
	public String input() throws Exception {
		return INPUT;
	}

	public String listToQuery() throws Exception {
		try{
			list();
		}catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		
		return JSON;
	}

	/*
	 * (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#list()
	 */
	@Override
	public String list() throws Exception {
		try{
			if(this.roleQuery==null){
				roleQuery = new RoleQuery();
			}
			roleList = this.roleService.findList(roleQuery);
			resultInfo[0] = "0";
			resultInfo[1] = "查询列表成功";
		}catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return SUCCESS;
	}

    /**
     * 查询列表
     * @return
     * @throws Exception
     */
	public String listQuery() throws Exception {
		
		return SUCCESS;
	}

	public String listToJson() throws Exception {
		try {
			list();
		} catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}

	public String listToJsonQuery() throws Exception {
		try {
			listQuery();
		} catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询列表失败";
		}
		return JSON;
	}
	
	/*
	 * (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#save()
	 */
	@Override
	public String save() throws Exception {
		
		try {
			if(this.entity!=null&&this.rolePid!=null){
				entity.setpId(rolePid);
				Role role = this.roleService.getById(rolePid);
				entity.setpId(role.getId());
				entity.setpCode(role.getCode());
			}
			
			this.roleService.saveOrUpdate(entity);
			resultInfo[0] = "0";
			resultInfo[1] = "操作成功";
			
			addActionMessage("操作成功");
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
			
			addActionMessage("操作失败");
			return INPUT;
		}
		return RELOAD;
	}

	/*
	 * (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#saveToJson()
	 */
	public String saveToJson() throws Exception {
		try {
			save();
		} catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "操作失败";
		}
		return JSON;
	}
	/*
	 * (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#show()
	 */
	@Override
	public String show() throws Exception {
		
		try {
			entity = null;
			if(this.roleId!=null){
				entity = this.roleService.getById(roleId);
				resultInfo[0] = "0";
				resultInfo[1] = "新增显示成功";
			}else{
				//修改
				entity = new Role();
				resultInfo[0] = "0";
				resultInfo[1] = "查询成功";
			}
			
		} catch(ServiceException e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = e.getMessage();
		} catch(Exception e) {
			logger.error(e.getMessage());
			
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return SHOW;
	}

	/*
	 * (non-Javadoc)
	 * @see com.disney.dol.base.CrudActionSupport#showToJson()
	 */
	public String showToJson() throws Exception {
		try {
			show();
		} catch (Exception e) {
			logger.error(e.getMessage());
			resultInfo[0] = "-1";
			resultInfo[1] = "查询失败";
		}
		return JSON;
	}

	// -------------------自定义方法
	public String listAll() throws Exception {
		
		return JSON;
	}
	
	
	// -------------------自定义方法
	/*
	 * (non-Javadoc)
	 * @see com.opensymphony.xwork2.ModelDriven#getModel()
	 */
	public Role getModel() {
		return entity;
	}

	

	public String[] getResultInfo() {
		return resultInfo;
	}

	public void setResultInfo(String[] resultInfo) {
		this.resultInfo = resultInfo;
	}

	public List<java.lang.Long> getCheckedIdList() {
		return checkedIdList;
	}

	public void setCheckedIdList(List<java.lang.Long> checkedIdList) {
		this.checkedIdList = checkedIdList;
	}

	@Override
	public void setApplicationContext(ApplicationContext applicationContext)
			throws BeansException {
		this.ctx = ctx;
	}

	public Role getEntity() {
		return entity;
	}

	public void setEntity(Role entity) {
		this.entity = entity;
	}

	public RoleQuery getRoleQuery() {
		return roleQuery;
	}

	public void setRoleQuery(RoleQuery roleQuery) {
		this.roleQuery = roleQuery;
	}

	public java.lang.Long getRoleId() {
		return roleId;
	}

	public void setRoleId(java.lang.Long roleId) {
		this.roleId = roleId;
	}

	public List<Role> getRoleList() {
		return roleList;
	}

	public void setRoleList(List<Role> roleList) {
		this.roleList = roleList;
	}

	public java.lang.Long getRolePid() {
		return rolePid;
	}

	public void setRolePid(java.lang.Long rolePid) {
		this.rolePid = rolePid;
	}

	

	

}
